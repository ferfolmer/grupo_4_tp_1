
tp1_sistemas_reactivos_sotr2.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000078b4  080001d0  080001d0  000011d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000001a4  08007a84  08007a84  00008a84  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08007c28  08007c28  00009080  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  08007c28  08007c28  00008c28  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08007c30  08007c30  00009080  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08007c30  08007c30  00008c30  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08007c34  08007c34  00008c34  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000080  20000000  08007c38  00009000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000492c  20000080  08007cb8  00009080  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200049ac  08007cb8  000099ac  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00009080  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001897f  00000000  00000000  000090b0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00003db2  00000000  00000000  00021a2f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000013e8  00000000  00000000  000257e8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000f5c  00000000  00000000  00026bd0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00025a05  00000000  00000000  00027b2c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00019d6a  00000000  00000000  0004d531  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000db3d4  00000000  00000000  0006729b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  0014266f  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00005e0c  00000000  00000000  001426b4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000092  00000000  00000000  001484c0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	@ (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	@ (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	@ (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	20000080 	.word	0x20000080
 80001ec:	00000000 	.word	0x00000000
 80001f0:	08007a6c 	.word	0x08007a6c

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	@ (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	@ (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	@ (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	20000084 	.word	0x20000084
 800020c:	08007a6c 	.word	0x08007a6c

08000210 <strlen>:
 8000210:	4603      	mov	r3, r0
 8000212:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000216:	2a00      	cmp	r2, #0
 8000218:	d1fb      	bne.n	8000212 <strlen+0x2>
 800021a:	1a18      	subs	r0, r3, r0
 800021c:	3801      	subs	r0, #1
 800021e:	4770      	bx	lr

08000220 <memchr>:
 8000220:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 8000224:	2a10      	cmp	r2, #16
 8000226:	db2b      	blt.n	8000280 <memchr+0x60>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	d008      	beq.n	8000240 <memchr+0x20>
 800022e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000232:	3a01      	subs	r2, #1
 8000234:	428b      	cmp	r3, r1
 8000236:	d02d      	beq.n	8000294 <memchr+0x74>
 8000238:	f010 0f07 	tst.w	r0, #7
 800023c:	b342      	cbz	r2, 8000290 <memchr+0x70>
 800023e:	d1f6      	bne.n	800022e <memchr+0xe>
 8000240:	b4f0      	push	{r4, r5, r6, r7}
 8000242:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000246:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800024a:	f022 0407 	bic.w	r4, r2, #7
 800024e:	f07f 0700 	mvns.w	r7, #0
 8000252:	2300      	movs	r3, #0
 8000254:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000258:	3c08      	subs	r4, #8
 800025a:	ea85 0501 	eor.w	r5, r5, r1
 800025e:	ea86 0601 	eor.w	r6, r6, r1
 8000262:	fa85 f547 	uadd8	r5, r5, r7
 8000266:	faa3 f587 	sel	r5, r3, r7
 800026a:	fa86 f647 	uadd8	r6, r6, r7
 800026e:	faa5 f687 	sel	r6, r5, r7
 8000272:	b98e      	cbnz	r6, 8000298 <memchr+0x78>
 8000274:	d1ee      	bne.n	8000254 <memchr+0x34>
 8000276:	bcf0      	pop	{r4, r5, r6, r7}
 8000278:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800027c:	f002 0207 	and.w	r2, r2, #7
 8000280:	b132      	cbz	r2, 8000290 <memchr+0x70>
 8000282:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000286:	3a01      	subs	r2, #1
 8000288:	ea83 0301 	eor.w	r3, r3, r1
 800028c:	b113      	cbz	r3, 8000294 <memchr+0x74>
 800028e:	d1f8      	bne.n	8000282 <memchr+0x62>
 8000290:	2000      	movs	r0, #0
 8000292:	4770      	bx	lr
 8000294:	3801      	subs	r0, #1
 8000296:	4770      	bx	lr
 8000298:	2d00      	cmp	r5, #0
 800029a:	bf06      	itte	eq
 800029c:	4635      	moveq	r5, r6
 800029e:	3803      	subeq	r0, #3
 80002a0:	3807      	subne	r0, #7
 80002a2:	f015 0f01 	tst.w	r5, #1
 80002a6:	d107      	bne.n	80002b8 <memchr+0x98>
 80002a8:	3001      	adds	r0, #1
 80002aa:	f415 7f80 	tst.w	r5, #256	@ 0x100
 80002ae:	bf02      	ittt	eq
 80002b0:	3001      	addeq	r0, #1
 80002b2:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 80002b6:	3001      	addeq	r0, #1
 80002b8:	bcf0      	pop	{r4, r5, r6, r7}
 80002ba:	3801      	subs	r0, #1
 80002bc:	4770      	bx	lr
 80002be:	bf00      	nop

080002c0 <__aeabi_uldivmod>:
 80002c0:	b953      	cbnz	r3, 80002d8 <__aeabi_uldivmod+0x18>
 80002c2:	b94a      	cbnz	r2, 80002d8 <__aeabi_uldivmod+0x18>
 80002c4:	2900      	cmp	r1, #0
 80002c6:	bf08      	it	eq
 80002c8:	2800      	cmpeq	r0, #0
 80002ca:	bf1c      	itt	ne
 80002cc:	f04f 31ff 	movne.w	r1, #4294967295
 80002d0:	f04f 30ff 	movne.w	r0, #4294967295
 80002d4:	f000 b988 	b.w	80005e8 <__aeabi_idiv0>
 80002d8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002dc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002e0:	f000 f806 	bl	80002f0 <__udivmoddi4>
 80002e4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002e8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002ec:	b004      	add	sp, #16
 80002ee:	4770      	bx	lr

080002f0 <__udivmoddi4>:
 80002f0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002f4:	9d08      	ldr	r5, [sp, #32]
 80002f6:	468e      	mov	lr, r1
 80002f8:	4604      	mov	r4, r0
 80002fa:	4688      	mov	r8, r1
 80002fc:	2b00      	cmp	r3, #0
 80002fe:	d14a      	bne.n	8000396 <__udivmoddi4+0xa6>
 8000300:	428a      	cmp	r2, r1
 8000302:	4617      	mov	r7, r2
 8000304:	d962      	bls.n	80003cc <__udivmoddi4+0xdc>
 8000306:	fab2 f682 	clz	r6, r2
 800030a:	b14e      	cbz	r6, 8000320 <__udivmoddi4+0x30>
 800030c:	f1c6 0320 	rsb	r3, r6, #32
 8000310:	fa01 f806 	lsl.w	r8, r1, r6
 8000314:	fa20 f303 	lsr.w	r3, r0, r3
 8000318:	40b7      	lsls	r7, r6
 800031a:	ea43 0808 	orr.w	r8, r3, r8
 800031e:	40b4      	lsls	r4, r6
 8000320:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000324:	fa1f fc87 	uxth.w	ip, r7
 8000328:	fbb8 f1fe 	udiv	r1, r8, lr
 800032c:	0c23      	lsrs	r3, r4, #16
 800032e:	fb0e 8811 	mls	r8, lr, r1, r8
 8000332:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000336:	fb01 f20c 	mul.w	r2, r1, ip
 800033a:	429a      	cmp	r2, r3
 800033c:	d909      	bls.n	8000352 <__udivmoddi4+0x62>
 800033e:	18fb      	adds	r3, r7, r3
 8000340:	f101 30ff 	add.w	r0, r1, #4294967295
 8000344:	f080 80ea 	bcs.w	800051c <__udivmoddi4+0x22c>
 8000348:	429a      	cmp	r2, r3
 800034a:	f240 80e7 	bls.w	800051c <__udivmoddi4+0x22c>
 800034e:	3902      	subs	r1, #2
 8000350:	443b      	add	r3, r7
 8000352:	1a9a      	subs	r2, r3, r2
 8000354:	b2a3      	uxth	r3, r4
 8000356:	fbb2 f0fe 	udiv	r0, r2, lr
 800035a:	fb0e 2210 	mls	r2, lr, r0, r2
 800035e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000362:	fb00 fc0c 	mul.w	ip, r0, ip
 8000366:	459c      	cmp	ip, r3
 8000368:	d909      	bls.n	800037e <__udivmoddi4+0x8e>
 800036a:	18fb      	adds	r3, r7, r3
 800036c:	f100 32ff 	add.w	r2, r0, #4294967295
 8000370:	f080 80d6 	bcs.w	8000520 <__udivmoddi4+0x230>
 8000374:	459c      	cmp	ip, r3
 8000376:	f240 80d3 	bls.w	8000520 <__udivmoddi4+0x230>
 800037a:	443b      	add	r3, r7
 800037c:	3802      	subs	r0, #2
 800037e:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000382:	eba3 030c 	sub.w	r3, r3, ip
 8000386:	2100      	movs	r1, #0
 8000388:	b11d      	cbz	r5, 8000392 <__udivmoddi4+0xa2>
 800038a:	40f3      	lsrs	r3, r6
 800038c:	2200      	movs	r2, #0
 800038e:	e9c5 3200 	strd	r3, r2, [r5]
 8000392:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000396:	428b      	cmp	r3, r1
 8000398:	d905      	bls.n	80003a6 <__udivmoddi4+0xb6>
 800039a:	b10d      	cbz	r5, 80003a0 <__udivmoddi4+0xb0>
 800039c:	e9c5 0100 	strd	r0, r1, [r5]
 80003a0:	2100      	movs	r1, #0
 80003a2:	4608      	mov	r0, r1
 80003a4:	e7f5      	b.n	8000392 <__udivmoddi4+0xa2>
 80003a6:	fab3 f183 	clz	r1, r3
 80003aa:	2900      	cmp	r1, #0
 80003ac:	d146      	bne.n	800043c <__udivmoddi4+0x14c>
 80003ae:	4573      	cmp	r3, lr
 80003b0:	d302      	bcc.n	80003b8 <__udivmoddi4+0xc8>
 80003b2:	4282      	cmp	r2, r0
 80003b4:	f200 8105 	bhi.w	80005c2 <__udivmoddi4+0x2d2>
 80003b8:	1a84      	subs	r4, r0, r2
 80003ba:	eb6e 0203 	sbc.w	r2, lr, r3
 80003be:	2001      	movs	r0, #1
 80003c0:	4690      	mov	r8, r2
 80003c2:	2d00      	cmp	r5, #0
 80003c4:	d0e5      	beq.n	8000392 <__udivmoddi4+0xa2>
 80003c6:	e9c5 4800 	strd	r4, r8, [r5]
 80003ca:	e7e2      	b.n	8000392 <__udivmoddi4+0xa2>
 80003cc:	2a00      	cmp	r2, #0
 80003ce:	f000 8090 	beq.w	80004f2 <__udivmoddi4+0x202>
 80003d2:	fab2 f682 	clz	r6, r2
 80003d6:	2e00      	cmp	r6, #0
 80003d8:	f040 80a4 	bne.w	8000524 <__udivmoddi4+0x234>
 80003dc:	1a8a      	subs	r2, r1, r2
 80003de:	0c03      	lsrs	r3, r0, #16
 80003e0:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80003e4:	b280      	uxth	r0, r0
 80003e6:	b2bc      	uxth	r4, r7
 80003e8:	2101      	movs	r1, #1
 80003ea:	fbb2 fcfe 	udiv	ip, r2, lr
 80003ee:	fb0e 221c 	mls	r2, lr, ip, r2
 80003f2:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80003f6:	fb04 f20c 	mul.w	r2, r4, ip
 80003fa:	429a      	cmp	r2, r3
 80003fc:	d907      	bls.n	800040e <__udivmoddi4+0x11e>
 80003fe:	18fb      	adds	r3, r7, r3
 8000400:	f10c 38ff 	add.w	r8, ip, #4294967295
 8000404:	d202      	bcs.n	800040c <__udivmoddi4+0x11c>
 8000406:	429a      	cmp	r2, r3
 8000408:	f200 80e0 	bhi.w	80005cc <__udivmoddi4+0x2dc>
 800040c:	46c4      	mov	ip, r8
 800040e:	1a9b      	subs	r3, r3, r2
 8000410:	fbb3 f2fe 	udiv	r2, r3, lr
 8000414:	fb0e 3312 	mls	r3, lr, r2, r3
 8000418:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
 800041c:	fb02 f404 	mul.w	r4, r2, r4
 8000420:	429c      	cmp	r4, r3
 8000422:	d907      	bls.n	8000434 <__udivmoddi4+0x144>
 8000424:	18fb      	adds	r3, r7, r3
 8000426:	f102 30ff 	add.w	r0, r2, #4294967295
 800042a:	d202      	bcs.n	8000432 <__udivmoddi4+0x142>
 800042c:	429c      	cmp	r4, r3
 800042e:	f200 80ca 	bhi.w	80005c6 <__udivmoddi4+0x2d6>
 8000432:	4602      	mov	r2, r0
 8000434:	1b1b      	subs	r3, r3, r4
 8000436:	ea42 400c 	orr.w	r0, r2, ip, lsl #16
 800043a:	e7a5      	b.n	8000388 <__udivmoddi4+0x98>
 800043c:	f1c1 0620 	rsb	r6, r1, #32
 8000440:	408b      	lsls	r3, r1
 8000442:	fa22 f706 	lsr.w	r7, r2, r6
 8000446:	431f      	orrs	r7, r3
 8000448:	fa0e f401 	lsl.w	r4, lr, r1
 800044c:	fa20 f306 	lsr.w	r3, r0, r6
 8000450:	fa2e fe06 	lsr.w	lr, lr, r6
 8000454:	ea4f 4917 	mov.w	r9, r7, lsr #16
 8000458:	4323      	orrs	r3, r4
 800045a:	fa00 f801 	lsl.w	r8, r0, r1
 800045e:	fa1f fc87 	uxth.w	ip, r7
 8000462:	fbbe f0f9 	udiv	r0, lr, r9
 8000466:	0c1c      	lsrs	r4, r3, #16
 8000468:	fb09 ee10 	mls	lr, r9, r0, lr
 800046c:	ea44 440e 	orr.w	r4, r4, lr, lsl #16
 8000470:	fb00 fe0c 	mul.w	lr, r0, ip
 8000474:	45a6      	cmp	lr, r4
 8000476:	fa02 f201 	lsl.w	r2, r2, r1
 800047a:	d909      	bls.n	8000490 <__udivmoddi4+0x1a0>
 800047c:	193c      	adds	r4, r7, r4
 800047e:	f100 3aff 	add.w	sl, r0, #4294967295
 8000482:	f080 809c 	bcs.w	80005be <__udivmoddi4+0x2ce>
 8000486:	45a6      	cmp	lr, r4
 8000488:	f240 8099 	bls.w	80005be <__udivmoddi4+0x2ce>
 800048c:	3802      	subs	r0, #2
 800048e:	443c      	add	r4, r7
 8000490:	eba4 040e 	sub.w	r4, r4, lr
 8000494:	fa1f fe83 	uxth.w	lr, r3
 8000498:	fbb4 f3f9 	udiv	r3, r4, r9
 800049c:	fb09 4413 	mls	r4, r9, r3, r4
 80004a0:	ea4e 4404 	orr.w	r4, lr, r4, lsl #16
 80004a4:	fb03 fc0c 	mul.w	ip, r3, ip
 80004a8:	45a4      	cmp	ip, r4
 80004aa:	d908      	bls.n	80004be <__udivmoddi4+0x1ce>
 80004ac:	193c      	adds	r4, r7, r4
 80004ae:	f103 3eff 	add.w	lr, r3, #4294967295
 80004b2:	f080 8082 	bcs.w	80005ba <__udivmoddi4+0x2ca>
 80004b6:	45a4      	cmp	ip, r4
 80004b8:	d97f      	bls.n	80005ba <__udivmoddi4+0x2ca>
 80004ba:	3b02      	subs	r3, #2
 80004bc:	443c      	add	r4, r7
 80004be:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 80004c2:	eba4 040c 	sub.w	r4, r4, ip
 80004c6:	fba0 ec02 	umull	lr, ip, r0, r2
 80004ca:	4564      	cmp	r4, ip
 80004cc:	4673      	mov	r3, lr
 80004ce:	46e1      	mov	r9, ip
 80004d0:	d362      	bcc.n	8000598 <__udivmoddi4+0x2a8>
 80004d2:	d05f      	beq.n	8000594 <__udivmoddi4+0x2a4>
 80004d4:	b15d      	cbz	r5, 80004ee <__udivmoddi4+0x1fe>
 80004d6:	ebb8 0203 	subs.w	r2, r8, r3
 80004da:	eb64 0409 	sbc.w	r4, r4, r9
 80004de:	fa04 f606 	lsl.w	r6, r4, r6
 80004e2:	fa22 f301 	lsr.w	r3, r2, r1
 80004e6:	431e      	orrs	r6, r3
 80004e8:	40cc      	lsrs	r4, r1
 80004ea:	e9c5 6400 	strd	r6, r4, [r5]
 80004ee:	2100      	movs	r1, #0
 80004f0:	e74f      	b.n	8000392 <__udivmoddi4+0xa2>
 80004f2:	fbb1 fcf2 	udiv	ip, r1, r2
 80004f6:	0c01      	lsrs	r1, r0, #16
 80004f8:	ea41 410e 	orr.w	r1, r1, lr, lsl #16
 80004fc:	b280      	uxth	r0, r0
 80004fe:	ea40 4201 	orr.w	r2, r0, r1, lsl #16
 8000502:	463b      	mov	r3, r7
 8000504:	4638      	mov	r0, r7
 8000506:	463c      	mov	r4, r7
 8000508:	46b8      	mov	r8, r7
 800050a:	46be      	mov	lr, r7
 800050c:	2620      	movs	r6, #32
 800050e:	fbb1 f1f7 	udiv	r1, r1, r7
 8000512:	eba2 0208 	sub.w	r2, r2, r8
 8000516:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 800051a:	e766      	b.n	80003ea <__udivmoddi4+0xfa>
 800051c:	4601      	mov	r1, r0
 800051e:	e718      	b.n	8000352 <__udivmoddi4+0x62>
 8000520:	4610      	mov	r0, r2
 8000522:	e72c      	b.n	800037e <__udivmoddi4+0x8e>
 8000524:	f1c6 0220 	rsb	r2, r6, #32
 8000528:	fa2e f302 	lsr.w	r3, lr, r2
 800052c:	40b7      	lsls	r7, r6
 800052e:	40b1      	lsls	r1, r6
 8000530:	fa20 f202 	lsr.w	r2, r0, r2
 8000534:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000538:	430a      	orrs	r2, r1
 800053a:	fbb3 f8fe 	udiv	r8, r3, lr
 800053e:	b2bc      	uxth	r4, r7
 8000540:	fb0e 3318 	mls	r3, lr, r8, r3
 8000544:	0c11      	lsrs	r1, r2, #16
 8000546:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800054a:	fb08 f904 	mul.w	r9, r8, r4
 800054e:	40b0      	lsls	r0, r6
 8000550:	4589      	cmp	r9, r1
 8000552:	ea4f 4310 	mov.w	r3, r0, lsr #16
 8000556:	b280      	uxth	r0, r0
 8000558:	d93e      	bls.n	80005d8 <__udivmoddi4+0x2e8>
 800055a:	1879      	adds	r1, r7, r1
 800055c:	f108 3cff 	add.w	ip, r8, #4294967295
 8000560:	d201      	bcs.n	8000566 <__udivmoddi4+0x276>
 8000562:	4589      	cmp	r9, r1
 8000564:	d81f      	bhi.n	80005a6 <__udivmoddi4+0x2b6>
 8000566:	eba1 0109 	sub.w	r1, r1, r9
 800056a:	fbb1 f9fe 	udiv	r9, r1, lr
 800056e:	fb09 f804 	mul.w	r8, r9, r4
 8000572:	fb0e 1119 	mls	r1, lr, r9, r1
 8000576:	b292      	uxth	r2, r2
 8000578:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 800057c:	4542      	cmp	r2, r8
 800057e:	d229      	bcs.n	80005d4 <__udivmoddi4+0x2e4>
 8000580:	18ba      	adds	r2, r7, r2
 8000582:	f109 31ff 	add.w	r1, r9, #4294967295
 8000586:	d2c4      	bcs.n	8000512 <__udivmoddi4+0x222>
 8000588:	4542      	cmp	r2, r8
 800058a:	d2c2      	bcs.n	8000512 <__udivmoddi4+0x222>
 800058c:	f1a9 0102 	sub.w	r1, r9, #2
 8000590:	443a      	add	r2, r7
 8000592:	e7be      	b.n	8000512 <__udivmoddi4+0x222>
 8000594:	45f0      	cmp	r8, lr
 8000596:	d29d      	bcs.n	80004d4 <__udivmoddi4+0x1e4>
 8000598:	ebbe 0302 	subs.w	r3, lr, r2
 800059c:	eb6c 0c07 	sbc.w	ip, ip, r7
 80005a0:	3801      	subs	r0, #1
 80005a2:	46e1      	mov	r9, ip
 80005a4:	e796      	b.n	80004d4 <__udivmoddi4+0x1e4>
 80005a6:	eba7 0909 	sub.w	r9, r7, r9
 80005aa:	4449      	add	r1, r9
 80005ac:	f1a8 0c02 	sub.w	ip, r8, #2
 80005b0:	fbb1 f9fe 	udiv	r9, r1, lr
 80005b4:	fb09 f804 	mul.w	r8, r9, r4
 80005b8:	e7db      	b.n	8000572 <__udivmoddi4+0x282>
 80005ba:	4673      	mov	r3, lr
 80005bc:	e77f      	b.n	80004be <__udivmoddi4+0x1ce>
 80005be:	4650      	mov	r0, sl
 80005c0:	e766      	b.n	8000490 <__udivmoddi4+0x1a0>
 80005c2:	4608      	mov	r0, r1
 80005c4:	e6fd      	b.n	80003c2 <__udivmoddi4+0xd2>
 80005c6:	443b      	add	r3, r7
 80005c8:	3a02      	subs	r2, #2
 80005ca:	e733      	b.n	8000434 <__udivmoddi4+0x144>
 80005cc:	f1ac 0c02 	sub.w	ip, ip, #2
 80005d0:	443b      	add	r3, r7
 80005d2:	e71c      	b.n	800040e <__udivmoddi4+0x11e>
 80005d4:	4649      	mov	r1, r9
 80005d6:	e79c      	b.n	8000512 <__udivmoddi4+0x222>
 80005d8:	eba1 0109 	sub.w	r1, r1, r9
 80005dc:	46c4      	mov	ip, r8
 80005de:	fbb1 f9fe 	udiv	r9, r1, lr
 80005e2:	fb09 f804 	mul.w	r8, r9, r4
 80005e6:	e7c4      	b.n	8000572 <__udivmoddi4+0x282>

080005e8 <__aeabi_idiv0>:
 80005e8:	4770      	bx	lr
 80005ea:	bf00      	nop

080005ec <vApplicationGetIdleTaskMemory>:
/* USER CODE BEGIN GET_IDLE_TASK_MEMORY */
static StaticTask_t xIdleTaskTCBBuffer;
static StackType_t xIdleStack[configMINIMAL_STACK_SIZE];

void vApplicationGetIdleTaskMemory( StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize )
{
 80005ec:	b480      	push	{r7}
 80005ee:	b085      	sub	sp, #20
 80005f0:	af00      	add	r7, sp, #0
 80005f2:	60f8      	str	r0, [r7, #12]
 80005f4:	60b9      	str	r1, [r7, #8]
 80005f6:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer = &xIdleTaskTCBBuffer;
 80005f8:	68fb      	ldr	r3, [r7, #12]
 80005fa:	4a07      	ldr	r2, [pc, #28]	@ (8000618 <vApplicationGetIdleTaskMemory+0x2c>)
 80005fc:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &xIdleStack[0];
 80005fe:	68bb      	ldr	r3, [r7, #8]
 8000600:	4a06      	ldr	r2, [pc, #24]	@ (800061c <vApplicationGetIdleTaskMemory+0x30>)
 8000602:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize = configMINIMAL_STACK_SIZE;
 8000604:	687b      	ldr	r3, [r7, #4]
 8000606:	2280      	movs	r2, #128	@ 0x80
 8000608:	601a      	str	r2, [r3, #0]
  /* place for user code */
}
 800060a:	bf00      	nop
 800060c:	3714      	adds	r7, #20
 800060e:	46bd      	mov	sp, r7
 8000610:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000614:	4770      	bx	lr
 8000616:	bf00      	nop
 8000618:	2000009c 	.word	0x2000009c
 800061c:	2000013c 	.word	0x2000013c

08000620 <vApplicationGetTimerTaskMemory>:
/* USER CODE BEGIN GET_TIMER_TASK_MEMORY */
static StaticTask_t xTimerTaskTCBBuffer;
static StackType_t xTimerStack[configTIMER_TASK_STACK_DEPTH];

void vApplicationGetTimerTaskMemory( StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize )
{
 8000620:	b480      	push	{r7}
 8000622:	b085      	sub	sp, #20
 8000624:	af00      	add	r7, sp, #0
 8000626:	60f8      	str	r0, [r7, #12]
 8000628:	60b9      	str	r1, [r7, #8]
 800062a:	607a      	str	r2, [r7, #4]
  *ppxTimerTaskTCBBuffer = &xTimerTaskTCBBuffer;
 800062c:	68fb      	ldr	r3, [r7, #12]
 800062e:	4a07      	ldr	r2, [pc, #28]	@ (800064c <vApplicationGetTimerTaskMemory+0x2c>)
 8000630:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &xTimerStack[0];
 8000632:	68bb      	ldr	r3, [r7, #8]
 8000634:	4a06      	ldr	r2, [pc, #24]	@ (8000650 <vApplicationGetTimerTaskMemory+0x30>)
 8000636:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize = configTIMER_TASK_STACK_DEPTH;
 8000638:	687b      	ldr	r3, [r7, #4]
 800063a:	f44f 7280 	mov.w	r2, #256	@ 0x100
 800063e:	601a      	str	r2, [r3, #0]
  /* place for user code */
}
 8000640:	bf00      	nop
 8000642:	3714      	adds	r7, #20
 8000644:	46bd      	mov	sp, r7
 8000646:	f85d 7b04 	ldr.w	r7, [sp], #4
 800064a:	4770      	bx	lr
 800064c:	2000033c 	.word	0x2000033c
 8000650:	200003dc 	.word	0x200003dc

08000654 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000654:	b5b0      	push	{r4, r5, r7, lr}
 8000656:	b088      	sub	sp, #32
 8000658:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN 1 */
  initialise_monitor_handles();
 800065a:	f005 fffd 	bl	8006658 <initialise_monitor_handles>
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800065e:	f000 fb49 	bl	8000cf4 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000662:	f000 f827 	bl	80006b4 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000666:	f000 f909 	bl	800087c <MX_GPIO_Init>
  MX_USART2_UART_Init();
 800066a:	f000 f8dd 	bl	8000828 <MX_USART2_UART_Init>
  MX_TIM2_Init();
 800066e:	f000 f88f 	bl	8000790 <MX_TIM2_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_Base_Start_IT(&htim2);
 8000672:	480d      	ldr	r0, [pc, #52]	@ (80006a8 <main+0x54>)
 8000674:	f001 fc92 	bl	8001f9c <HAL_TIM_Base_Start_IT>
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* definition and creation of defaultTask */
  osThreadDef(defaultTask, StartDefaultTask, osPriorityNormal, 0, 128);
 8000678:	4b0c      	ldr	r3, [pc, #48]	@ (80006ac <main+0x58>)
 800067a:	1d3c      	adds	r4, r7, #4
 800067c:	461d      	mov	r5, r3
 800067e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000680:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000682:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8000686:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  defaultTaskHandle = osThreadCreate(osThread(defaultTask), NULL);
 800068a:	1d3b      	adds	r3, r7, #4
 800068c:	2100      	movs	r1, #0
 800068e:	4618      	mov	r0, r3
 8000690:	f002 fb87 	bl	8002da2 <osThreadCreate>
 8000694:	4603      	mov	r3, r0
 8000696:	4a06      	ldr	r2, [pc, #24]	@ (80006b0 <main+0x5c>)
 8000698:	6013      	str	r3, [r2, #0]

  /* USER CODE BEGIN RTOS_THREADS */
  /* add threads, ... */

  app_init();
 800069a:	f005 f89d 	bl	80057d8 <app_init>

  /* USER CODE END RTOS_THREADS */

  /* Start scheduler */
  osKernelStart();
 800069e:	f002 fb79 	bl	8002d94 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 80006a2:	bf00      	nop
 80006a4:	e7fd      	b.n	80006a2 <main+0x4e>
 80006a6:	bf00      	nop
 80006a8:	200007dc 	.word	0x200007dc
 80006ac:	08007a90 	.word	0x08007a90
 80006b0:	2000086c 	.word	0x2000086c

080006b4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80006b4:	b580      	push	{r7, lr}
 80006b6:	b094      	sub	sp, #80	@ 0x50
 80006b8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80006ba:	f107 031c 	add.w	r3, r7, #28
 80006be:	2234      	movs	r2, #52	@ 0x34
 80006c0:	2100      	movs	r1, #0
 80006c2:	4618      	mov	r0, r3
 80006c4:	f006 fa53 	bl	8006b6e <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80006c8:	f107 0308 	add.w	r3, r7, #8
 80006cc:	2200      	movs	r2, #0
 80006ce:	601a      	str	r2, [r3, #0]
 80006d0:	605a      	str	r2, [r3, #4]
 80006d2:	609a      	str	r2, [r3, #8]
 80006d4:	60da      	str	r2, [r3, #12]
 80006d6:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80006d8:	2300      	movs	r3, #0
 80006da:	607b      	str	r3, [r7, #4]
 80006dc:	4b2a      	ldr	r3, [pc, #168]	@ (8000788 <SystemClock_Config+0xd4>)
 80006de:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80006e0:	4a29      	ldr	r2, [pc, #164]	@ (8000788 <SystemClock_Config+0xd4>)
 80006e2:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80006e6:	6413      	str	r3, [r2, #64]	@ 0x40
 80006e8:	4b27      	ldr	r3, [pc, #156]	@ (8000788 <SystemClock_Config+0xd4>)
 80006ea:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80006ec:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80006f0:	607b      	str	r3, [r7, #4]
 80006f2:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 80006f4:	2300      	movs	r3, #0
 80006f6:	603b      	str	r3, [r7, #0]
 80006f8:	4b24      	ldr	r3, [pc, #144]	@ (800078c <SystemClock_Config+0xd8>)
 80006fa:	681b      	ldr	r3, [r3, #0]
 80006fc:	f423 4340 	bic.w	r3, r3, #49152	@ 0xc000
 8000700:	4a22      	ldr	r2, [pc, #136]	@ (800078c <SystemClock_Config+0xd8>)
 8000702:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000706:	6013      	str	r3, [r2, #0]
 8000708:	4b20      	ldr	r3, [pc, #128]	@ (800078c <SystemClock_Config+0xd8>)
 800070a:	681b      	ldr	r3, [r3, #0]
 800070c:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8000710:	603b      	str	r3, [r7, #0]
 8000712:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000714:	2302      	movs	r3, #2
 8000716:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000718:	2301      	movs	r3, #1
 800071a:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800071c:	2310      	movs	r3, #16
 800071e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000720:	2302      	movs	r3, #2
 8000722:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000724:	2300      	movs	r3, #0
 8000726:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLM = 16;
 8000728:	2310      	movs	r3, #16
 800072a:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLN = 336;
 800072c:	f44f 73a8 	mov.w	r3, #336	@ 0x150
 8000730:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 8000732:	2304      	movs	r3, #4
 8000734:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLQ = 2;
 8000736:	2302      	movs	r3, #2
 8000738:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLR = 2;
 800073a:	2302      	movs	r3, #2
 800073c:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800073e:	f107 031c 	add.w	r3, r7, #28
 8000742:	4618      	mov	r0, r3
 8000744:	f001 f93c 	bl	80019c0 <HAL_RCC_OscConfig>
 8000748:	4603      	mov	r3, r0
 800074a:	2b00      	cmp	r3, #0
 800074c:	d001      	beq.n	8000752 <SystemClock_Config+0x9e>
  {
    Error_Handler();
 800074e:	f000 f91d 	bl	800098c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000752:	230f      	movs	r3, #15
 8000754:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000756:	2302      	movs	r3, #2
 8000758:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800075a:	2300      	movs	r3, #0
 800075c:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 800075e:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000762:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000764:	2300      	movs	r3, #0
 8000766:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000768:	f107 0308 	add.w	r3, r7, #8
 800076c:	2102      	movs	r1, #2
 800076e:	4618      	mov	r0, r3
 8000770:	f000 fdaa 	bl	80012c8 <HAL_RCC_ClockConfig>
 8000774:	4603      	mov	r3, r0
 8000776:	2b00      	cmp	r3, #0
 8000778:	d001      	beq.n	800077e <SystemClock_Config+0xca>
  {
    Error_Handler();
 800077a:	f000 f907 	bl	800098c <Error_Handler>
  }
}
 800077e:	bf00      	nop
 8000780:	3750      	adds	r7, #80	@ 0x50
 8000782:	46bd      	mov	sp, r7
 8000784:	bd80      	pop	{r7, pc}
 8000786:	bf00      	nop
 8000788:	40023800 	.word	0x40023800
 800078c:	40007000 	.word	0x40007000

08000790 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8000790:	b580      	push	{r7, lr}
 8000792:	b086      	sub	sp, #24
 8000794:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000796:	f107 0308 	add.w	r3, r7, #8
 800079a:	2200      	movs	r2, #0
 800079c:	601a      	str	r2, [r3, #0]
 800079e:	605a      	str	r2, [r3, #4]
 80007a0:	609a      	str	r2, [r3, #8]
 80007a2:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80007a4:	463b      	mov	r3, r7
 80007a6:	2200      	movs	r2, #0
 80007a8:	601a      	str	r2, [r3, #0]
 80007aa:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 80007ac:	4b1d      	ldr	r3, [pc, #116]	@ (8000824 <MX_TIM2_Init+0x94>)
 80007ae:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 80007b2:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 2-1;
 80007b4:	4b1b      	ldr	r3, [pc, #108]	@ (8000824 <MX_TIM2_Init+0x94>)
 80007b6:	2201      	movs	r2, #1
 80007b8:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80007ba:	4b1a      	ldr	r3, [pc, #104]	@ (8000824 <MX_TIM2_Init+0x94>)
 80007bc:	2200      	movs	r2, #0
 80007be:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 42000 - 1;
 80007c0:	4b18      	ldr	r3, [pc, #96]	@ (8000824 <MX_TIM2_Init+0x94>)
 80007c2:	f24a 420f 	movw	r2, #41999	@ 0xa40f
 80007c6:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80007c8:	4b16      	ldr	r3, [pc, #88]	@ (8000824 <MX_TIM2_Init+0x94>)
 80007ca:	2200      	movs	r2, #0
 80007cc:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80007ce:	4b15      	ldr	r3, [pc, #84]	@ (8000824 <MX_TIM2_Init+0x94>)
 80007d0:	2200      	movs	r2, #0
 80007d2:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 80007d4:	4813      	ldr	r0, [pc, #76]	@ (8000824 <MX_TIM2_Init+0x94>)
 80007d6:	f001 fb91 	bl	8001efc <HAL_TIM_Base_Init>
 80007da:	4603      	mov	r3, r0
 80007dc:	2b00      	cmp	r3, #0
 80007de:	d001      	beq.n	80007e4 <MX_TIM2_Init+0x54>
  {
    Error_Handler();
 80007e0:	f000 f8d4 	bl	800098c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80007e4:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80007e8:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 80007ea:	f107 0308 	add.w	r3, r7, #8
 80007ee:	4619      	mov	r1, r3
 80007f0:	480c      	ldr	r0, [pc, #48]	@ (8000824 <MX_TIM2_Init+0x94>)
 80007f2:	f001 fd33 	bl	800225c <HAL_TIM_ConfigClockSource>
 80007f6:	4603      	mov	r3, r0
 80007f8:	2b00      	cmp	r3, #0
 80007fa:	d001      	beq.n	8000800 <MX_TIM2_Init+0x70>
  {
    Error_Handler();
 80007fc:	f000 f8c6 	bl	800098c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000800:	2300      	movs	r3, #0
 8000802:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000804:	2300      	movs	r3, #0
 8000806:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8000808:	463b      	mov	r3, r7
 800080a:	4619      	mov	r1, r3
 800080c:	4805      	ldr	r0, [pc, #20]	@ (8000824 <MX_TIM2_Init+0x94>)
 800080e:	f001 ff55 	bl	80026bc <HAL_TIMEx_MasterConfigSynchronization>
 8000812:	4603      	mov	r3, r0
 8000814:	2b00      	cmp	r3, #0
 8000816:	d001      	beq.n	800081c <MX_TIM2_Init+0x8c>
  {
    Error_Handler();
 8000818:	f000 f8b8 	bl	800098c <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 800081c:	bf00      	nop
 800081e:	3718      	adds	r7, #24
 8000820:	46bd      	mov	sp, r7
 8000822:	bd80      	pop	{r7, pc}
 8000824:	200007dc 	.word	0x200007dc

08000828 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000828:	b580      	push	{r7, lr}
 800082a:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 800082c:	4b11      	ldr	r3, [pc, #68]	@ (8000874 <MX_USART2_UART_Init+0x4c>)
 800082e:	4a12      	ldr	r2, [pc, #72]	@ (8000878 <MX_USART2_UART_Init+0x50>)
 8000830:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8000832:	4b10      	ldr	r3, [pc, #64]	@ (8000874 <MX_USART2_UART_Init+0x4c>)
 8000834:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8000838:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800083a:	4b0e      	ldr	r3, [pc, #56]	@ (8000874 <MX_USART2_UART_Init+0x4c>)
 800083c:	2200      	movs	r2, #0
 800083e:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000840:	4b0c      	ldr	r3, [pc, #48]	@ (8000874 <MX_USART2_UART_Init+0x4c>)
 8000842:	2200      	movs	r2, #0
 8000844:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000846:	4b0b      	ldr	r3, [pc, #44]	@ (8000874 <MX_USART2_UART_Init+0x4c>)
 8000848:	2200      	movs	r2, #0
 800084a:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 800084c:	4b09      	ldr	r3, [pc, #36]	@ (8000874 <MX_USART2_UART_Init+0x4c>)
 800084e:	220c      	movs	r2, #12
 8000850:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000852:	4b08      	ldr	r3, [pc, #32]	@ (8000874 <MX_USART2_UART_Init+0x4c>)
 8000854:	2200      	movs	r2, #0
 8000856:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000858:	4b06      	ldr	r3, [pc, #24]	@ (8000874 <MX_USART2_UART_Init+0x4c>)
 800085a:	2200      	movs	r2, #0
 800085c:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 800085e:	4805      	ldr	r0, [pc, #20]	@ (8000874 <MX_USART2_UART_Init+0x4c>)
 8000860:	f001 ffbc 	bl	80027dc <HAL_UART_Init>
 8000864:	4603      	mov	r3, r0
 8000866:	2b00      	cmp	r3, #0
 8000868:	d001      	beq.n	800086e <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 800086a:	f000 f88f 	bl	800098c <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 800086e:	bf00      	nop
 8000870:	bd80      	pop	{r7, pc}
 8000872:	bf00      	nop
 8000874:	20000824 	.word	0x20000824
 8000878:	40004400 	.word	0x40004400

0800087c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800087c:	b580      	push	{r7, lr}
 800087e:	b08a      	sub	sp, #40	@ 0x28
 8000880:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000882:	f107 0314 	add.w	r3, r7, #20
 8000886:	2200      	movs	r2, #0
 8000888:	601a      	str	r2, [r3, #0]
 800088a:	605a      	str	r2, [r3, #4]
 800088c:	609a      	str	r2, [r3, #8]
 800088e:	60da      	str	r2, [r3, #12]
 8000890:	611a      	str	r2, [r3, #16]
  /* USER CODE BEGIN MX_GPIO_Init_1 */

  /* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000892:	2300      	movs	r3, #0
 8000894:	613b      	str	r3, [r7, #16]
 8000896:	4b2d      	ldr	r3, [pc, #180]	@ (800094c <MX_GPIO_Init+0xd0>)
 8000898:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800089a:	4a2c      	ldr	r2, [pc, #176]	@ (800094c <MX_GPIO_Init+0xd0>)
 800089c:	f043 0304 	orr.w	r3, r3, #4
 80008a0:	6313      	str	r3, [r2, #48]	@ 0x30
 80008a2:	4b2a      	ldr	r3, [pc, #168]	@ (800094c <MX_GPIO_Init+0xd0>)
 80008a4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80008a6:	f003 0304 	and.w	r3, r3, #4
 80008aa:	613b      	str	r3, [r7, #16]
 80008ac:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80008ae:	2300      	movs	r3, #0
 80008b0:	60fb      	str	r3, [r7, #12]
 80008b2:	4b26      	ldr	r3, [pc, #152]	@ (800094c <MX_GPIO_Init+0xd0>)
 80008b4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80008b6:	4a25      	ldr	r2, [pc, #148]	@ (800094c <MX_GPIO_Init+0xd0>)
 80008b8:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80008bc:	6313      	str	r3, [r2, #48]	@ 0x30
 80008be:	4b23      	ldr	r3, [pc, #140]	@ (800094c <MX_GPIO_Init+0xd0>)
 80008c0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80008c2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80008c6:	60fb      	str	r3, [r7, #12]
 80008c8:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80008ca:	2300      	movs	r3, #0
 80008cc:	60bb      	str	r3, [r7, #8]
 80008ce:	4b1f      	ldr	r3, [pc, #124]	@ (800094c <MX_GPIO_Init+0xd0>)
 80008d0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80008d2:	4a1e      	ldr	r2, [pc, #120]	@ (800094c <MX_GPIO_Init+0xd0>)
 80008d4:	f043 0301 	orr.w	r3, r3, #1
 80008d8:	6313      	str	r3, [r2, #48]	@ 0x30
 80008da:	4b1c      	ldr	r3, [pc, #112]	@ (800094c <MX_GPIO_Init+0xd0>)
 80008dc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80008de:	f003 0301 	and.w	r3, r3, #1
 80008e2:	60bb      	str	r3, [r7, #8]
 80008e4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80008e6:	2300      	movs	r3, #0
 80008e8:	607b      	str	r3, [r7, #4]
 80008ea:	4b18      	ldr	r3, [pc, #96]	@ (800094c <MX_GPIO_Init+0xd0>)
 80008ec:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80008ee:	4a17      	ldr	r2, [pc, #92]	@ (800094c <MX_GPIO_Init+0xd0>)
 80008f0:	f043 0302 	orr.w	r3, r3, #2
 80008f4:	6313      	str	r3, [r2, #48]	@ 0x30
 80008f6:	4b15      	ldr	r3, [pc, #84]	@ (800094c <MX_GPIO_Init+0xd0>)
 80008f8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80008fa:	f003 0302 	and.w	r3, r3, #2
 80008fe:	607b      	str	r3, [r7, #4]
 8000900:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 8000902:	2200      	movs	r2, #0
 8000904:	2120      	movs	r1, #32
 8000906:	4812      	ldr	r0, [pc, #72]	@ (8000950 <MX_GPIO_Init+0xd4>)
 8000908:	f000 fcc4 	bl	8001294 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 800090c:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8000910:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8000912:	f44f 1304 	mov.w	r3, #2162688	@ 0x210000
 8000916:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000918:	2300      	movs	r3, #0
 800091a:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 800091c:	f107 0314 	add.w	r3, r7, #20
 8000920:	4619      	mov	r1, r3
 8000922:	480c      	ldr	r0, [pc, #48]	@ (8000954 <MX_GPIO_Init+0xd8>)
 8000924:	f000 fb0a 	bl	8000f3c <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 8000928:	2320      	movs	r3, #32
 800092a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800092c:	2301      	movs	r3, #1
 800092e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000930:	2300      	movs	r3, #0
 8000932:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000934:	2300      	movs	r3, #0
 8000936:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 8000938:	f107 0314 	add.w	r3, r7, #20
 800093c:	4619      	mov	r1, r3
 800093e:	4804      	ldr	r0, [pc, #16]	@ (8000950 <MX_GPIO_Init+0xd4>)
 8000940:	f000 fafc 	bl	8000f3c <HAL_GPIO_Init>

  /* USER CODE BEGIN MX_GPIO_Init_2 */

  /* USER CODE END MX_GPIO_Init_2 */
}
 8000944:	bf00      	nop
 8000946:	3728      	adds	r7, #40	@ 0x28
 8000948:	46bd      	mov	sp, r7
 800094a:	bd80      	pop	{r7, pc}
 800094c:	40023800 	.word	0x40023800
 8000950:	40020000 	.word	0x40020000
 8000954:	40020800 	.word	0x40020800

08000958 <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void const * argument)
{
 8000958:	b580      	push	{r7, lr}
 800095a:	b082      	sub	sp, #8
 800095c:	af00      	add	r7, sp, #0
 800095e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 5 */
  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
 8000960:	2001      	movs	r0, #1
 8000962:	f002 fa6a 	bl	8002e3a <osDelay>
 8000966:	e7fb      	b.n	8000960 <StartDefaultTask+0x8>

08000968 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000968:	b580      	push	{r7, lr}
 800096a:	b082      	sub	sp, #8
 800096c:	af00      	add	r7, sp, #0
 800096e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM1)
 8000970:	687b      	ldr	r3, [r7, #4]
 8000972:	681b      	ldr	r3, [r3, #0]
 8000974:	4a04      	ldr	r2, [pc, #16]	@ (8000988 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8000976:	4293      	cmp	r3, r2
 8000978:	d101      	bne.n	800097e <HAL_TIM_PeriodElapsedCallback+0x16>
  {
    HAL_IncTick();
 800097a:	f000 f9dd 	bl	8000d38 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 800097e:	bf00      	nop
 8000980:	3708      	adds	r7, #8
 8000982:	46bd      	mov	sp, r7
 8000984:	bd80      	pop	{r7, pc}
 8000986:	bf00      	nop
 8000988:	40010000 	.word	0x40010000

0800098c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800098c:	b480      	push	{r7}
 800098e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000990:	b672      	cpsid	i
}
 8000992:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000994:	bf00      	nop
 8000996:	e7fd      	b.n	8000994 <Error_Handler+0x8>

08000998 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000998:	b580      	push	{r7, lr}
 800099a:	b082      	sub	sp, #8
 800099c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800099e:	2300      	movs	r3, #0
 80009a0:	607b      	str	r3, [r7, #4]
 80009a2:	4b12      	ldr	r3, [pc, #72]	@ (80009ec <HAL_MspInit+0x54>)
 80009a4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80009a6:	4a11      	ldr	r2, [pc, #68]	@ (80009ec <HAL_MspInit+0x54>)
 80009a8:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80009ac:	6453      	str	r3, [r2, #68]	@ 0x44
 80009ae:	4b0f      	ldr	r3, [pc, #60]	@ (80009ec <HAL_MspInit+0x54>)
 80009b0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80009b2:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80009b6:	607b      	str	r3, [r7, #4]
 80009b8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80009ba:	2300      	movs	r3, #0
 80009bc:	603b      	str	r3, [r7, #0]
 80009be:	4b0b      	ldr	r3, [pc, #44]	@ (80009ec <HAL_MspInit+0x54>)
 80009c0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80009c2:	4a0a      	ldr	r2, [pc, #40]	@ (80009ec <HAL_MspInit+0x54>)
 80009c4:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80009c8:	6413      	str	r3, [r2, #64]	@ 0x40
 80009ca:	4b08      	ldr	r3, [pc, #32]	@ (80009ec <HAL_MspInit+0x54>)
 80009cc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80009ce:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80009d2:	603b      	str	r3, [r7, #0]
 80009d4:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 80009d6:	2200      	movs	r2, #0
 80009d8:	210f      	movs	r1, #15
 80009da:	f06f 0001 	mvn.w	r0, #1
 80009de:	f000 fa83 	bl	8000ee8 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80009e2:	bf00      	nop
 80009e4:	3708      	adds	r7, #8
 80009e6:	46bd      	mov	sp, r7
 80009e8:	bd80      	pop	{r7, pc}
 80009ea:	bf00      	nop
 80009ec:	40023800 	.word	0x40023800

080009f0 <HAL_TIM_Base_MspInit>:
  * This function configures the hardware resources used in this example
  * @param htim_base: TIM_Base handle pointer
  * @retval None
  */
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80009f0:	b580      	push	{r7, lr}
 80009f2:	b084      	sub	sp, #16
 80009f4:	af00      	add	r7, sp, #0
 80009f6:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 80009f8:	687b      	ldr	r3, [r7, #4]
 80009fa:	681b      	ldr	r3, [r3, #0]
 80009fc:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8000a00:	d115      	bne.n	8000a2e <HAL_TIM_Base_MspInit+0x3e>
  {
    /* USER CODE BEGIN TIM2_MspInit 0 */

    /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8000a02:	2300      	movs	r3, #0
 8000a04:	60fb      	str	r3, [r7, #12]
 8000a06:	4b0c      	ldr	r3, [pc, #48]	@ (8000a38 <HAL_TIM_Base_MspInit+0x48>)
 8000a08:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000a0a:	4a0b      	ldr	r2, [pc, #44]	@ (8000a38 <HAL_TIM_Base_MspInit+0x48>)
 8000a0c:	f043 0301 	orr.w	r3, r3, #1
 8000a10:	6413      	str	r3, [r2, #64]	@ 0x40
 8000a12:	4b09      	ldr	r3, [pc, #36]	@ (8000a38 <HAL_TIM_Base_MspInit+0x48>)
 8000a14:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000a16:	f003 0301 	and.w	r3, r3, #1
 8000a1a:	60fb      	str	r3, [r7, #12]
 8000a1c:	68fb      	ldr	r3, [r7, #12]
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 5, 0);
 8000a1e:	2200      	movs	r2, #0
 8000a20:	2105      	movs	r1, #5
 8000a22:	201c      	movs	r0, #28
 8000a24:	f000 fa60 	bl	8000ee8 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8000a28:	201c      	movs	r0, #28
 8000a2a:	f000 fa79 	bl	8000f20 <HAL_NVIC_EnableIRQ>

    /* USER CODE END TIM2_MspInit 1 */

  }

}
 8000a2e:	bf00      	nop
 8000a30:	3710      	adds	r7, #16
 8000a32:	46bd      	mov	sp, r7
 8000a34:	bd80      	pop	{r7, pc}
 8000a36:	bf00      	nop
 8000a38:	40023800 	.word	0x40023800

08000a3c <HAL_UART_MspInit>:
  * This function configures the hardware resources used in this example
  * @param huart: UART handle pointer
  * @retval None
  */
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000a3c:	b580      	push	{r7, lr}
 8000a3e:	b08a      	sub	sp, #40	@ 0x28
 8000a40:	af00      	add	r7, sp, #0
 8000a42:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000a44:	f107 0314 	add.w	r3, r7, #20
 8000a48:	2200      	movs	r2, #0
 8000a4a:	601a      	str	r2, [r3, #0]
 8000a4c:	605a      	str	r2, [r3, #4]
 8000a4e:	609a      	str	r2, [r3, #8]
 8000a50:	60da      	str	r2, [r3, #12]
 8000a52:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8000a54:	687b      	ldr	r3, [r7, #4]
 8000a56:	681b      	ldr	r3, [r3, #0]
 8000a58:	4a19      	ldr	r2, [pc, #100]	@ (8000ac0 <HAL_UART_MspInit+0x84>)
 8000a5a:	4293      	cmp	r3, r2
 8000a5c:	d12b      	bne.n	8000ab6 <HAL_UART_MspInit+0x7a>
  {
    /* USER CODE BEGIN USART2_MspInit 0 */

    /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8000a5e:	2300      	movs	r3, #0
 8000a60:	613b      	str	r3, [r7, #16]
 8000a62:	4b18      	ldr	r3, [pc, #96]	@ (8000ac4 <HAL_UART_MspInit+0x88>)
 8000a64:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000a66:	4a17      	ldr	r2, [pc, #92]	@ (8000ac4 <HAL_UART_MspInit+0x88>)
 8000a68:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000a6c:	6413      	str	r3, [r2, #64]	@ 0x40
 8000a6e:	4b15      	ldr	r3, [pc, #84]	@ (8000ac4 <HAL_UART_MspInit+0x88>)
 8000a70:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000a72:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000a76:	613b      	str	r3, [r7, #16]
 8000a78:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000a7a:	2300      	movs	r3, #0
 8000a7c:	60fb      	str	r3, [r7, #12]
 8000a7e:	4b11      	ldr	r3, [pc, #68]	@ (8000ac4 <HAL_UART_MspInit+0x88>)
 8000a80:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000a82:	4a10      	ldr	r2, [pc, #64]	@ (8000ac4 <HAL_UART_MspInit+0x88>)
 8000a84:	f043 0301 	orr.w	r3, r3, #1
 8000a88:	6313      	str	r3, [r2, #48]	@ 0x30
 8000a8a:	4b0e      	ldr	r3, [pc, #56]	@ (8000ac4 <HAL_UART_MspInit+0x88>)
 8000a8c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000a8e:	f003 0301 	and.w	r3, r3, #1
 8000a92:	60fb      	str	r3, [r7, #12]
 8000a94:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8000a96:	230c      	movs	r3, #12
 8000a98:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000a9a:	2302      	movs	r3, #2
 8000a9c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a9e:	2300      	movs	r3, #0
 8000aa0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000aa2:	2303      	movs	r3, #3
 8000aa4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000aa6:	2307      	movs	r3, #7
 8000aa8:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000aaa:	f107 0314 	add.w	r3, r7, #20
 8000aae:	4619      	mov	r1, r3
 8000ab0:	4805      	ldr	r0, [pc, #20]	@ (8000ac8 <HAL_UART_MspInit+0x8c>)
 8000ab2:	f000 fa43 	bl	8000f3c <HAL_GPIO_Init>

    /* USER CODE END USART2_MspInit 1 */

  }

}
 8000ab6:	bf00      	nop
 8000ab8:	3728      	adds	r7, #40	@ 0x28
 8000aba:	46bd      	mov	sp, r7
 8000abc:	bd80      	pop	{r7, pc}
 8000abe:	bf00      	nop
 8000ac0:	40004400 	.word	0x40004400
 8000ac4:	40023800 	.word	0x40023800
 8000ac8:	40020000 	.word	0x40020000

08000acc <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000acc:	b580      	push	{r7, lr}
 8000ace:	b08c      	sub	sp, #48	@ 0x30
 8000ad0:	af00      	add	r7, sp, #0
 8000ad2:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0U;
 8000ad4:	2300      	movs	r3, #0
 8000ad6:	62bb      	str	r3, [r7, #40]	@ 0x28

  uint32_t              uwPrescalerValue = 0U;
 8000ad8:	2300      	movs	r3, #0
 8000ada:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t              pFLatency;

  HAL_StatusTypeDef     status;

  /* Enable TIM1 clock */
  __HAL_RCC_TIM1_CLK_ENABLE();
 8000adc:	2300      	movs	r3, #0
 8000ade:	60bb      	str	r3, [r7, #8]
 8000ae0:	4b2e      	ldr	r3, [pc, #184]	@ (8000b9c <HAL_InitTick+0xd0>)
 8000ae2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000ae4:	4a2d      	ldr	r2, [pc, #180]	@ (8000b9c <HAL_InitTick+0xd0>)
 8000ae6:	f043 0301 	orr.w	r3, r3, #1
 8000aea:	6453      	str	r3, [r2, #68]	@ 0x44
 8000aec:	4b2b      	ldr	r3, [pc, #172]	@ (8000b9c <HAL_InitTick+0xd0>)
 8000aee:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000af0:	f003 0301 	and.w	r3, r3, #1
 8000af4:	60bb      	str	r3, [r7, #8]
 8000af6:	68bb      	ldr	r3, [r7, #8]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8000af8:	f107 020c 	add.w	r2, r7, #12
 8000afc:	f107 0310 	add.w	r3, r7, #16
 8000b00:	4611      	mov	r1, r2
 8000b02:	4618      	mov	r0, r3
 8000b04:	f000 fcfa 	bl	80014fc <HAL_RCC_GetClockConfig>

  /* Compute TIM1 clock */
      uwTimclock = HAL_RCC_GetPCLK2Freq();
 8000b08:	f000 fce4 	bl	80014d4 <HAL_RCC_GetPCLK2Freq>
 8000b0c:	62b8      	str	r0, [r7, #40]	@ 0x28

  /* Compute the prescaler value to have TIM1 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8000b0e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8000b10:	4a23      	ldr	r2, [pc, #140]	@ (8000ba0 <HAL_InitTick+0xd4>)
 8000b12:	fba2 2303 	umull	r2, r3, r2, r3
 8000b16:	0c9b      	lsrs	r3, r3, #18
 8000b18:	3b01      	subs	r3, #1
 8000b1a:	627b      	str	r3, [r7, #36]	@ 0x24

  /* Initialize TIM1 */
  htim1.Instance = TIM1;
 8000b1c:	4b21      	ldr	r3, [pc, #132]	@ (8000ba4 <HAL_InitTick+0xd8>)
 8000b1e:	4a22      	ldr	r2, [pc, #136]	@ (8000ba8 <HAL_InitTick+0xdc>)
 8000b20:	601a      	str	r2, [r3, #0]
   * Period = [(TIM1CLK/1000) - 1]. to have a (1/1000) s time base.
   * Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
   * ClockDivision = 0
   * Counter direction = Up
   */
  htim1.Init.Period = (1000000U / 1000U) - 1U;
 8000b22:	4b20      	ldr	r3, [pc, #128]	@ (8000ba4 <HAL_InitTick+0xd8>)
 8000b24:	f240 32e7 	movw	r2, #999	@ 0x3e7
 8000b28:	60da      	str	r2, [r3, #12]
  htim1.Init.Prescaler = uwPrescalerValue;
 8000b2a:	4a1e      	ldr	r2, [pc, #120]	@ (8000ba4 <HAL_InitTick+0xd8>)
 8000b2c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000b2e:	6053      	str	r3, [r2, #4]
  htim1.Init.ClockDivision = 0;
 8000b30:	4b1c      	ldr	r3, [pc, #112]	@ (8000ba4 <HAL_InitTick+0xd8>)
 8000b32:	2200      	movs	r2, #0
 8000b34:	611a      	str	r2, [r3, #16]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000b36:	4b1b      	ldr	r3, [pc, #108]	@ (8000ba4 <HAL_InitTick+0xd8>)
 8000b38:	2200      	movs	r2, #0
 8000b3a:	609a      	str	r2, [r3, #8]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000b3c:	4b19      	ldr	r3, [pc, #100]	@ (8000ba4 <HAL_InitTick+0xd8>)
 8000b3e:	2200      	movs	r2, #0
 8000b40:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim1);
 8000b42:	4818      	ldr	r0, [pc, #96]	@ (8000ba4 <HAL_InitTick+0xd8>)
 8000b44:	f001 f9da 	bl	8001efc <HAL_TIM_Base_Init>
 8000b48:	4603      	mov	r3, r0
 8000b4a:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
  if (status == HAL_OK)
 8000b4e:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8000b52:	2b00      	cmp	r3, #0
 8000b54:	d11b      	bne.n	8000b8e <HAL_InitTick+0xc2>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim1);
 8000b56:	4813      	ldr	r0, [pc, #76]	@ (8000ba4 <HAL_InitTick+0xd8>)
 8000b58:	f001 fa20 	bl	8001f9c <HAL_TIM_Base_Start_IT>
 8000b5c:	4603      	mov	r3, r0
 8000b5e:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
    if (status == HAL_OK)
 8000b62:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8000b66:	2b00      	cmp	r3, #0
 8000b68:	d111      	bne.n	8000b8e <HAL_InitTick+0xc2>
    {
    /* Enable the TIM1 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn);
 8000b6a:	2019      	movs	r0, #25
 8000b6c:	f000 f9d8 	bl	8000f20 <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000b70:	687b      	ldr	r3, [r7, #4]
 8000b72:	2b0f      	cmp	r3, #15
 8000b74:	d808      	bhi.n	8000b88 <HAL_InitTick+0xbc>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM1_UP_TIM10_IRQn, TickPriority, 0U);
 8000b76:	2200      	movs	r2, #0
 8000b78:	6879      	ldr	r1, [r7, #4]
 8000b7a:	2019      	movs	r0, #25
 8000b7c:	f000 f9b4 	bl	8000ee8 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000b80:	4a0a      	ldr	r2, [pc, #40]	@ (8000bac <HAL_InitTick+0xe0>)
 8000b82:	687b      	ldr	r3, [r7, #4]
 8000b84:	6013      	str	r3, [r2, #0]
 8000b86:	e002      	b.n	8000b8e <HAL_InitTick+0xc2>
      }
      else
      {
        status = HAL_ERROR;
 8000b88:	2301      	movs	r3, #1
 8000b8a:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
      }
    }
  }

 /* Return function status */
  return status;
 8000b8e:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
}
 8000b92:	4618      	mov	r0, r3
 8000b94:	3730      	adds	r7, #48	@ 0x30
 8000b96:	46bd      	mov	sp, r7
 8000b98:	bd80      	pop	{r7, pc}
 8000b9a:	bf00      	nop
 8000b9c:	40023800 	.word	0x40023800
 8000ba0:	431bde83 	.word	0x431bde83
 8000ba4:	20000870 	.word	0x20000870
 8000ba8:	40010000 	.word	0x40010000
 8000bac:	20000004 	.word	0x20000004

08000bb0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000bb0:	b480      	push	{r7}
 8000bb2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000bb4:	bf00      	nop
 8000bb6:	e7fd      	b.n	8000bb4 <NMI_Handler+0x4>

08000bb8 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000bb8:	b480      	push	{r7}
 8000bba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000bbc:	bf00      	nop
 8000bbe:	e7fd      	b.n	8000bbc <HardFault_Handler+0x4>

08000bc0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000bc0:	b480      	push	{r7}
 8000bc2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000bc4:	bf00      	nop
 8000bc6:	e7fd      	b.n	8000bc4 <MemManage_Handler+0x4>

08000bc8 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000bc8:	b480      	push	{r7}
 8000bca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000bcc:	bf00      	nop
 8000bce:	e7fd      	b.n	8000bcc <BusFault_Handler+0x4>

08000bd0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000bd0:	b480      	push	{r7}
 8000bd2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000bd4:	bf00      	nop
 8000bd6:	e7fd      	b.n	8000bd4 <UsageFault_Handler+0x4>

08000bd8 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000bd8:	b480      	push	{r7}
 8000bda:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000bdc:	bf00      	nop
 8000bde:	46bd      	mov	sp, r7
 8000be0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000be4:	4770      	bx	lr
	...

08000be8 <TIM1_UP_TIM10_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM10 global interrupt.
  */
void TIM1_UP_TIM10_IRQHandler(void)
{
 8000be8:	b580      	push	{r7, lr}
 8000bea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8000bec:	4802      	ldr	r0, [pc, #8]	@ (8000bf8 <TIM1_UP_TIM10_IRQHandler+0x10>)
 8000bee:	f001 fa45 	bl	800207c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 1 */
}
 8000bf2:	bf00      	nop
 8000bf4:	bd80      	pop	{r7, pc}
 8000bf6:	bf00      	nop
 8000bf8:	20000870 	.word	0x20000870

08000bfc <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8000bfc:	b580      	push	{r7, lr}
 8000bfe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8000c00:	4802      	ldr	r0, [pc, #8]	@ (8000c0c <TIM2_IRQHandler+0x10>)
 8000c02:	f001 fa3b 	bl	800207c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8000c06:	bf00      	nop
 8000c08:	bd80      	pop	{r7, pc}
 8000c0a:	bf00      	nop
 8000c0c:	200007dc 	.word	0x200007dc

08000c10 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000c10:	b580      	push	{r7, lr}
 8000c12:	b086      	sub	sp, #24
 8000c14:	af00      	add	r7, sp, #0
 8000c16:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000c18:	4a14      	ldr	r2, [pc, #80]	@ (8000c6c <_sbrk+0x5c>)
 8000c1a:	4b15      	ldr	r3, [pc, #84]	@ (8000c70 <_sbrk+0x60>)
 8000c1c:	1ad3      	subs	r3, r2, r3
 8000c1e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000c20:	697b      	ldr	r3, [r7, #20]
 8000c22:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000c24:	4b13      	ldr	r3, [pc, #76]	@ (8000c74 <_sbrk+0x64>)
 8000c26:	681b      	ldr	r3, [r3, #0]
 8000c28:	2b00      	cmp	r3, #0
 8000c2a:	d102      	bne.n	8000c32 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000c2c:	4b11      	ldr	r3, [pc, #68]	@ (8000c74 <_sbrk+0x64>)
 8000c2e:	4a12      	ldr	r2, [pc, #72]	@ (8000c78 <_sbrk+0x68>)
 8000c30:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000c32:	4b10      	ldr	r3, [pc, #64]	@ (8000c74 <_sbrk+0x64>)
 8000c34:	681a      	ldr	r2, [r3, #0]
 8000c36:	687b      	ldr	r3, [r7, #4]
 8000c38:	4413      	add	r3, r2
 8000c3a:	693a      	ldr	r2, [r7, #16]
 8000c3c:	429a      	cmp	r2, r3
 8000c3e:	d207      	bcs.n	8000c50 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000c40:	f006 f842 	bl	8006cc8 <__errno>
 8000c44:	4603      	mov	r3, r0
 8000c46:	220c      	movs	r2, #12
 8000c48:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000c4a:	f04f 33ff 	mov.w	r3, #4294967295
 8000c4e:	e009      	b.n	8000c64 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000c50:	4b08      	ldr	r3, [pc, #32]	@ (8000c74 <_sbrk+0x64>)
 8000c52:	681b      	ldr	r3, [r3, #0]
 8000c54:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000c56:	4b07      	ldr	r3, [pc, #28]	@ (8000c74 <_sbrk+0x64>)
 8000c58:	681a      	ldr	r2, [r3, #0]
 8000c5a:	687b      	ldr	r3, [r7, #4]
 8000c5c:	4413      	add	r3, r2
 8000c5e:	4a05      	ldr	r2, [pc, #20]	@ (8000c74 <_sbrk+0x64>)
 8000c60:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000c62:	68fb      	ldr	r3, [r7, #12]
}
 8000c64:	4618      	mov	r0, r3
 8000c66:	3718      	adds	r7, #24
 8000c68:	46bd      	mov	sp, r7
 8000c6a:	bd80      	pop	{r7, pc}
 8000c6c:	20020000 	.word	0x20020000
 8000c70:	00000400 	.word	0x00000400
 8000c74:	200008b8 	.word	0x200008b8
 8000c78:	200049b0 	.word	0x200049b0

08000c7c <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000c7c:	b480      	push	{r7}
 8000c7e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000c80:	4b06      	ldr	r3, [pc, #24]	@ (8000c9c <SystemInit+0x20>)
 8000c82:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8000c86:	4a05      	ldr	r2, [pc, #20]	@ (8000c9c <SystemInit+0x20>)
 8000c88:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8000c8c:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000c90:	bf00      	nop
 8000c92:	46bd      	mov	sp, r7
 8000c94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c98:	4770      	bx	lr
 8000c9a:	bf00      	nop
 8000c9c:	e000ed00 	.word	0xe000ed00

08000ca0 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8000ca0:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8000cd8 <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit  
 8000ca4:	f7ff ffea 	bl	8000c7c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000ca8:	480c      	ldr	r0, [pc, #48]	@ (8000cdc <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8000caa:	490d      	ldr	r1, [pc, #52]	@ (8000ce0 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8000cac:	4a0d      	ldr	r2, [pc, #52]	@ (8000ce4 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8000cae:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000cb0:	e002      	b.n	8000cb8 <LoopCopyDataInit>

08000cb2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000cb2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000cb4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000cb6:	3304      	adds	r3, #4

08000cb8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000cb8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000cba:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000cbc:	d3f9      	bcc.n	8000cb2 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000cbe:	4a0a      	ldr	r2, [pc, #40]	@ (8000ce8 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8000cc0:	4c0a      	ldr	r4, [pc, #40]	@ (8000cec <LoopFillZerobss+0x22>)
  movs r3, #0
 8000cc2:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000cc4:	e001      	b.n	8000cca <LoopFillZerobss>

08000cc6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000cc6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000cc8:	3204      	adds	r2, #4

08000cca <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000cca:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000ccc:	d3fb      	bcc.n	8000cc6 <FillZerobss>
  
/* Call static constructors */
    bl __libc_init_array
 8000cce:	f006 f801 	bl	8006cd4 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000cd2:	f7ff fcbf 	bl	8000654 <main>
  bx  lr    
 8000cd6:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8000cd8:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000cdc:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000ce0:	20000080 	.word	0x20000080
  ldr r2, =_sidata
 8000ce4:	08007c38 	.word	0x08007c38
  ldr r2, =_sbss
 8000ce8:	20000080 	.word	0x20000080
  ldr r4, =_ebss
 8000cec:	200049ac 	.word	0x200049ac

08000cf0 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000cf0:	e7fe      	b.n	8000cf0 <ADC_IRQHandler>
	...

08000cf4 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000cf4:	b580      	push	{r7, lr}
 8000cf6:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000cf8:	4b0e      	ldr	r3, [pc, #56]	@ (8000d34 <HAL_Init+0x40>)
 8000cfa:	681b      	ldr	r3, [r3, #0]
 8000cfc:	4a0d      	ldr	r2, [pc, #52]	@ (8000d34 <HAL_Init+0x40>)
 8000cfe:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8000d02:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000d04:	4b0b      	ldr	r3, [pc, #44]	@ (8000d34 <HAL_Init+0x40>)
 8000d06:	681b      	ldr	r3, [r3, #0]
 8000d08:	4a0a      	ldr	r2, [pc, #40]	@ (8000d34 <HAL_Init+0x40>)
 8000d0a:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8000d0e:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000d10:	4b08      	ldr	r3, [pc, #32]	@ (8000d34 <HAL_Init+0x40>)
 8000d12:	681b      	ldr	r3, [r3, #0]
 8000d14:	4a07      	ldr	r2, [pc, #28]	@ (8000d34 <HAL_Init+0x40>)
 8000d16:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8000d1a:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000d1c:	2003      	movs	r0, #3
 8000d1e:	f000 f8d8 	bl	8000ed2 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000d22:	200f      	movs	r0, #15
 8000d24:	f7ff fed2 	bl	8000acc <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000d28:	f7ff fe36 	bl	8000998 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000d2c:	2300      	movs	r3, #0
}
 8000d2e:	4618      	mov	r0, r3
 8000d30:	bd80      	pop	{r7, pc}
 8000d32:	bf00      	nop
 8000d34:	40023c00 	.word	0x40023c00

08000d38 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000d38:	b480      	push	{r7}
 8000d3a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000d3c:	4b06      	ldr	r3, [pc, #24]	@ (8000d58 <HAL_IncTick+0x20>)
 8000d3e:	781b      	ldrb	r3, [r3, #0]
 8000d40:	461a      	mov	r2, r3
 8000d42:	4b06      	ldr	r3, [pc, #24]	@ (8000d5c <HAL_IncTick+0x24>)
 8000d44:	681b      	ldr	r3, [r3, #0]
 8000d46:	4413      	add	r3, r2
 8000d48:	4a04      	ldr	r2, [pc, #16]	@ (8000d5c <HAL_IncTick+0x24>)
 8000d4a:	6013      	str	r3, [r2, #0]
}
 8000d4c:	bf00      	nop
 8000d4e:	46bd      	mov	sp, r7
 8000d50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d54:	4770      	bx	lr
 8000d56:	bf00      	nop
 8000d58:	20000008 	.word	0x20000008
 8000d5c:	200008bc 	.word	0x200008bc

08000d60 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000d60:	b480      	push	{r7}
 8000d62:	af00      	add	r7, sp, #0
  return uwTick;
 8000d64:	4b03      	ldr	r3, [pc, #12]	@ (8000d74 <HAL_GetTick+0x14>)
 8000d66:	681b      	ldr	r3, [r3, #0]
}
 8000d68:	4618      	mov	r0, r3
 8000d6a:	46bd      	mov	sp, r7
 8000d6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d70:	4770      	bx	lr
 8000d72:	bf00      	nop
 8000d74:	200008bc 	.word	0x200008bc

08000d78 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000d78:	b480      	push	{r7}
 8000d7a:	b085      	sub	sp, #20
 8000d7c:	af00      	add	r7, sp, #0
 8000d7e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000d80:	687b      	ldr	r3, [r7, #4]
 8000d82:	f003 0307 	and.w	r3, r3, #7
 8000d86:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000d88:	4b0c      	ldr	r3, [pc, #48]	@ (8000dbc <__NVIC_SetPriorityGrouping+0x44>)
 8000d8a:	68db      	ldr	r3, [r3, #12]
 8000d8c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000d8e:	68ba      	ldr	r2, [r7, #8]
 8000d90:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8000d94:	4013      	ands	r3, r2
 8000d96:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000d98:	68fb      	ldr	r3, [r7, #12]
 8000d9a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000d9c:	68bb      	ldr	r3, [r7, #8]
 8000d9e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000da0:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8000da4:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000da8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000daa:	4a04      	ldr	r2, [pc, #16]	@ (8000dbc <__NVIC_SetPriorityGrouping+0x44>)
 8000dac:	68bb      	ldr	r3, [r7, #8]
 8000dae:	60d3      	str	r3, [r2, #12]
}
 8000db0:	bf00      	nop
 8000db2:	3714      	adds	r7, #20
 8000db4:	46bd      	mov	sp, r7
 8000db6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dba:	4770      	bx	lr
 8000dbc:	e000ed00 	.word	0xe000ed00

08000dc0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000dc0:	b480      	push	{r7}
 8000dc2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000dc4:	4b04      	ldr	r3, [pc, #16]	@ (8000dd8 <__NVIC_GetPriorityGrouping+0x18>)
 8000dc6:	68db      	ldr	r3, [r3, #12]
 8000dc8:	0a1b      	lsrs	r3, r3, #8
 8000dca:	f003 0307 	and.w	r3, r3, #7
}
 8000dce:	4618      	mov	r0, r3
 8000dd0:	46bd      	mov	sp, r7
 8000dd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dd6:	4770      	bx	lr
 8000dd8:	e000ed00 	.word	0xe000ed00

08000ddc <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000ddc:	b480      	push	{r7}
 8000dde:	b083      	sub	sp, #12
 8000de0:	af00      	add	r7, sp, #0
 8000de2:	4603      	mov	r3, r0
 8000de4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000de6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000dea:	2b00      	cmp	r3, #0
 8000dec:	db0b      	blt.n	8000e06 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000dee:	79fb      	ldrb	r3, [r7, #7]
 8000df0:	f003 021f 	and.w	r2, r3, #31
 8000df4:	4907      	ldr	r1, [pc, #28]	@ (8000e14 <__NVIC_EnableIRQ+0x38>)
 8000df6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000dfa:	095b      	lsrs	r3, r3, #5
 8000dfc:	2001      	movs	r0, #1
 8000dfe:	fa00 f202 	lsl.w	r2, r0, r2
 8000e02:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8000e06:	bf00      	nop
 8000e08:	370c      	adds	r7, #12
 8000e0a:	46bd      	mov	sp, r7
 8000e0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e10:	4770      	bx	lr
 8000e12:	bf00      	nop
 8000e14:	e000e100 	.word	0xe000e100

08000e18 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000e18:	b480      	push	{r7}
 8000e1a:	b083      	sub	sp, #12
 8000e1c:	af00      	add	r7, sp, #0
 8000e1e:	4603      	mov	r3, r0
 8000e20:	6039      	str	r1, [r7, #0]
 8000e22:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000e24:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000e28:	2b00      	cmp	r3, #0
 8000e2a:	db0a      	blt.n	8000e42 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000e2c:	683b      	ldr	r3, [r7, #0]
 8000e2e:	b2da      	uxtb	r2, r3
 8000e30:	490c      	ldr	r1, [pc, #48]	@ (8000e64 <__NVIC_SetPriority+0x4c>)
 8000e32:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000e36:	0112      	lsls	r2, r2, #4
 8000e38:	b2d2      	uxtb	r2, r2
 8000e3a:	440b      	add	r3, r1
 8000e3c:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000e40:	e00a      	b.n	8000e58 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000e42:	683b      	ldr	r3, [r7, #0]
 8000e44:	b2da      	uxtb	r2, r3
 8000e46:	4908      	ldr	r1, [pc, #32]	@ (8000e68 <__NVIC_SetPriority+0x50>)
 8000e48:	79fb      	ldrb	r3, [r7, #7]
 8000e4a:	f003 030f 	and.w	r3, r3, #15
 8000e4e:	3b04      	subs	r3, #4
 8000e50:	0112      	lsls	r2, r2, #4
 8000e52:	b2d2      	uxtb	r2, r2
 8000e54:	440b      	add	r3, r1
 8000e56:	761a      	strb	r2, [r3, #24]
}
 8000e58:	bf00      	nop
 8000e5a:	370c      	adds	r7, #12
 8000e5c:	46bd      	mov	sp, r7
 8000e5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e62:	4770      	bx	lr
 8000e64:	e000e100 	.word	0xe000e100
 8000e68:	e000ed00 	.word	0xe000ed00

08000e6c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000e6c:	b480      	push	{r7}
 8000e6e:	b089      	sub	sp, #36	@ 0x24
 8000e70:	af00      	add	r7, sp, #0
 8000e72:	60f8      	str	r0, [r7, #12]
 8000e74:	60b9      	str	r1, [r7, #8]
 8000e76:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000e78:	68fb      	ldr	r3, [r7, #12]
 8000e7a:	f003 0307 	and.w	r3, r3, #7
 8000e7e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000e80:	69fb      	ldr	r3, [r7, #28]
 8000e82:	f1c3 0307 	rsb	r3, r3, #7
 8000e86:	2b04      	cmp	r3, #4
 8000e88:	bf28      	it	cs
 8000e8a:	2304      	movcs	r3, #4
 8000e8c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000e8e:	69fb      	ldr	r3, [r7, #28]
 8000e90:	3304      	adds	r3, #4
 8000e92:	2b06      	cmp	r3, #6
 8000e94:	d902      	bls.n	8000e9c <NVIC_EncodePriority+0x30>
 8000e96:	69fb      	ldr	r3, [r7, #28]
 8000e98:	3b03      	subs	r3, #3
 8000e9a:	e000      	b.n	8000e9e <NVIC_EncodePriority+0x32>
 8000e9c:	2300      	movs	r3, #0
 8000e9e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000ea0:	f04f 32ff 	mov.w	r2, #4294967295
 8000ea4:	69bb      	ldr	r3, [r7, #24]
 8000ea6:	fa02 f303 	lsl.w	r3, r2, r3
 8000eaa:	43da      	mvns	r2, r3
 8000eac:	68bb      	ldr	r3, [r7, #8]
 8000eae:	401a      	ands	r2, r3
 8000eb0:	697b      	ldr	r3, [r7, #20]
 8000eb2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000eb4:	f04f 31ff 	mov.w	r1, #4294967295
 8000eb8:	697b      	ldr	r3, [r7, #20]
 8000eba:	fa01 f303 	lsl.w	r3, r1, r3
 8000ebe:	43d9      	mvns	r1, r3
 8000ec0:	687b      	ldr	r3, [r7, #4]
 8000ec2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000ec4:	4313      	orrs	r3, r2
         );
}
 8000ec6:	4618      	mov	r0, r3
 8000ec8:	3724      	adds	r7, #36	@ 0x24
 8000eca:	46bd      	mov	sp, r7
 8000ecc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ed0:	4770      	bx	lr

08000ed2 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000ed2:	b580      	push	{r7, lr}
 8000ed4:	b082      	sub	sp, #8
 8000ed6:	af00      	add	r7, sp, #0
 8000ed8:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000eda:	6878      	ldr	r0, [r7, #4]
 8000edc:	f7ff ff4c 	bl	8000d78 <__NVIC_SetPriorityGrouping>
}
 8000ee0:	bf00      	nop
 8000ee2:	3708      	adds	r7, #8
 8000ee4:	46bd      	mov	sp, r7
 8000ee6:	bd80      	pop	{r7, pc}

08000ee8 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000ee8:	b580      	push	{r7, lr}
 8000eea:	b086      	sub	sp, #24
 8000eec:	af00      	add	r7, sp, #0
 8000eee:	4603      	mov	r3, r0
 8000ef0:	60b9      	str	r1, [r7, #8]
 8000ef2:	607a      	str	r2, [r7, #4]
 8000ef4:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000ef6:	2300      	movs	r3, #0
 8000ef8:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000efa:	f7ff ff61 	bl	8000dc0 <__NVIC_GetPriorityGrouping>
 8000efe:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000f00:	687a      	ldr	r2, [r7, #4]
 8000f02:	68b9      	ldr	r1, [r7, #8]
 8000f04:	6978      	ldr	r0, [r7, #20]
 8000f06:	f7ff ffb1 	bl	8000e6c <NVIC_EncodePriority>
 8000f0a:	4602      	mov	r2, r0
 8000f0c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000f10:	4611      	mov	r1, r2
 8000f12:	4618      	mov	r0, r3
 8000f14:	f7ff ff80 	bl	8000e18 <__NVIC_SetPriority>
}
 8000f18:	bf00      	nop
 8000f1a:	3718      	adds	r7, #24
 8000f1c:	46bd      	mov	sp, r7
 8000f1e:	bd80      	pop	{r7, pc}

08000f20 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000f20:	b580      	push	{r7, lr}
 8000f22:	b082      	sub	sp, #8
 8000f24:	af00      	add	r7, sp, #0
 8000f26:	4603      	mov	r3, r0
 8000f28:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000f2a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000f2e:	4618      	mov	r0, r3
 8000f30:	f7ff ff54 	bl	8000ddc <__NVIC_EnableIRQ>
}
 8000f34:	bf00      	nop
 8000f36:	3708      	adds	r7, #8
 8000f38:	46bd      	mov	sp, r7
 8000f3a:	bd80      	pop	{r7, pc}

08000f3c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000f3c:	b480      	push	{r7}
 8000f3e:	b089      	sub	sp, #36	@ 0x24
 8000f40:	af00      	add	r7, sp, #0
 8000f42:	6078      	str	r0, [r7, #4]
 8000f44:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8000f46:	2300      	movs	r3, #0
 8000f48:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8000f4a:	2300      	movs	r3, #0
 8000f4c:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8000f4e:	2300      	movs	r3, #0
 8000f50:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8000f52:	2300      	movs	r3, #0
 8000f54:	61fb      	str	r3, [r7, #28]
 8000f56:	e165      	b.n	8001224 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8000f58:	2201      	movs	r2, #1
 8000f5a:	69fb      	ldr	r3, [r7, #28]
 8000f5c:	fa02 f303 	lsl.w	r3, r2, r3
 8000f60:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000f62:	683b      	ldr	r3, [r7, #0]
 8000f64:	681b      	ldr	r3, [r3, #0]
 8000f66:	697a      	ldr	r2, [r7, #20]
 8000f68:	4013      	ands	r3, r2
 8000f6a:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8000f6c:	693a      	ldr	r2, [r7, #16]
 8000f6e:	697b      	ldr	r3, [r7, #20]
 8000f70:	429a      	cmp	r2, r3
 8000f72:	f040 8154 	bne.w	800121e <HAL_GPIO_Init+0x2e2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8000f76:	683b      	ldr	r3, [r7, #0]
 8000f78:	685b      	ldr	r3, [r3, #4]
 8000f7a:	f003 0303 	and.w	r3, r3, #3
 8000f7e:	2b01      	cmp	r3, #1
 8000f80:	d005      	beq.n	8000f8e <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000f82:	683b      	ldr	r3, [r7, #0]
 8000f84:	685b      	ldr	r3, [r3, #4]
 8000f86:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8000f8a:	2b02      	cmp	r3, #2
 8000f8c:	d130      	bne.n	8000ff0 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8000f8e:	687b      	ldr	r3, [r7, #4]
 8000f90:	689b      	ldr	r3, [r3, #8]
 8000f92:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8000f94:	69fb      	ldr	r3, [r7, #28]
 8000f96:	005b      	lsls	r3, r3, #1
 8000f98:	2203      	movs	r2, #3
 8000f9a:	fa02 f303 	lsl.w	r3, r2, r3
 8000f9e:	43db      	mvns	r3, r3
 8000fa0:	69ba      	ldr	r2, [r7, #24]
 8000fa2:	4013      	ands	r3, r2
 8000fa4:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8000fa6:	683b      	ldr	r3, [r7, #0]
 8000fa8:	68da      	ldr	r2, [r3, #12]
 8000faa:	69fb      	ldr	r3, [r7, #28]
 8000fac:	005b      	lsls	r3, r3, #1
 8000fae:	fa02 f303 	lsl.w	r3, r2, r3
 8000fb2:	69ba      	ldr	r2, [r7, #24]
 8000fb4:	4313      	orrs	r3, r2
 8000fb6:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8000fb8:	687b      	ldr	r3, [r7, #4]
 8000fba:	69ba      	ldr	r2, [r7, #24]
 8000fbc:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000fbe:	687b      	ldr	r3, [r7, #4]
 8000fc0:	685b      	ldr	r3, [r3, #4]
 8000fc2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8000fc4:	2201      	movs	r2, #1
 8000fc6:	69fb      	ldr	r3, [r7, #28]
 8000fc8:	fa02 f303 	lsl.w	r3, r2, r3
 8000fcc:	43db      	mvns	r3, r3
 8000fce:	69ba      	ldr	r2, [r7, #24]
 8000fd0:	4013      	ands	r3, r2
 8000fd2:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8000fd4:	683b      	ldr	r3, [r7, #0]
 8000fd6:	685b      	ldr	r3, [r3, #4]
 8000fd8:	091b      	lsrs	r3, r3, #4
 8000fda:	f003 0201 	and.w	r2, r3, #1
 8000fde:	69fb      	ldr	r3, [r7, #28]
 8000fe0:	fa02 f303 	lsl.w	r3, r2, r3
 8000fe4:	69ba      	ldr	r2, [r7, #24]
 8000fe6:	4313      	orrs	r3, r2
 8000fe8:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8000fea:	687b      	ldr	r3, [r7, #4]
 8000fec:	69ba      	ldr	r2, [r7, #24]
 8000fee:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8000ff0:	683b      	ldr	r3, [r7, #0]
 8000ff2:	685b      	ldr	r3, [r3, #4]
 8000ff4:	f003 0303 	and.w	r3, r3, #3
 8000ff8:	2b03      	cmp	r3, #3
 8000ffa:	d017      	beq.n	800102c <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8000ffc:	687b      	ldr	r3, [r7, #4]
 8000ffe:	68db      	ldr	r3, [r3, #12]
 8001000:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8001002:	69fb      	ldr	r3, [r7, #28]
 8001004:	005b      	lsls	r3, r3, #1
 8001006:	2203      	movs	r2, #3
 8001008:	fa02 f303 	lsl.w	r3, r2, r3
 800100c:	43db      	mvns	r3, r3
 800100e:	69ba      	ldr	r2, [r7, #24]
 8001010:	4013      	ands	r3, r2
 8001012:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001014:	683b      	ldr	r3, [r7, #0]
 8001016:	689a      	ldr	r2, [r3, #8]
 8001018:	69fb      	ldr	r3, [r7, #28]
 800101a:	005b      	lsls	r3, r3, #1
 800101c:	fa02 f303 	lsl.w	r3, r2, r3
 8001020:	69ba      	ldr	r2, [r7, #24]
 8001022:	4313      	orrs	r3, r2
 8001024:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8001026:	687b      	ldr	r3, [r7, #4]
 8001028:	69ba      	ldr	r2, [r7, #24]
 800102a:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800102c:	683b      	ldr	r3, [r7, #0]
 800102e:	685b      	ldr	r3, [r3, #4]
 8001030:	f003 0303 	and.w	r3, r3, #3
 8001034:	2b02      	cmp	r3, #2
 8001036:	d123      	bne.n	8001080 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001038:	69fb      	ldr	r3, [r7, #28]
 800103a:	08da      	lsrs	r2, r3, #3
 800103c:	687b      	ldr	r3, [r7, #4]
 800103e:	3208      	adds	r2, #8
 8001040:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001044:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8001046:	69fb      	ldr	r3, [r7, #28]
 8001048:	f003 0307 	and.w	r3, r3, #7
 800104c:	009b      	lsls	r3, r3, #2
 800104e:	220f      	movs	r2, #15
 8001050:	fa02 f303 	lsl.w	r3, r2, r3
 8001054:	43db      	mvns	r3, r3
 8001056:	69ba      	ldr	r2, [r7, #24]
 8001058:	4013      	ands	r3, r2
 800105a:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 800105c:	683b      	ldr	r3, [r7, #0]
 800105e:	691a      	ldr	r2, [r3, #16]
 8001060:	69fb      	ldr	r3, [r7, #28]
 8001062:	f003 0307 	and.w	r3, r3, #7
 8001066:	009b      	lsls	r3, r3, #2
 8001068:	fa02 f303 	lsl.w	r3, r2, r3
 800106c:	69ba      	ldr	r2, [r7, #24]
 800106e:	4313      	orrs	r3, r2
 8001070:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8001072:	69fb      	ldr	r3, [r7, #28]
 8001074:	08da      	lsrs	r2, r3, #3
 8001076:	687b      	ldr	r3, [r7, #4]
 8001078:	3208      	adds	r2, #8
 800107a:	69b9      	ldr	r1, [r7, #24]
 800107c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001080:	687b      	ldr	r3, [r7, #4]
 8001082:	681b      	ldr	r3, [r3, #0]
 8001084:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8001086:	69fb      	ldr	r3, [r7, #28]
 8001088:	005b      	lsls	r3, r3, #1
 800108a:	2203      	movs	r2, #3
 800108c:	fa02 f303 	lsl.w	r3, r2, r3
 8001090:	43db      	mvns	r3, r3
 8001092:	69ba      	ldr	r2, [r7, #24]
 8001094:	4013      	ands	r3, r2
 8001096:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001098:	683b      	ldr	r3, [r7, #0]
 800109a:	685b      	ldr	r3, [r3, #4]
 800109c:	f003 0203 	and.w	r2, r3, #3
 80010a0:	69fb      	ldr	r3, [r7, #28]
 80010a2:	005b      	lsls	r3, r3, #1
 80010a4:	fa02 f303 	lsl.w	r3, r2, r3
 80010a8:	69ba      	ldr	r2, [r7, #24]
 80010aa:	4313      	orrs	r3, r2
 80010ac:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80010ae:	687b      	ldr	r3, [r7, #4]
 80010b0:	69ba      	ldr	r2, [r7, #24]
 80010b2:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80010b4:	683b      	ldr	r3, [r7, #0]
 80010b6:	685b      	ldr	r3, [r3, #4]
 80010b8:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 80010bc:	2b00      	cmp	r3, #0
 80010be:	f000 80ae 	beq.w	800121e <HAL_GPIO_Init+0x2e2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80010c2:	2300      	movs	r3, #0
 80010c4:	60fb      	str	r3, [r7, #12]
 80010c6:	4b5d      	ldr	r3, [pc, #372]	@ (800123c <HAL_GPIO_Init+0x300>)
 80010c8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80010ca:	4a5c      	ldr	r2, [pc, #368]	@ (800123c <HAL_GPIO_Init+0x300>)
 80010cc:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80010d0:	6453      	str	r3, [r2, #68]	@ 0x44
 80010d2:	4b5a      	ldr	r3, [pc, #360]	@ (800123c <HAL_GPIO_Init+0x300>)
 80010d4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80010d6:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80010da:	60fb      	str	r3, [r7, #12]
 80010dc:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80010de:	4a58      	ldr	r2, [pc, #352]	@ (8001240 <HAL_GPIO_Init+0x304>)
 80010e0:	69fb      	ldr	r3, [r7, #28]
 80010e2:	089b      	lsrs	r3, r3, #2
 80010e4:	3302      	adds	r3, #2
 80010e6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80010ea:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80010ec:	69fb      	ldr	r3, [r7, #28]
 80010ee:	f003 0303 	and.w	r3, r3, #3
 80010f2:	009b      	lsls	r3, r3, #2
 80010f4:	220f      	movs	r2, #15
 80010f6:	fa02 f303 	lsl.w	r3, r2, r3
 80010fa:	43db      	mvns	r3, r3
 80010fc:	69ba      	ldr	r2, [r7, #24]
 80010fe:	4013      	ands	r3, r2
 8001100:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001102:	687b      	ldr	r3, [r7, #4]
 8001104:	4a4f      	ldr	r2, [pc, #316]	@ (8001244 <HAL_GPIO_Init+0x308>)
 8001106:	4293      	cmp	r3, r2
 8001108:	d025      	beq.n	8001156 <HAL_GPIO_Init+0x21a>
 800110a:	687b      	ldr	r3, [r7, #4]
 800110c:	4a4e      	ldr	r2, [pc, #312]	@ (8001248 <HAL_GPIO_Init+0x30c>)
 800110e:	4293      	cmp	r3, r2
 8001110:	d01f      	beq.n	8001152 <HAL_GPIO_Init+0x216>
 8001112:	687b      	ldr	r3, [r7, #4]
 8001114:	4a4d      	ldr	r2, [pc, #308]	@ (800124c <HAL_GPIO_Init+0x310>)
 8001116:	4293      	cmp	r3, r2
 8001118:	d019      	beq.n	800114e <HAL_GPIO_Init+0x212>
 800111a:	687b      	ldr	r3, [r7, #4]
 800111c:	4a4c      	ldr	r2, [pc, #304]	@ (8001250 <HAL_GPIO_Init+0x314>)
 800111e:	4293      	cmp	r3, r2
 8001120:	d013      	beq.n	800114a <HAL_GPIO_Init+0x20e>
 8001122:	687b      	ldr	r3, [r7, #4]
 8001124:	4a4b      	ldr	r2, [pc, #300]	@ (8001254 <HAL_GPIO_Init+0x318>)
 8001126:	4293      	cmp	r3, r2
 8001128:	d00d      	beq.n	8001146 <HAL_GPIO_Init+0x20a>
 800112a:	687b      	ldr	r3, [r7, #4]
 800112c:	4a4a      	ldr	r2, [pc, #296]	@ (8001258 <HAL_GPIO_Init+0x31c>)
 800112e:	4293      	cmp	r3, r2
 8001130:	d007      	beq.n	8001142 <HAL_GPIO_Init+0x206>
 8001132:	687b      	ldr	r3, [r7, #4]
 8001134:	4a49      	ldr	r2, [pc, #292]	@ (800125c <HAL_GPIO_Init+0x320>)
 8001136:	4293      	cmp	r3, r2
 8001138:	d101      	bne.n	800113e <HAL_GPIO_Init+0x202>
 800113a:	2306      	movs	r3, #6
 800113c:	e00c      	b.n	8001158 <HAL_GPIO_Init+0x21c>
 800113e:	2307      	movs	r3, #7
 8001140:	e00a      	b.n	8001158 <HAL_GPIO_Init+0x21c>
 8001142:	2305      	movs	r3, #5
 8001144:	e008      	b.n	8001158 <HAL_GPIO_Init+0x21c>
 8001146:	2304      	movs	r3, #4
 8001148:	e006      	b.n	8001158 <HAL_GPIO_Init+0x21c>
 800114a:	2303      	movs	r3, #3
 800114c:	e004      	b.n	8001158 <HAL_GPIO_Init+0x21c>
 800114e:	2302      	movs	r3, #2
 8001150:	e002      	b.n	8001158 <HAL_GPIO_Init+0x21c>
 8001152:	2301      	movs	r3, #1
 8001154:	e000      	b.n	8001158 <HAL_GPIO_Init+0x21c>
 8001156:	2300      	movs	r3, #0
 8001158:	69fa      	ldr	r2, [r7, #28]
 800115a:	f002 0203 	and.w	r2, r2, #3
 800115e:	0092      	lsls	r2, r2, #2
 8001160:	4093      	lsls	r3, r2
 8001162:	69ba      	ldr	r2, [r7, #24]
 8001164:	4313      	orrs	r3, r2
 8001166:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001168:	4935      	ldr	r1, [pc, #212]	@ (8001240 <HAL_GPIO_Init+0x304>)
 800116a:	69fb      	ldr	r3, [r7, #28]
 800116c:	089b      	lsrs	r3, r3, #2
 800116e:	3302      	adds	r3, #2
 8001170:	69ba      	ldr	r2, [r7, #24]
 8001172:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001176:	4b3a      	ldr	r3, [pc, #232]	@ (8001260 <HAL_GPIO_Init+0x324>)
 8001178:	689b      	ldr	r3, [r3, #8]
 800117a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800117c:	693b      	ldr	r3, [r7, #16]
 800117e:	43db      	mvns	r3, r3
 8001180:	69ba      	ldr	r2, [r7, #24]
 8001182:	4013      	ands	r3, r2
 8001184:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8001186:	683b      	ldr	r3, [r7, #0]
 8001188:	685b      	ldr	r3, [r3, #4]
 800118a:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800118e:	2b00      	cmp	r3, #0
 8001190:	d003      	beq.n	800119a <HAL_GPIO_Init+0x25e>
        {
          temp |= iocurrent;
 8001192:	69ba      	ldr	r2, [r7, #24]
 8001194:	693b      	ldr	r3, [r7, #16]
 8001196:	4313      	orrs	r3, r2
 8001198:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800119a:	4a31      	ldr	r2, [pc, #196]	@ (8001260 <HAL_GPIO_Init+0x324>)
 800119c:	69bb      	ldr	r3, [r7, #24]
 800119e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80011a0:	4b2f      	ldr	r3, [pc, #188]	@ (8001260 <HAL_GPIO_Init+0x324>)
 80011a2:	68db      	ldr	r3, [r3, #12]
 80011a4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80011a6:	693b      	ldr	r3, [r7, #16]
 80011a8:	43db      	mvns	r3, r3
 80011aa:	69ba      	ldr	r2, [r7, #24]
 80011ac:	4013      	ands	r3, r2
 80011ae:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80011b0:	683b      	ldr	r3, [r7, #0]
 80011b2:	685b      	ldr	r3, [r3, #4]
 80011b4:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80011b8:	2b00      	cmp	r3, #0
 80011ba:	d003      	beq.n	80011c4 <HAL_GPIO_Init+0x288>
        {
          temp |= iocurrent;
 80011bc:	69ba      	ldr	r2, [r7, #24]
 80011be:	693b      	ldr	r3, [r7, #16]
 80011c0:	4313      	orrs	r3, r2
 80011c2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80011c4:	4a26      	ldr	r2, [pc, #152]	@ (8001260 <HAL_GPIO_Init+0x324>)
 80011c6:	69bb      	ldr	r3, [r7, #24]
 80011c8:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 80011ca:	4b25      	ldr	r3, [pc, #148]	@ (8001260 <HAL_GPIO_Init+0x324>)
 80011cc:	685b      	ldr	r3, [r3, #4]
 80011ce:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80011d0:	693b      	ldr	r3, [r7, #16]
 80011d2:	43db      	mvns	r3, r3
 80011d4:	69ba      	ldr	r2, [r7, #24]
 80011d6:	4013      	ands	r3, r2
 80011d8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80011da:	683b      	ldr	r3, [r7, #0]
 80011dc:	685b      	ldr	r3, [r3, #4]
 80011de:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80011e2:	2b00      	cmp	r3, #0
 80011e4:	d003      	beq.n	80011ee <HAL_GPIO_Init+0x2b2>
        {
          temp |= iocurrent;
 80011e6:	69ba      	ldr	r2, [r7, #24]
 80011e8:	693b      	ldr	r3, [r7, #16]
 80011ea:	4313      	orrs	r3, r2
 80011ec:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80011ee:	4a1c      	ldr	r2, [pc, #112]	@ (8001260 <HAL_GPIO_Init+0x324>)
 80011f0:	69bb      	ldr	r3, [r7, #24]
 80011f2:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80011f4:	4b1a      	ldr	r3, [pc, #104]	@ (8001260 <HAL_GPIO_Init+0x324>)
 80011f6:	681b      	ldr	r3, [r3, #0]
 80011f8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80011fa:	693b      	ldr	r3, [r7, #16]
 80011fc:	43db      	mvns	r3, r3
 80011fe:	69ba      	ldr	r2, [r7, #24]
 8001200:	4013      	ands	r3, r2
 8001202:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001204:	683b      	ldr	r3, [r7, #0]
 8001206:	685b      	ldr	r3, [r3, #4]
 8001208:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800120c:	2b00      	cmp	r3, #0
 800120e:	d003      	beq.n	8001218 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8001210:	69ba      	ldr	r2, [r7, #24]
 8001212:	693b      	ldr	r3, [r7, #16]
 8001214:	4313      	orrs	r3, r2
 8001216:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001218:	4a11      	ldr	r2, [pc, #68]	@ (8001260 <HAL_GPIO_Init+0x324>)
 800121a:	69bb      	ldr	r3, [r7, #24]
 800121c:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800121e:	69fb      	ldr	r3, [r7, #28]
 8001220:	3301      	adds	r3, #1
 8001222:	61fb      	str	r3, [r7, #28]
 8001224:	69fb      	ldr	r3, [r7, #28]
 8001226:	2b0f      	cmp	r3, #15
 8001228:	f67f ae96 	bls.w	8000f58 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 800122c:	bf00      	nop
 800122e:	bf00      	nop
 8001230:	3724      	adds	r7, #36	@ 0x24
 8001232:	46bd      	mov	sp, r7
 8001234:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001238:	4770      	bx	lr
 800123a:	bf00      	nop
 800123c:	40023800 	.word	0x40023800
 8001240:	40013800 	.word	0x40013800
 8001244:	40020000 	.word	0x40020000
 8001248:	40020400 	.word	0x40020400
 800124c:	40020800 	.word	0x40020800
 8001250:	40020c00 	.word	0x40020c00
 8001254:	40021000 	.word	0x40021000
 8001258:	40021400 	.word	0x40021400
 800125c:	40021800 	.word	0x40021800
 8001260:	40013c00 	.word	0x40013c00

08001264 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8001264:	b480      	push	{r7}
 8001266:	b085      	sub	sp, #20
 8001268:	af00      	add	r7, sp, #0
 800126a:	6078      	str	r0, [r7, #4]
 800126c:	460b      	mov	r3, r1
 800126e:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8001270:	687b      	ldr	r3, [r7, #4]
 8001272:	691a      	ldr	r2, [r3, #16]
 8001274:	887b      	ldrh	r3, [r7, #2]
 8001276:	4013      	ands	r3, r2
 8001278:	2b00      	cmp	r3, #0
 800127a:	d002      	beq.n	8001282 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 800127c:	2301      	movs	r3, #1
 800127e:	73fb      	strb	r3, [r7, #15]
 8001280:	e001      	b.n	8001286 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8001282:	2300      	movs	r3, #0
 8001284:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8001286:	7bfb      	ldrb	r3, [r7, #15]
}
 8001288:	4618      	mov	r0, r3
 800128a:	3714      	adds	r7, #20
 800128c:	46bd      	mov	sp, r7
 800128e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001292:	4770      	bx	lr

08001294 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001294:	b480      	push	{r7}
 8001296:	b083      	sub	sp, #12
 8001298:	af00      	add	r7, sp, #0
 800129a:	6078      	str	r0, [r7, #4]
 800129c:	460b      	mov	r3, r1
 800129e:	807b      	strh	r3, [r7, #2]
 80012a0:	4613      	mov	r3, r2
 80012a2:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80012a4:	787b      	ldrb	r3, [r7, #1]
 80012a6:	2b00      	cmp	r3, #0
 80012a8:	d003      	beq.n	80012b2 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80012aa:	887a      	ldrh	r2, [r7, #2]
 80012ac:	687b      	ldr	r3, [r7, #4]
 80012ae:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80012b0:	e003      	b.n	80012ba <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80012b2:	887b      	ldrh	r3, [r7, #2]
 80012b4:	041a      	lsls	r2, r3, #16
 80012b6:	687b      	ldr	r3, [r7, #4]
 80012b8:	619a      	str	r2, [r3, #24]
}
 80012ba:	bf00      	nop
 80012bc:	370c      	adds	r7, #12
 80012be:	46bd      	mov	sp, r7
 80012c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012c4:	4770      	bx	lr
	...

080012c8 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(const RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80012c8:	b580      	push	{r7, lr}
 80012ca:	b084      	sub	sp, #16
 80012cc:	af00      	add	r7, sp, #0
 80012ce:	6078      	str	r0, [r7, #4]
 80012d0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80012d2:	687b      	ldr	r3, [r7, #4]
 80012d4:	2b00      	cmp	r3, #0
 80012d6:	d101      	bne.n	80012dc <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80012d8:	2301      	movs	r3, #1
 80012da:	e0cc      	b.n	8001476 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80012dc:	4b68      	ldr	r3, [pc, #416]	@ (8001480 <HAL_RCC_ClockConfig+0x1b8>)
 80012de:	681b      	ldr	r3, [r3, #0]
 80012e0:	f003 030f 	and.w	r3, r3, #15
 80012e4:	683a      	ldr	r2, [r7, #0]
 80012e6:	429a      	cmp	r2, r3
 80012e8:	d90c      	bls.n	8001304 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80012ea:	4b65      	ldr	r3, [pc, #404]	@ (8001480 <HAL_RCC_ClockConfig+0x1b8>)
 80012ec:	683a      	ldr	r2, [r7, #0]
 80012ee:	b2d2      	uxtb	r2, r2
 80012f0:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80012f2:	4b63      	ldr	r3, [pc, #396]	@ (8001480 <HAL_RCC_ClockConfig+0x1b8>)
 80012f4:	681b      	ldr	r3, [r3, #0]
 80012f6:	f003 030f 	and.w	r3, r3, #15
 80012fa:	683a      	ldr	r2, [r7, #0]
 80012fc:	429a      	cmp	r2, r3
 80012fe:	d001      	beq.n	8001304 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8001300:	2301      	movs	r3, #1
 8001302:	e0b8      	b.n	8001476 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001304:	687b      	ldr	r3, [r7, #4]
 8001306:	681b      	ldr	r3, [r3, #0]
 8001308:	f003 0302 	and.w	r3, r3, #2
 800130c:	2b00      	cmp	r3, #0
 800130e:	d020      	beq.n	8001352 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001310:	687b      	ldr	r3, [r7, #4]
 8001312:	681b      	ldr	r3, [r3, #0]
 8001314:	f003 0304 	and.w	r3, r3, #4
 8001318:	2b00      	cmp	r3, #0
 800131a:	d005      	beq.n	8001328 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800131c:	4b59      	ldr	r3, [pc, #356]	@ (8001484 <HAL_RCC_ClockConfig+0x1bc>)
 800131e:	689b      	ldr	r3, [r3, #8]
 8001320:	4a58      	ldr	r2, [pc, #352]	@ (8001484 <HAL_RCC_ClockConfig+0x1bc>)
 8001322:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 8001326:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001328:	687b      	ldr	r3, [r7, #4]
 800132a:	681b      	ldr	r3, [r3, #0]
 800132c:	f003 0308 	and.w	r3, r3, #8
 8001330:	2b00      	cmp	r3, #0
 8001332:	d005      	beq.n	8001340 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001334:	4b53      	ldr	r3, [pc, #332]	@ (8001484 <HAL_RCC_ClockConfig+0x1bc>)
 8001336:	689b      	ldr	r3, [r3, #8]
 8001338:	4a52      	ldr	r2, [pc, #328]	@ (8001484 <HAL_RCC_ClockConfig+0x1bc>)
 800133a:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 800133e:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001340:	4b50      	ldr	r3, [pc, #320]	@ (8001484 <HAL_RCC_ClockConfig+0x1bc>)
 8001342:	689b      	ldr	r3, [r3, #8]
 8001344:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8001348:	687b      	ldr	r3, [r7, #4]
 800134a:	689b      	ldr	r3, [r3, #8]
 800134c:	494d      	ldr	r1, [pc, #308]	@ (8001484 <HAL_RCC_ClockConfig+0x1bc>)
 800134e:	4313      	orrs	r3, r2
 8001350:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001352:	687b      	ldr	r3, [r7, #4]
 8001354:	681b      	ldr	r3, [r3, #0]
 8001356:	f003 0301 	and.w	r3, r3, #1
 800135a:	2b00      	cmp	r3, #0
 800135c:	d044      	beq.n	80013e8 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800135e:	687b      	ldr	r3, [r7, #4]
 8001360:	685b      	ldr	r3, [r3, #4]
 8001362:	2b01      	cmp	r3, #1
 8001364:	d107      	bne.n	8001376 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001366:	4b47      	ldr	r3, [pc, #284]	@ (8001484 <HAL_RCC_ClockConfig+0x1bc>)
 8001368:	681b      	ldr	r3, [r3, #0]
 800136a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800136e:	2b00      	cmp	r3, #0
 8001370:	d119      	bne.n	80013a6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001372:	2301      	movs	r3, #1
 8001374:	e07f      	b.n	8001476 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001376:	687b      	ldr	r3, [r7, #4]
 8001378:	685b      	ldr	r3, [r3, #4]
 800137a:	2b02      	cmp	r3, #2
 800137c:	d003      	beq.n	8001386 <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800137e:	687b      	ldr	r3, [r7, #4]
 8001380:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001382:	2b03      	cmp	r3, #3
 8001384:	d107      	bne.n	8001396 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001386:	4b3f      	ldr	r3, [pc, #252]	@ (8001484 <HAL_RCC_ClockConfig+0x1bc>)
 8001388:	681b      	ldr	r3, [r3, #0]
 800138a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800138e:	2b00      	cmp	r3, #0
 8001390:	d109      	bne.n	80013a6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001392:	2301      	movs	r3, #1
 8001394:	e06f      	b.n	8001476 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001396:	4b3b      	ldr	r3, [pc, #236]	@ (8001484 <HAL_RCC_ClockConfig+0x1bc>)
 8001398:	681b      	ldr	r3, [r3, #0]
 800139a:	f003 0302 	and.w	r3, r3, #2
 800139e:	2b00      	cmp	r3, #0
 80013a0:	d101      	bne.n	80013a6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80013a2:	2301      	movs	r3, #1
 80013a4:	e067      	b.n	8001476 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80013a6:	4b37      	ldr	r3, [pc, #220]	@ (8001484 <HAL_RCC_ClockConfig+0x1bc>)
 80013a8:	689b      	ldr	r3, [r3, #8]
 80013aa:	f023 0203 	bic.w	r2, r3, #3
 80013ae:	687b      	ldr	r3, [r7, #4]
 80013b0:	685b      	ldr	r3, [r3, #4]
 80013b2:	4934      	ldr	r1, [pc, #208]	@ (8001484 <HAL_RCC_ClockConfig+0x1bc>)
 80013b4:	4313      	orrs	r3, r2
 80013b6:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80013b8:	f7ff fcd2 	bl	8000d60 <HAL_GetTick>
 80013bc:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80013be:	e00a      	b.n	80013d6 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80013c0:	f7ff fcce 	bl	8000d60 <HAL_GetTick>
 80013c4:	4602      	mov	r2, r0
 80013c6:	68fb      	ldr	r3, [r7, #12]
 80013c8:	1ad3      	subs	r3, r2, r3
 80013ca:	f241 3288 	movw	r2, #5000	@ 0x1388
 80013ce:	4293      	cmp	r3, r2
 80013d0:	d901      	bls.n	80013d6 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80013d2:	2303      	movs	r3, #3
 80013d4:	e04f      	b.n	8001476 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80013d6:	4b2b      	ldr	r3, [pc, #172]	@ (8001484 <HAL_RCC_ClockConfig+0x1bc>)
 80013d8:	689b      	ldr	r3, [r3, #8]
 80013da:	f003 020c 	and.w	r2, r3, #12
 80013de:	687b      	ldr	r3, [r7, #4]
 80013e0:	685b      	ldr	r3, [r3, #4]
 80013e2:	009b      	lsls	r3, r3, #2
 80013e4:	429a      	cmp	r2, r3
 80013e6:	d1eb      	bne.n	80013c0 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80013e8:	4b25      	ldr	r3, [pc, #148]	@ (8001480 <HAL_RCC_ClockConfig+0x1b8>)
 80013ea:	681b      	ldr	r3, [r3, #0]
 80013ec:	f003 030f 	and.w	r3, r3, #15
 80013f0:	683a      	ldr	r2, [r7, #0]
 80013f2:	429a      	cmp	r2, r3
 80013f4:	d20c      	bcs.n	8001410 <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80013f6:	4b22      	ldr	r3, [pc, #136]	@ (8001480 <HAL_RCC_ClockConfig+0x1b8>)
 80013f8:	683a      	ldr	r2, [r7, #0]
 80013fa:	b2d2      	uxtb	r2, r2
 80013fc:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80013fe:	4b20      	ldr	r3, [pc, #128]	@ (8001480 <HAL_RCC_ClockConfig+0x1b8>)
 8001400:	681b      	ldr	r3, [r3, #0]
 8001402:	f003 030f 	and.w	r3, r3, #15
 8001406:	683a      	ldr	r2, [r7, #0]
 8001408:	429a      	cmp	r2, r3
 800140a:	d001      	beq.n	8001410 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 800140c:	2301      	movs	r3, #1
 800140e:	e032      	b.n	8001476 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001410:	687b      	ldr	r3, [r7, #4]
 8001412:	681b      	ldr	r3, [r3, #0]
 8001414:	f003 0304 	and.w	r3, r3, #4
 8001418:	2b00      	cmp	r3, #0
 800141a:	d008      	beq.n	800142e <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800141c:	4b19      	ldr	r3, [pc, #100]	@ (8001484 <HAL_RCC_ClockConfig+0x1bc>)
 800141e:	689b      	ldr	r3, [r3, #8]
 8001420:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8001424:	687b      	ldr	r3, [r7, #4]
 8001426:	68db      	ldr	r3, [r3, #12]
 8001428:	4916      	ldr	r1, [pc, #88]	@ (8001484 <HAL_RCC_ClockConfig+0x1bc>)
 800142a:	4313      	orrs	r3, r2
 800142c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800142e:	687b      	ldr	r3, [r7, #4]
 8001430:	681b      	ldr	r3, [r3, #0]
 8001432:	f003 0308 	and.w	r3, r3, #8
 8001436:	2b00      	cmp	r3, #0
 8001438:	d009      	beq.n	800144e <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800143a:	4b12      	ldr	r3, [pc, #72]	@ (8001484 <HAL_RCC_ClockConfig+0x1bc>)
 800143c:	689b      	ldr	r3, [r3, #8]
 800143e:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8001442:	687b      	ldr	r3, [r7, #4]
 8001444:	691b      	ldr	r3, [r3, #16]
 8001446:	00db      	lsls	r3, r3, #3
 8001448:	490e      	ldr	r1, [pc, #56]	@ (8001484 <HAL_RCC_ClockConfig+0x1bc>)
 800144a:	4313      	orrs	r3, r2
 800144c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 800144e:	f000 f887 	bl	8001560 <HAL_RCC_GetSysClockFreq>
 8001452:	4602      	mov	r2, r0
 8001454:	4b0b      	ldr	r3, [pc, #44]	@ (8001484 <HAL_RCC_ClockConfig+0x1bc>)
 8001456:	689b      	ldr	r3, [r3, #8]
 8001458:	091b      	lsrs	r3, r3, #4
 800145a:	f003 030f 	and.w	r3, r3, #15
 800145e:	490a      	ldr	r1, [pc, #40]	@ (8001488 <HAL_RCC_ClockConfig+0x1c0>)
 8001460:	5ccb      	ldrb	r3, [r1, r3]
 8001462:	fa22 f303 	lsr.w	r3, r2, r3
 8001466:	4a09      	ldr	r2, [pc, #36]	@ (800148c <HAL_RCC_ClockConfig+0x1c4>)
 8001468:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 800146a:	4b09      	ldr	r3, [pc, #36]	@ (8001490 <HAL_RCC_ClockConfig+0x1c8>)
 800146c:	681b      	ldr	r3, [r3, #0]
 800146e:	4618      	mov	r0, r3
 8001470:	f7ff fb2c 	bl	8000acc <HAL_InitTick>

  return HAL_OK;
 8001474:	2300      	movs	r3, #0
}
 8001476:	4618      	mov	r0, r3
 8001478:	3710      	adds	r7, #16
 800147a:	46bd      	mov	sp, r7
 800147c:	bd80      	pop	{r7, pc}
 800147e:	bf00      	nop
 8001480:	40023c00 	.word	0x40023c00
 8001484:	40023800 	.word	0x40023800
 8001488:	08007bbc 	.word	0x08007bbc
 800148c:	20000000 	.word	0x20000000
 8001490:	20000004 	.word	0x20000004

08001494 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001494:	b480      	push	{r7}
 8001496:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001498:	4b03      	ldr	r3, [pc, #12]	@ (80014a8 <HAL_RCC_GetHCLKFreq+0x14>)
 800149a:	681b      	ldr	r3, [r3, #0]
}
 800149c:	4618      	mov	r0, r3
 800149e:	46bd      	mov	sp, r7
 80014a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014a4:	4770      	bx	lr
 80014a6:	bf00      	nop
 80014a8:	20000000 	.word	0x20000000

080014ac <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80014ac:	b580      	push	{r7, lr}
 80014ae:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 80014b0:	f7ff fff0 	bl	8001494 <HAL_RCC_GetHCLKFreq>
 80014b4:	4602      	mov	r2, r0
 80014b6:	4b05      	ldr	r3, [pc, #20]	@ (80014cc <HAL_RCC_GetPCLK1Freq+0x20>)
 80014b8:	689b      	ldr	r3, [r3, #8]
 80014ba:	0a9b      	lsrs	r3, r3, #10
 80014bc:	f003 0307 	and.w	r3, r3, #7
 80014c0:	4903      	ldr	r1, [pc, #12]	@ (80014d0 <HAL_RCC_GetPCLK1Freq+0x24>)
 80014c2:	5ccb      	ldrb	r3, [r1, r3]
 80014c4:	fa22 f303 	lsr.w	r3, r2, r3
}
 80014c8:	4618      	mov	r0, r3
 80014ca:	bd80      	pop	{r7, pc}
 80014cc:	40023800 	.word	0x40023800
 80014d0:	08007bcc 	.word	0x08007bcc

080014d4 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80014d4:	b580      	push	{r7, lr}
 80014d6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 80014d8:	f7ff ffdc 	bl	8001494 <HAL_RCC_GetHCLKFreq>
 80014dc:	4602      	mov	r2, r0
 80014de:	4b05      	ldr	r3, [pc, #20]	@ (80014f4 <HAL_RCC_GetPCLK2Freq+0x20>)
 80014e0:	689b      	ldr	r3, [r3, #8]
 80014e2:	0b5b      	lsrs	r3, r3, #13
 80014e4:	f003 0307 	and.w	r3, r3, #7
 80014e8:	4903      	ldr	r1, [pc, #12]	@ (80014f8 <HAL_RCC_GetPCLK2Freq+0x24>)
 80014ea:	5ccb      	ldrb	r3, [r1, r3]
 80014ec:	fa22 f303 	lsr.w	r3, r2, r3
}
 80014f0:	4618      	mov	r0, r3
 80014f2:	bd80      	pop	{r7, pc}
 80014f4:	40023800 	.word	0x40023800
 80014f8:	08007bcc 	.word	0x08007bcc

080014fc <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 80014fc:	b480      	push	{r7}
 80014fe:	b083      	sub	sp, #12
 8001500:	af00      	add	r7, sp, #0
 8001502:	6078      	str	r0, [r7, #4]
 8001504:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8001506:	687b      	ldr	r3, [r7, #4]
 8001508:	220f      	movs	r2, #15
 800150a:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 800150c:	4b12      	ldr	r3, [pc, #72]	@ (8001558 <HAL_RCC_GetClockConfig+0x5c>)
 800150e:	689b      	ldr	r3, [r3, #8]
 8001510:	f003 0203 	and.w	r2, r3, #3
 8001514:	687b      	ldr	r3, [r7, #4]
 8001516:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8001518:	4b0f      	ldr	r3, [pc, #60]	@ (8001558 <HAL_RCC_GetClockConfig+0x5c>)
 800151a:	689b      	ldr	r3, [r3, #8]
 800151c:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 8001520:	687b      	ldr	r3, [r7, #4]
 8001522:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8001524:	4b0c      	ldr	r3, [pc, #48]	@ (8001558 <HAL_RCC_GetClockConfig+0x5c>)
 8001526:	689b      	ldr	r3, [r3, #8]
 8001528:	f403 52e0 	and.w	r2, r3, #7168	@ 0x1c00
 800152c:	687b      	ldr	r3, [r7, #4]
 800152e:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 8001530:	4b09      	ldr	r3, [pc, #36]	@ (8001558 <HAL_RCC_GetClockConfig+0x5c>)
 8001532:	689b      	ldr	r3, [r3, #8]
 8001534:	08db      	lsrs	r3, r3, #3
 8001536:	f403 52e0 	and.w	r2, r3, #7168	@ 0x1c00
 800153a:	687b      	ldr	r3, [r7, #4]
 800153c:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 800153e:	4b07      	ldr	r3, [pc, #28]	@ (800155c <HAL_RCC_GetClockConfig+0x60>)
 8001540:	681b      	ldr	r3, [r3, #0]
 8001542:	f003 020f 	and.w	r2, r3, #15
 8001546:	683b      	ldr	r3, [r7, #0]
 8001548:	601a      	str	r2, [r3, #0]
}
 800154a:	bf00      	nop
 800154c:	370c      	adds	r7, #12
 800154e:	46bd      	mov	sp, r7
 8001550:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001554:	4770      	bx	lr
 8001556:	bf00      	nop
 8001558:	40023800 	.word	0x40023800
 800155c:	40023c00 	.word	0x40023c00

08001560 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001560:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8001564:	b0ae      	sub	sp, #184	@ 0xb8
 8001566:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8001568:	2300      	movs	r3, #0
 800156a:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
  uint32_t pllvco = 0U;
 800156e:	2300      	movs	r3, #0
 8001570:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
  uint32_t pllp = 0U;
 8001574:	2300      	movs	r3, #0
 8001576:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
  uint32_t pllr = 0U;
 800157a:	2300      	movs	r3, #0
 800157c:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
  uint32_t sysclockfreq = 0U;
 8001580:	2300      	movs	r3, #0
 8001582:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8001586:	4bcb      	ldr	r3, [pc, #812]	@ (80018b4 <HAL_RCC_GetSysClockFreq+0x354>)
 8001588:	689b      	ldr	r3, [r3, #8]
 800158a:	f003 030c 	and.w	r3, r3, #12
 800158e:	2b0c      	cmp	r3, #12
 8001590:	f200 8206 	bhi.w	80019a0 <HAL_RCC_GetSysClockFreq+0x440>
 8001594:	a201      	add	r2, pc, #4	@ (adr r2, 800159c <HAL_RCC_GetSysClockFreq+0x3c>)
 8001596:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800159a:	bf00      	nop
 800159c:	080015d1 	.word	0x080015d1
 80015a0:	080019a1 	.word	0x080019a1
 80015a4:	080019a1 	.word	0x080019a1
 80015a8:	080019a1 	.word	0x080019a1
 80015ac:	080015d9 	.word	0x080015d9
 80015b0:	080019a1 	.word	0x080019a1
 80015b4:	080019a1 	.word	0x080019a1
 80015b8:	080019a1 	.word	0x080019a1
 80015bc:	080015e1 	.word	0x080015e1
 80015c0:	080019a1 	.word	0x080019a1
 80015c4:	080019a1 	.word	0x080019a1
 80015c8:	080019a1 	.word	0x080019a1
 80015cc:	080017d1 	.word	0x080017d1
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80015d0:	4bb9      	ldr	r3, [pc, #740]	@ (80018b8 <HAL_RCC_GetSysClockFreq+0x358>)
 80015d2:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 80015d6:	e1e7      	b.n	80019a8 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80015d8:	4bb8      	ldr	r3, [pc, #736]	@ (80018bc <HAL_RCC_GetSysClockFreq+0x35c>)
 80015da:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 80015de:	e1e3      	b.n	80019a8 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL/PLLP used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80015e0:	4bb4      	ldr	r3, [pc, #720]	@ (80018b4 <HAL_RCC_GetSysClockFreq+0x354>)
 80015e2:	685b      	ldr	r3, [r3, #4]
 80015e4:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80015e8:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80015ec:	4bb1      	ldr	r3, [pc, #708]	@ (80018b4 <HAL_RCC_GetSysClockFreq+0x354>)
 80015ee:	685b      	ldr	r3, [r3, #4]
 80015f0:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80015f4:	2b00      	cmp	r3, #0
 80015f6:	d071      	beq.n	80016dc <HAL_RCC_GetSysClockFreq+0x17c>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80015f8:	4bae      	ldr	r3, [pc, #696]	@ (80018b4 <HAL_RCC_GetSysClockFreq+0x354>)
 80015fa:	685b      	ldr	r3, [r3, #4]
 80015fc:	099b      	lsrs	r3, r3, #6
 80015fe:	2200      	movs	r2, #0
 8001600:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8001604:	f8c7 209c 	str.w	r2, [r7, #156]	@ 0x9c
 8001608:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 800160c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8001610:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8001614:	2300      	movs	r3, #0
 8001616:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 800161a:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 800161e:	4622      	mov	r2, r4
 8001620:	462b      	mov	r3, r5
 8001622:	f04f 0000 	mov.w	r0, #0
 8001626:	f04f 0100 	mov.w	r1, #0
 800162a:	0159      	lsls	r1, r3, #5
 800162c:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8001630:	0150      	lsls	r0, r2, #5
 8001632:	4602      	mov	r2, r0
 8001634:	460b      	mov	r3, r1
 8001636:	4621      	mov	r1, r4
 8001638:	1a51      	subs	r1, r2, r1
 800163a:	6439      	str	r1, [r7, #64]	@ 0x40
 800163c:	4629      	mov	r1, r5
 800163e:	eb63 0301 	sbc.w	r3, r3, r1
 8001642:	647b      	str	r3, [r7, #68]	@ 0x44
 8001644:	f04f 0200 	mov.w	r2, #0
 8001648:	f04f 0300 	mov.w	r3, #0
 800164c:	e9d7 8910 	ldrd	r8, r9, [r7, #64]	@ 0x40
 8001650:	4649      	mov	r1, r9
 8001652:	018b      	lsls	r3, r1, #6
 8001654:	4641      	mov	r1, r8
 8001656:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 800165a:	4641      	mov	r1, r8
 800165c:	018a      	lsls	r2, r1, #6
 800165e:	4641      	mov	r1, r8
 8001660:	1a51      	subs	r1, r2, r1
 8001662:	63b9      	str	r1, [r7, #56]	@ 0x38
 8001664:	4649      	mov	r1, r9
 8001666:	eb63 0301 	sbc.w	r3, r3, r1
 800166a:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800166c:	f04f 0200 	mov.w	r2, #0
 8001670:	f04f 0300 	mov.w	r3, #0
 8001674:	e9d7 890e 	ldrd	r8, r9, [r7, #56]	@ 0x38
 8001678:	4649      	mov	r1, r9
 800167a:	00cb      	lsls	r3, r1, #3
 800167c:	4641      	mov	r1, r8
 800167e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8001682:	4641      	mov	r1, r8
 8001684:	00ca      	lsls	r2, r1, #3
 8001686:	4610      	mov	r0, r2
 8001688:	4619      	mov	r1, r3
 800168a:	4603      	mov	r3, r0
 800168c:	4622      	mov	r2, r4
 800168e:	189b      	adds	r3, r3, r2
 8001690:	633b      	str	r3, [r7, #48]	@ 0x30
 8001692:	462b      	mov	r3, r5
 8001694:	460a      	mov	r2, r1
 8001696:	eb42 0303 	adc.w	r3, r2, r3
 800169a:	637b      	str	r3, [r7, #52]	@ 0x34
 800169c:	f04f 0200 	mov.w	r2, #0
 80016a0:	f04f 0300 	mov.w	r3, #0
 80016a4:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 80016a8:	4629      	mov	r1, r5
 80016aa:	024b      	lsls	r3, r1, #9
 80016ac:	4621      	mov	r1, r4
 80016ae:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 80016b2:	4621      	mov	r1, r4
 80016b4:	024a      	lsls	r2, r1, #9
 80016b6:	4610      	mov	r0, r2
 80016b8:	4619      	mov	r1, r3
 80016ba:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80016be:	2200      	movs	r2, #0
 80016c0:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 80016c4:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 80016c8:	e9d7 2322 	ldrd	r2, r3, [r7, #136]	@ 0x88
 80016cc:	f7fe fdf8 	bl	80002c0 <__aeabi_uldivmod>
 80016d0:	4602      	mov	r2, r0
 80016d2:	460b      	mov	r3, r1
 80016d4:	4613      	mov	r3, r2
 80016d6:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 80016da:	e067      	b.n	80017ac <HAL_RCC_GetSysClockFreq+0x24c>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80016dc:	4b75      	ldr	r3, [pc, #468]	@ (80018b4 <HAL_RCC_GetSysClockFreq+0x354>)
 80016de:	685b      	ldr	r3, [r3, #4]
 80016e0:	099b      	lsrs	r3, r3, #6
 80016e2:	2200      	movs	r2, #0
 80016e4:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 80016e8:	f8c7 2084 	str.w	r2, [r7, #132]	@ 0x84
 80016ec:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 80016f0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80016f4:	67bb      	str	r3, [r7, #120]	@ 0x78
 80016f6:	2300      	movs	r3, #0
 80016f8:	67fb      	str	r3, [r7, #124]	@ 0x7c
 80016fa:	e9d7 451e 	ldrd	r4, r5, [r7, #120]	@ 0x78
 80016fe:	4622      	mov	r2, r4
 8001700:	462b      	mov	r3, r5
 8001702:	f04f 0000 	mov.w	r0, #0
 8001706:	f04f 0100 	mov.w	r1, #0
 800170a:	0159      	lsls	r1, r3, #5
 800170c:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8001710:	0150      	lsls	r0, r2, #5
 8001712:	4602      	mov	r2, r0
 8001714:	460b      	mov	r3, r1
 8001716:	4621      	mov	r1, r4
 8001718:	1a51      	subs	r1, r2, r1
 800171a:	62b9      	str	r1, [r7, #40]	@ 0x28
 800171c:	4629      	mov	r1, r5
 800171e:	eb63 0301 	sbc.w	r3, r3, r1
 8001722:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8001724:	f04f 0200 	mov.w	r2, #0
 8001728:	f04f 0300 	mov.w	r3, #0
 800172c:	e9d7 890a 	ldrd	r8, r9, [r7, #40]	@ 0x28
 8001730:	4649      	mov	r1, r9
 8001732:	018b      	lsls	r3, r1, #6
 8001734:	4641      	mov	r1, r8
 8001736:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 800173a:	4641      	mov	r1, r8
 800173c:	018a      	lsls	r2, r1, #6
 800173e:	4641      	mov	r1, r8
 8001740:	ebb2 0a01 	subs.w	sl, r2, r1
 8001744:	4649      	mov	r1, r9
 8001746:	eb63 0b01 	sbc.w	fp, r3, r1
 800174a:	f04f 0200 	mov.w	r2, #0
 800174e:	f04f 0300 	mov.w	r3, #0
 8001752:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8001756:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 800175a:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800175e:	4692      	mov	sl, r2
 8001760:	469b      	mov	fp, r3
 8001762:	4623      	mov	r3, r4
 8001764:	eb1a 0303 	adds.w	r3, sl, r3
 8001768:	623b      	str	r3, [r7, #32]
 800176a:	462b      	mov	r3, r5
 800176c:	eb4b 0303 	adc.w	r3, fp, r3
 8001770:	627b      	str	r3, [r7, #36]	@ 0x24
 8001772:	f04f 0200 	mov.w	r2, #0
 8001776:	f04f 0300 	mov.w	r3, #0
 800177a:	e9d7 4508 	ldrd	r4, r5, [r7, #32]
 800177e:	4629      	mov	r1, r5
 8001780:	028b      	lsls	r3, r1, #10
 8001782:	4621      	mov	r1, r4
 8001784:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8001788:	4621      	mov	r1, r4
 800178a:	028a      	lsls	r2, r1, #10
 800178c:	4610      	mov	r0, r2
 800178e:	4619      	mov	r1, r3
 8001790:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8001794:	2200      	movs	r2, #0
 8001796:	673b      	str	r3, [r7, #112]	@ 0x70
 8001798:	677a      	str	r2, [r7, #116]	@ 0x74
 800179a:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	@ 0x70
 800179e:	f7fe fd8f 	bl	80002c0 <__aeabi_uldivmod>
 80017a2:	4602      	mov	r2, r0
 80017a4:	460b      	mov	r3, r1
 80017a6:	4613      	mov	r3, r2
 80017a8:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 80017ac:	4b41      	ldr	r3, [pc, #260]	@ (80018b4 <HAL_RCC_GetSysClockFreq+0x354>)
 80017ae:	685b      	ldr	r3, [r3, #4]
 80017b0:	0c1b      	lsrs	r3, r3, #16
 80017b2:	f003 0303 	and.w	r3, r3, #3
 80017b6:	3301      	adds	r3, #1
 80017b8:	005b      	lsls	r3, r3, #1
 80017ba:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8

      sysclockfreq = pllvco / pllp;
 80017be:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 80017c2:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 80017c6:	fbb2 f3f3 	udiv	r3, r2, r3
 80017ca:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 80017ce:	e0eb      	b.n	80019a8 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_PLLR:  /* PLL/PLLR used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80017d0:	4b38      	ldr	r3, [pc, #224]	@ (80018b4 <HAL_RCC_GetSysClockFreq+0x354>)
 80017d2:	685b      	ldr	r3, [r3, #4]
 80017d4:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80017d8:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80017dc:	4b35      	ldr	r3, [pc, #212]	@ (80018b4 <HAL_RCC_GetSysClockFreq+0x354>)
 80017de:	685b      	ldr	r3, [r3, #4]
 80017e0:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80017e4:	2b00      	cmp	r3, #0
 80017e6:	d06b      	beq.n	80018c0 <HAL_RCC_GetSysClockFreq+0x360>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80017e8:	4b32      	ldr	r3, [pc, #200]	@ (80018b4 <HAL_RCC_GetSysClockFreq+0x354>)
 80017ea:	685b      	ldr	r3, [r3, #4]
 80017ec:	099b      	lsrs	r3, r3, #6
 80017ee:	2200      	movs	r2, #0
 80017f0:	66bb      	str	r3, [r7, #104]	@ 0x68
 80017f2:	66fa      	str	r2, [r7, #108]	@ 0x6c
 80017f4:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 80017f6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80017fa:	663b      	str	r3, [r7, #96]	@ 0x60
 80017fc:	2300      	movs	r3, #0
 80017fe:	667b      	str	r3, [r7, #100]	@ 0x64
 8001800:	e9d7 4518 	ldrd	r4, r5, [r7, #96]	@ 0x60
 8001804:	4622      	mov	r2, r4
 8001806:	462b      	mov	r3, r5
 8001808:	f04f 0000 	mov.w	r0, #0
 800180c:	f04f 0100 	mov.w	r1, #0
 8001810:	0159      	lsls	r1, r3, #5
 8001812:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8001816:	0150      	lsls	r0, r2, #5
 8001818:	4602      	mov	r2, r0
 800181a:	460b      	mov	r3, r1
 800181c:	4621      	mov	r1, r4
 800181e:	1a51      	subs	r1, r2, r1
 8001820:	61b9      	str	r1, [r7, #24]
 8001822:	4629      	mov	r1, r5
 8001824:	eb63 0301 	sbc.w	r3, r3, r1
 8001828:	61fb      	str	r3, [r7, #28]
 800182a:	f04f 0200 	mov.w	r2, #0
 800182e:	f04f 0300 	mov.w	r3, #0
 8001832:	e9d7 ab06 	ldrd	sl, fp, [r7, #24]
 8001836:	4659      	mov	r1, fp
 8001838:	018b      	lsls	r3, r1, #6
 800183a:	4651      	mov	r1, sl
 800183c:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8001840:	4651      	mov	r1, sl
 8001842:	018a      	lsls	r2, r1, #6
 8001844:	4651      	mov	r1, sl
 8001846:	ebb2 0801 	subs.w	r8, r2, r1
 800184a:	4659      	mov	r1, fp
 800184c:	eb63 0901 	sbc.w	r9, r3, r1
 8001850:	f04f 0200 	mov.w	r2, #0
 8001854:	f04f 0300 	mov.w	r3, #0
 8001858:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800185c:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8001860:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8001864:	4690      	mov	r8, r2
 8001866:	4699      	mov	r9, r3
 8001868:	4623      	mov	r3, r4
 800186a:	eb18 0303 	adds.w	r3, r8, r3
 800186e:	613b      	str	r3, [r7, #16]
 8001870:	462b      	mov	r3, r5
 8001872:	eb49 0303 	adc.w	r3, r9, r3
 8001876:	617b      	str	r3, [r7, #20]
 8001878:	f04f 0200 	mov.w	r2, #0
 800187c:	f04f 0300 	mov.w	r3, #0
 8001880:	e9d7 4504 	ldrd	r4, r5, [r7, #16]
 8001884:	4629      	mov	r1, r5
 8001886:	024b      	lsls	r3, r1, #9
 8001888:	4621      	mov	r1, r4
 800188a:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 800188e:	4621      	mov	r1, r4
 8001890:	024a      	lsls	r2, r1, #9
 8001892:	4610      	mov	r0, r2
 8001894:	4619      	mov	r1, r3
 8001896:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800189a:	2200      	movs	r2, #0
 800189c:	65bb      	str	r3, [r7, #88]	@ 0x58
 800189e:	65fa      	str	r2, [r7, #92]	@ 0x5c
 80018a0:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 80018a4:	f7fe fd0c 	bl	80002c0 <__aeabi_uldivmod>
 80018a8:	4602      	mov	r2, r0
 80018aa:	460b      	mov	r3, r1
 80018ac:	4613      	mov	r3, r2
 80018ae:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 80018b2:	e065      	b.n	8001980 <HAL_RCC_GetSysClockFreq+0x420>
 80018b4:	40023800 	.word	0x40023800
 80018b8:	00f42400 	.word	0x00f42400
 80018bc:	007a1200 	.word	0x007a1200
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80018c0:	4b3d      	ldr	r3, [pc, #244]	@ (80019b8 <HAL_RCC_GetSysClockFreq+0x458>)
 80018c2:	685b      	ldr	r3, [r3, #4]
 80018c4:	099b      	lsrs	r3, r3, #6
 80018c6:	2200      	movs	r2, #0
 80018c8:	4618      	mov	r0, r3
 80018ca:	4611      	mov	r1, r2
 80018cc:	f3c0 0308 	ubfx	r3, r0, #0, #9
 80018d0:	653b      	str	r3, [r7, #80]	@ 0x50
 80018d2:	2300      	movs	r3, #0
 80018d4:	657b      	str	r3, [r7, #84]	@ 0x54
 80018d6:	e9d7 8914 	ldrd	r8, r9, [r7, #80]	@ 0x50
 80018da:	4642      	mov	r2, r8
 80018dc:	464b      	mov	r3, r9
 80018de:	f04f 0000 	mov.w	r0, #0
 80018e2:	f04f 0100 	mov.w	r1, #0
 80018e6:	0159      	lsls	r1, r3, #5
 80018e8:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80018ec:	0150      	lsls	r0, r2, #5
 80018ee:	4602      	mov	r2, r0
 80018f0:	460b      	mov	r3, r1
 80018f2:	4641      	mov	r1, r8
 80018f4:	1a51      	subs	r1, r2, r1
 80018f6:	60b9      	str	r1, [r7, #8]
 80018f8:	4649      	mov	r1, r9
 80018fa:	eb63 0301 	sbc.w	r3, r3, r1
 80018fe:	60fb      	str	r3, [r7, #12]
 8001900:	f04f 0200 	mov.w	r2, #0
 8001904:	f04f 0300 	mov.w	r3, #0
 8001908:	e9d7 ab02 	ldrd	sl, fp, [r7, #8]
 800190c:	4659      	mov	r1, fp
 800190e:	018b      	lsls	r3, r1, #6
 8001910:	4651      	mov	r1, sl
 8001912:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8001916:	4651      	mov	r1, sl
 8001918:	018a      	lsls	r2, r1, #6
 800191a:	4651      	mov	r1, sl
 800191c:	1a54      	subs	r4, r2, r1
 800191e:	4659      	mov	r1, fp
 8001920:	eb63 0501 	sbc.w	r5, r3, r1
 8001924:	f04f 0200 	mov.w	r2, #0
 8001928:	f04f 0300 	mov.w	r3, #0
 800192c:	00eb      	lsls	r3, r5, #3
 800192e:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8001932:	00e2      	lsls	r2, r4, #3
 8001934:	4614      	mov	r4, r2
 8001936:	461d      	mov	r5, r3
 8001938:	4643      	mov	r3, r8
 800193a:	18e3      	adds	r3, r4, r3
 800193c:	603b      	str	r3, [r7, #0]
 800193e:	464b      	mov	r3, r9
 8001940:	eb45 0303 	adc.w	r3, r5, r3
 8001944:	607b      	str	r3, [r7, #4]
 8001946:	f04f 0200 	mov.w	r2, #0
 800194a:	f04f 0300 	mov.w	r3, #0
 800194e:	e9d7 4500 	ldrd	r4, r5, [r7]
 8001952:	4629      	mov	r1, r5
 8001954:	028b      	lsls	r3, r1, #10
 8001956:	4621      	mov	r1, r4
 8001958:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 800195c:	4621      	mov	r1, r4
 800195e:	028a      	lsls	r2, r1, #10
 8001960:	4610      	mov	r0, r2
 8001962:	4619      	mov	r1, r3
 8001964:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8001968:	2200      	movs	r2, #0
 800196a:	64bb      	str	r3, [r7, #72]	@ 0x48
 800196c:	64fa      	str	r2, [r7, #76]	@ 0x4c
 800196e:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 8001972:	f7fe fca5 	bl	80002c0 <__aeabi_uldivmod>
 8001976:	4602      	mov	r2, r0
 8001978:	460b      	mov	r3, r1
 800197a:	4613      	mov	r3, r2
 800197c:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
      }
      pllr = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos);
 8001980:	4b0d      	ldr	r3, [pc, #52]	@ (80019b8 <HAL_RCC_GetSysClockFreq+0x458>)
 8001982:	685b      	ldr	r3, [r3, #4]
 8001984:	0f1b      	lsrs	r3, r3, #28
 8001986:	f003 0307 	and.w	r3, r3, #7
 800198a:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4

      sysclockfreq = pllvco / pllr;
 800198e:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 8001992:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 8001996:	fbb2 f3f3 	udiv	r3, r2, r3
 800199a:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 800199e:	e003      	b.n	80019a8 <HAL_RCC_GetSysClockFreq+0x448>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80019a0:	4b06      	ldr	r3, [pc, #24]	@ (80019bc <HAL_RCC_GetSysClockFreq+0x45c>)
 80019a2:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 80019a6:	bf00      	nop
    }
  }
  return sysclockfreq;
 80019a8:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
}
 80019ac:	4618      	mov	r0, r3
 80019ae:	37b8      	adds	r7, #184	@ 0xb8
 80019b0:	46bd      	mov	sp, r7
 80019b2:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80019b6:	bf00      	nop
 80019b8:	40023800 	.word	0x40023800
 80019bc:	00f42400 	.word	0x00f42400

080019c0 <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(const RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80019c0:	b580      	push	{r7, lr}
 80019c2:	b086      	sub	sp, #24
 80019c4:	af00      	add	r7, sp, #0
 80019c6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80019c8:	687b      	ldr	r3, [r7, #4]
 80019ca:	2b00      	cmp	r3, #0
 80019cc:	d101      	bne.n	80019d2 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80019ce:	2301      	movs	r3, #1
 80019d0:	e28d      	b.n	8001eee <HAL_RCC_OscConfig+0x52e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80019d2:	687b      	ldr	r3, [r7, #4]
 80019d4:	681b      	ldr	r3, [r3, #0]
 80019d6:	f003 0301 	and.w	r3, r3, #1
 80019da:	2b00      	cmp	r3, #0
 80019dc:	f000 8083 	beq.w	8001ae6 <HAL_RCC_OscConfig+0x126>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
#if defined(STM32F446xx)
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 80019e0:	4b94      	ldr	r3, [pc, #592]	@ (8001c34 <HAL_RCC_OscConfig+0x274>)
 80019e2:	689b      	ldr	r3, [r3, #8]
 80019e4:	f003 030c 	and.w	r3, r3, #12
 80019e8:	2b04      	cmp	r3, #4
 80019ea:	d019      	beq.n	8001a20 <HAL_RCC_OscConfig+0x60>
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) || \
 80019ec:	4b91      	ldr	r3, [pc, #580]	@ (8001c34 <HAL_RCC_OscConfig+0x274>)
 80019ee:	689b      	ldr	r3, [r3, #8]
 80019f0:	f003 030c 	and.w	r3, r3, #12
        || \
 80019f4:	2b08      	cmp	r3, #8
 80019f6:	d106      	bne.n	8001a06 <HAL_RCC_OscConfig+0x46>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) || \
 80019f8:	4b8e      	ldr	r3, [pc, #568]	@ (8001c34 <HAL_RCC_OscConfig+0x274>)
 80019fa:	685b      	ldr	r3, [r3, #4]
 80019fc:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8001a00:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8001a04:	d00c      	beq.n	8001a20 <HAL_RCC_OscConfig+0x60>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001a06:	4b8b      	ldr	r3, [pc, #556]	@ (8001c34 <HAL_RCC_OscConfig+0x274>)
 8001a08:	689b      	ldr	r3, [r3, #8]
 8001a0a:	f003 030c 	and.w	r3, r3, #12
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) || \
 8001a0e:	2b0c      	cmp	r3, #12
 8001a10:	d112      	bne.n	8001a38 <HAL_RCC_OscConfig+0x78>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001a12:	4b88      	ldr	r3, [pc, #544]	@ (8001c34 <HAL_RCC_OscConfig+0x274>)
 8001a14:	685b      	ldr	r3, [r3, #4]
 8001a16:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8001a1a:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8001a1e:	d10b      	bne.n	8001a38 <HAL_RCC_OscConfig+0x78>
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
#endif /* STM32F446xx */
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001a20:	4b84      	ldr	r3, [pc, #528]	@ (8001c34 <HAL_RCC_OscConfig+0x274>)
 8001a22:	681b      	ldr	r3, [r3, #0]
 8001a24:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001a28:	2b00      	cmp	r3, #0
 8001a2a:	d05b      	beq.n	8001ae4 <HAL_RCC_OscConfig+0x124>
 8001a2c:	687b      	ldr	r3, [r7, #4]
 8001a2e:	685b      	ldr	r3, [r3, #4]
 8001a30:	2b00      	cmp	r3, #0
 8001a32:	d157      	bne.n	8001ae4 <HAL_RCC_OscConfig+0x124>
      {
        return HAL_ERROR;
 8001a34:	2301      	movs	r3, #1
 8001a36:	e25a      	b.n	8001eee <HAL_RCC_OscConfig+0x52e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001a38:	687b      	ldr	r3, [r7, #4]
 8001a3a:	685b      	ldr	r3, [r3, #4]
 8001a3c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8001a40:	d106      	bne.n	8001a50 <HAL_RCC_OscConfig+0x90>
 8001a42:	4b7c      	ldr	r3, [pc, #496]	@ (8001c34 <HAL_RCC_OscConfig+0x274>)
 8001a44:	681b      	ldr	r3, [r3, #0]
 8001a46:	4a7b      	ldr	r2, [pc, #492]	@ (8001c34 <HAL_RCC_OscConfig+0x274>)
 8001a48:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001a4c:	6013      	str	r3, [r2, #0]
 8001a4e:	e01d      	b.n	8001a8c <HAL_RCC_OscConfig+0xcc>
 8001a50:	687b      	ldr	r3, [r7, #4]
 8001a52:	685b      	ldr	r3, [r3, #4]
 8001a54:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8001a58:	d10c      	bne.n	8001a74 <HAL_RCC_OscConfig+0xb4>
 8001a5a:	4b76      	ldr	r3, [pc, #472]	@ (8001c34 <HAL_RCC_OscConfig+0x274>)
 8001a5c:	681b      	ldr	r3, [r3, #0]
 8001a5e:	4a75      	ldr	r2, [pc, #468]	@ (8001c34 <HAL_RCC_OscConfig+0x274>)
 8001a60:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8001a64:	6013      	str	r3, [r2, #0]
 8001a66:	4b73      	ldr	r3, [pc, #460]	@ (8001c34 <HAL_RCC_OscConfig+0x274>)
 8001a68:	681b      	ldr	r3, [r3, #0]
 8001a6a:	4a72      	ldr	r2, [pc, #456]	@ (8001c34 <HAL_RCC_OscConfig+0x274>)
 8001a6c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001a70:	6013      	str	r3, [r2, #0]
 8001a72:	e00b      	b.n	8001a8c <HAL_RCC_OscConfig+0xcc>
 8001a74:	4b6f      	ldr	r3, [pc, #444]	@ (8001c34 <HAL_RCC_OscConfig+0x274>)
 8001a76:	681b      	ldr	r3, [r3, #0]
 8001a78:	4a6e      	ldr	r2, [pc, #440]	@ (8001c34 <HAL_RCC_OscConfig+0x274>)
 8001a7a:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8001a7e:	6013      	str	r3, [r2, #0]
 8001a80:	4b6c      	ldr	r3, [pc, #432]	@ (8001c34 <HAL_RCC_OscConfig+0x274>)
 8001a82:	681b      	ldr	r3, [r3, #0]
 8001a84:	4a6b      	ldr	r2, [pc, #428]	@ (8001c34 <HAL_RCC_OscConfig+0x274>)
 8001a86:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8001a8a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8001a8c:	687b      	ldr	r3, [r7, #4]
 8001a8e:	685b      	ldr	r3, [r3, #4]
 8001a90:	2b00      	cmp	r3, #0
 8001a92:	d013      	beq.n	8001abc <HAL_RCC_OscConfig+0xfc>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001a94:	f7ff f964 	bl	8000d60 <HAL_GetTick>
 8001a98:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001a9a:	e008      	b.n	8001aae <HAL_RCC_OscConfig+0xee>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001a9c:	f7ff f960 	bl	8000d60 <HAL_GetTick>
 8001aa0:	4602      	mov	r2, r0
 8001aa2:	693b      	ldr	r3, [r7, #16]
 8001aa4:	1ad3      	subs	r3, r2, r3
 8001aa6:	2b64      	cmp	r3, #100	@ 0x64
 8001aa8:	d901      	bls.n	8001aae <HAL_RCC_OscConfig+0xee>
          {
            return HAL_TIMEOUT;
 8001aaa:	2303      	movs	r3, #3
 8001aac:	e21f      	b.n	8001eee <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001aae:	4b61      	ldr	r3, [pc, #388]	@ (8001c34 <HAL_RCC_OscConfig+0x274>)
 8001ab0:	681b      	ldr	r3, [r3, #0]
 8001ab2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001ab6:	2b00      	cmp	r3, #0
 8001ab8:	d0f0      	beq.n	8001a9c <HAL_RCC_OscConfig+0xdc>
 8001aba:	e014      	b.n	8001ae6 <HAL_RCC_OscConfig+0x126>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001abc:	f7ff f950 	bl	8000d60 <HAL_GetTick>
 8001ac0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001ac2:	e008      	b.n	8001ad6 <HAL_RCC_OscConfig+0x116>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001ac4:	f7ff f94c 	bl	8000d60 <HAL_GetTick>
 8001ac8:	4602      	mov	r2, r0
 8001aca:	693b      	ldr	r3, [r7, #16]
 8001acc:	1ad3      	subs	r3, r2, r3
 8001ace:	2b64      	cmp	r3, #100	@ 0x64
 8001ad0:	d901      	bls.n	8001ad6 <HAL_RCC_OscConfig+0x116>
          {
            return HAL_TIMEOUT;
 8001ad2:	2303      	movs	r3, #3
 8001ad4:	e20b      	b.n	8001eee <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001ad6:	4b57      	ldr	r3, [pc, #348]	@ (8001c34 <HAL_RCC_OscConfig+0x274>)
 8001ad8:	681b      	ldr	r3, [r3, #0]
 8001ada:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001ade:	2b00      	cmp	r3, #0
 8001ae0:	d1f0      	bne.n	8001ac4 <HAL_RCC_OscConfig+0x104>
 8001ae2:	e000      	b.n	8001ae6 <HAL_RCC_OscConfig+0x126>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001ae4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001ae6:	687b      	ldr	r3, [r7, #4]
 8001ae8:	681b      	ldr	r3, [r3, #0]
 8001aea:	f003 0302 	and.w	r3, r3, #2
 8001aee:	2b00      	cmp	r3, #0
 8001af0:	d06f      	beq.n	8001bd2 <HAL_RCC_OscConfig+0x212>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
#if defined(STM32F446xx)
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 8001af2:	4b50      	ldr	r3, [pc, #320]	@ (8001c34 <HAL_RCC_OscConfig+0x274>)
 8001af4:	689b      	ldr	r3, [r3, #8]
 8001af6:	f003 030c 	and.w	r3, r3, #12
 8001afa:	2b00      	cmp	r3, #0
 8001afc:	d017      	beq.n	8001b2e <HAL_RCC_OscConfig+0x16e>
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) || \
 8001afe:	4b4d      	ldr	r3, [pc, #308]	@ (8001c34 <HAL_RCC_OscConfig+0x274>)
 8001b00:	689b      	ldr	r3, [r3, #8]
 8001b02:	f003 030c 	and.w	r3, r3, #12
        || \
 8001b06:	2b08      	cmp	r3, #8
 8001b08:	d105      	bne.n	8001b16 <HAL_RCC_OscConfig+0x156>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) || \
 8001b0a:	4b4a      	ldr	r3, [pc, #296]	@ (8001c34 <HAL_RCC_OscConfig+0x274>)
 8001b0c:	685b      	ldr	r3, [r3, #4]
 8001b0e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8001b12:	2b00      	cmp	r3, #0
 8001b14:	d00b      	beq.n	8001b2e <HAL_RCC_OscConfig+0x16e>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001b16:	4b47      	ldr	r3, [pc, #284]	@ (8001c34 <HAL_RCC_OscConfig+0x274>)
 8001b18:	689b      	ldr	r3, [r3, #8]
 8001b1a:	f003 030c 	and.w	r3, r3, #12
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) || \
 8001b1e:	2b0c      	cmp	r3, #12
 8001b20:	d11c      	bne.n	8001b5c <HAL_RCC_OscConfig+0x19c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001b22:	4b44      	ldr	r3, [pc, #272]	@ (8001c34 <HAL_RCC_OscConfig+0x274>)
 8001b24:	685b      	ldr	r3, [r3, #4]
 8001b26:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8001b2a:	2b00      	cmp	r3, #0
 8001b2c:	d116      	bne.n	8001b5c <HAL_RCC_OscConfig+0x19c>
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
#endif /* STM32F446xx */
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001b2e:	4b41      	ldr	r3, [pc, #260]	@ (8001c34 <HAL_RCC_OscConfig+0x274>)
 8001b30:	681b      	ldr	r3, [r3, #0]
 8001b32:	f003 0302 	and.w	r3, r3, #2
 8001b36:	2b00      	cmp	r3, #0
 8001b38:	d005      	beq.n	8001b46 <HAL_RCC_OscConfig+0x186>
 8001b3a:	687b      	ldr	r3, [r7, #4]
 8001b3c:	68db      	ldr	r3, [r3, #12]
 8001b3e:	2b01      	cmp	r3, #1
 8001b40:	d001      	beq.n	8001b46 <HAL_RCC_OscConfig+0x186>
      {
        return HAL_ERROR;
 8001b42:	2301      	movs	r3, #1
 8001b44:	e1d3      	b.n	8001eee <HAL_RCC_OscConfig+0x52e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001b46:	4b3b      	ldr	r3, [pc, #236]	@ (8001c34 <HAL_RCC_OscConfig+0x274>)
 8001b48:	681b      	ldr	r3, [r3, #0]
 8001b4a:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8001b4e:	687b      	ldr	r3, [r7, #4]
 8001b50:	691b      	ldr	r3, [r3, #16]
 8001b52:	00db      	lsls	r3, r3, #3
 8001b54:	4937      	ldr	r1, [pc, #220]	@ (8001c34 <HAL_RCC_OscConfig+0x274>)
 8001b56:	4313      	orrs	r3, r2
 8001b58:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001b5a:	e03a      	b.n	8001bd2 <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8001b5c:	687b      	ldr	r3, [r7, #4]
 8001b5e:	68db      	ldr	r3, [r3, #12]
 8001b60:	2b00      	cmp	r3, #0
 8001b62:	d020      	beq.n	8001ba6 <HAL_RCC_OscConfig+0x1e6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001b64:	4b34      	ldr	r3, [pc, #208]	@ (8001c38 <HAL_RCC_OscConfig+0x278>)
 8001b66:	2201      	movs	r2, #1
 8001b68:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001b6a:	f7ff f8f9 	bl	8000d60 <HAL_GetTick>
 8001b6e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001b70:	e008      	b.n	8001b84 <HAL_RCC_OscConfig+0x1c4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001b72:	f7ff f8f5 	bl	8000d60 <HAL_GetTick>
 8001b76:	4602      	mov	r2, r0
 8001b78:	693b      	ldr	r3, [r7, #16]
 8001b7a:	1ad3      	subs	r3, r2, r3
 8001b7c:	2b02      	cmp	r3, #2
 8001b7e:	d901      	bls.n	8001b84 <HAL_RCC_OscConfig+0x1c4>
          {
            return HAL_TIMEOUT;
 8001b80:	2303      	movs	r3, #3
 8001b82:	e1b4      	b.n	8001eee <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001b84:	4b2b      	ldr	r3, [pc, #172]	@ (8001c34 <HAL_RCC_OscConfig+0x274>)
 8001b86:	681b      	ldr	r3, [r3, #0]
 8001b88:	f003 0302 	and.w	r3, r3, #2
 8001b8c:	2b00      	cmp	r3, #0
 8001b8e:	d0f0      	beq.n	8001b72 <HAL_RCC_OscConfig+0x1b2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001b90:	4b28      	ldr	r3, [pc, #160]	@ (8001c34 <HAL_RCC_OscConfig+0x274>)
 8001b92:	681b      	ldr	r3, [r3, #0]
 8001b94:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8001b98:	687b      	ldr	r3, [r7, #4]
 8001b9a:	691b      	ldr	r3, [r3, #16]
 8001b9c:	00db      	lsls	r3, r3, #3
 8001b9e:	4925      	ldr	r1, [pc, #148]	@ (8001c34 <HAL_RCC_OscConfig+0x274>)
 8001ba0:	4313      	orrs	r3, r2
 8001ba2:	600b      	str	r3, [r1, #0]
 8001ba4:	e015      	b.n	8001bd2 <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001ba6:	4b24      	ldr	r3, [pc, #144]	@ (8001c38 <HAL_RCC_OscConfig+0x278>)
 8001ba8:	2200      	movs	r2, #0
 8001baa:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001bac:	f7ff f8d8 	bl	8000d60 <HAL_GetTick>
 8001bb0:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001bb2:	e008      	b.n	8001bc6 <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001bb4:	f7ff f8d4 	bl	8000d60 <HAL_GetTick>
 8001bb8:	4602      	mov	r2, r0
 8001bba:	693b      	ldr	r3, [r7, #16]
 8001bbc:	1ad3      	subs	r3, r2, r3
 8001bbe:	2b02      	cmp	r3, #2
 8001bc0:	d901      	bls.n	8001bc6 <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 8001bc2:	2303      	movs	r3, #3
 8001bc4:	e193      	b.n	8001eee <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001bc6:	4b1b      	ldr	r3, [pc, #108]	@ (8001c34 <HAL_RCC_OscConfig+0x274>)
 8001bc8:	681b      	ldr	r3, [r3, #0]
 8001bca:	f003 0302 	and.w	r3, r3, #2
 8001bce:	2b00      	cmp	r3, #0
 8001bd0:	d1f0      	bne.n	8001bb4 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001bd2:	687b      	ldr	r3, [r7, #4]
 8001bd4:	681b      	ldr	r3, [r3, #0]
 8001bd6:	f003 0308 	and.w	r3, r3, #8
 8001bda:	2b00      	cmp	r3, #0
 8001bdc:	d036      	beq.n	8001c4c <HAL_RCC_OscConfig+0x28c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8001bde:	687b      	ldr	r3, [r7, #4]
 8001be0:	695b      	ldr	r3, [r3, #20]
 8001be2:	2b00      	cmp	r3, #0
 8001be4:	d016      	beq.n	8001c14 <HAL_RCC_OscConfig+0x254>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001be6:	4b15      	ldr	r3, [pc, #84]	@ (8001c3c <HAL_RCC_OscConfig+0x27c>)
 8001be8:	2201      	movs	r2, #1
 8001bea:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001bec:	f7ff f8b8 	bl	8000d60 <HAL_GetTick>
 8001bf0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001bf2:	e008      	b.n	8001c06 <HAL_RCC_OscConfig+0x246>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001bf4:	f7ff f8b4 	bl	8000d60 <HAL_GetTick>
 8001bf8:	4602      	mov	r2, r0
 8001bfa:	693b      	ldr	r3, [r7, #16]
 8001bfc:	1ad3      	subs	r3, r2, r3
 8001bfe:	2b02      	cmp	r3, #2
 8001c00:	d901      	bls.n	8001c06 <HAL_RCC_OscConfig+0x246>
        {
          return HAL_TIMEOUT;
 8001c02:	2303      	movs	r3, #3
 8001c04:	e173      	b.n	8001eee <HAL_RCC_OscConfig+0x52e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001c06:	4b0b      	ldr	r3, [pc, #44]	@ (8001c34 <HAL_RCC_OscConfig+0x274>)
 8001c08:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8001c0a:	f003 0302 	and.w	r3, r3, #2
 8001c0e:	2b00      	cmp	r3, #0
 8001c10:	d0f0      	beq.n	8001bf4 <HAL_RCC_OscConfig+0x234>
 8001c12:	e01b      	b.n	8001c4c <HAL_RCC_OscConfig+0x28c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001c14:	4b09      	ldr	r3, [pc, #36]	@ (8001c3c <HAL_RCC_OscConfig+0x27c>)
 8001c16:	2200      	movs	r2, #0
 8001c18:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001c1a:	f7ff f8a1 	bl	8000d60 <HAL_GetTick>
 8001c1e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001c20:	e00e      	b.n	8001c40 <HAL_RCC_OscConfig+0x280>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001c22:	f7ff f89d 	bl	8000d60 <HAL_GetTick>
 8001c26:	4602      	mov	r2, r0
 8001c28:	693b      	ldr	r3, [r7, #16]
 8001c2a:	1ad3      	subs	r3, r2, r3
 8001c2c:	2b02      	cmp	r3, #2
 8001c2e:	d907      	bls.n	8001c40 <HAL_RCC_OscConfig+0x280>
        {
          return HAL_TIMEOUT;
 8001c30:	2303      	movs	r3, #3
 8001c32:	e15c      	b.n	8001eee <HAL_RCC_OscConfig+0x52e>
 8001c34:	40023800 	.word	0x40023800
 8001c38:	42470000 	.word	0x42470000
 8001c3c:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001c40:	4b8a      	ldr	r3, [pc, #552]	@ (8001e6c <HAL_RCC_OscConfig+0x4ac>)
 8001c42:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8001c44:	f003 0302 	and.w	r3, r3, #2
 8001c48:	2b00      	cmp	r3, #0
 8001c4a:	d1ea      	bne.n	8001c22 <HAL_RCC_OscConfig+0x262>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001c4c:	687b      	ldr	r3, [r7, #4]
 8001c4e:	681b      	ldr	r3, [r3, #0]
 8001c50:	f003 0304 	and.w	r3, r3, #4
 8001c54:	2b00      	cmp	r3, #0
 8001c56:	f000 8097 	beq.w	8001d88 <HAL_RCC_OscConfig+0x3c8>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001c5a:	2300      	movs	r3, #0
 8001c5c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001c5e:	4b83      	ldr	r3, [pc, #524]	@ (8001e6c <HAL_RCC_OscConfig+0x4ac>)
 8001c60:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001c62:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001c66:	2b00      	cmp	r3, #0
 8001c68:	d10f      	bne.n	8001c8a <HAL_RCC_OscConfig+0x2ca>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001c6a:	2300      	movs	r3, #0
 8001c6c:	60bb      	str	r3, [r7, #8]
 8001c6e:	4b7f      	ldr	r3, [pc, #508]	@ (8001e6c <HAL_RCC_OscConfig+0x4ac>)
 8001c70:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001c72:	4a7e      	ldr	r2, [pc, #504]	@ (8001e6c <HAL_RCC_OscConfig+0x4ac>)
 8001c74:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001c78:	6413      	str	r3, [r2, #64]	@ 0x40
 8001c7a:	4b7c      	ldr	r3, [pc, #496]	@ (8001e6c <HAL_RCC_OscConfig+0x4ac>)
 8001c7c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001c7e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001c82:	60bb      	str	r3, [r7, #8]
 8001c84:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001c86:	2301      	movs	r3, #1
 8001c88:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001c8a:	4b79      	ldr	r3, [pc, #484]	@ (8001e70 <HAL_RCC_OscConfig+0x4b0>)
 8001c8c:	681b      	ldr	r3, [r3, #0]
 8001c8e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001c92:	2b00      	cmp	r3, #0
 8001c94:	d118      	bne.n	8001cc8 <HAL_RCC_OscConfig+0x308>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001c96:	4b76      	ldr	r3, [pc, #472]	@ (8001e70 <HAL_RCC_OscConfig+0x4b0>)
 8001c98:	681b      	ldr	r3, [r3, #0]
 8001c9a:	4a75      	ldr	r2, [pc, #468]	@ (8001e70 <HAL_RCC_OscConfig+0x4b0>)
 8001c9c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001ca0:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001ca2:	f7ff f85d 	bl	8000d60 <HAL_GetTick>
 8001ca6:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001ca8:	e008      	b.n	8001cbc <HAL_RCC_OscConfig+0x2fc>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001caa:	f7ff f859 	bl	8000d60 <HAL_GetTick>
 8001cae:	4602      	mov	r2, r0
 8001cb0:	693b      	ldr	r3, [r7, #16]
 8001cb2:	1ad3      	subs	r3, r2, r3
 8001cb4:	2b02      	cmp	r3, #2
 8001cb6:	d901      	bls.n	8001cbc <HAL_RCC_OscConfig+0x2fc>
        {
          return HAL_TIMEOUT;
 8001cb8:	2303      	movs	r3, #3
 8001cba:	e118      	b.n	8001eee <HAL_RCC_OscConfig+0x52e>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001cbc:	4b6c      	ldr	r3, [pc, #432]	@ (8001e70 <HAL_RCC_OscConfig+0x4b0>)
 8001cbe:	681b      	ldr	r3, [r3, #0]
 8001cc0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001cc4:	2b00      	cmp	r3, #0
 8001cc6:	d0f0      	beq.n	8001caa <HAL_RCC_OscConfig+0x2ea>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001cc8:	687b      	ldr	r3, [r7, #4]
 8001cca:	689b      	ldr	r3, [r3, #8]
 8001ccc:	2b01      	cmp	r3, #1
 8001cce:	d106      	bne.n	8001cde <HAL_RCC_OscConfig+0x31e>
 8001cd0:	4b66      	ldr	r3, [pc, #408]	@ (8001e6c <HAL_RCC_OscConfig+0x4ac>)
 8001cd2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001cd4:	4a65      	ldr	r2, [pc, #404]	@ (8001e6c <HAL_RCC_OscConfig+0x4ac>)
 8001cd6:	f043 0301 	orr.w	r3, r3, #1
 8001cda:	6713      	str	r3, [r2, #112]	@ 0x70
 8001cdc:	e01c      	b.n	8001d18 <HAL_RCC_OscConfig+0x358>
 8001cde:	687b      	ldr	r3, [r7, #4]
 8001ce0:	689b      	ldr	r3, [r3, #8]
 8001ce2:	2b05      	cmp	r3, #5
 8001ce4:	d10c      	bne.n	8001d00 <HAL_RCC_OscConfig+0x340>
 8001ce6:	4b61      	ldr	r3, [pc, #388]	@ (8001e6c <HAL_RCC_OscConfig+0x4ac>)
 8001ce8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001cea:	4a60      	ldr	r2, [pc, #384]	@ (8001e6c <HAL_RCC_OscConfig+0x4ac>)
 8001cec:	f043 0304 	orr.w	r3, r3, #4
 8001cf0:	6713      	str	r3, [r2, #112]	@ 0x70
 8001cf2:	4b5e      	ldr	r3, [pc, #376]	@ (8001e6c <HAL_RCC_OscConfig+0x4ac>)
 8001cf4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001cf6:	4a5d      	ldr	r2, [pc, #372]	@ (8001e6c <HAL_RCC_OscConfig+0x4ac>)
 8001cf8:	f043 0301 	orr.w	r3, r3, #1
 8001cfc:	6713      	str	r3, [r2, #112]	@ 0x70
 8001cfe:	e00b      	b.n	8001d18 <HAL_RCC_OscConfig+0x358>
 8001d00:	4b5a      	ldr	r3, [pc, #360]	@ (8001e6c <HAL_RCC_OscConfig+0x4ac>)
 8001d02:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001d04:	4a59      	ldr	r2, [pc, #356]	@ (8001e6c <HAL_RCC_OscConfig+0x4ac>)
 8001d06:	f023 0301 	bic.w	r3, r3, #1
 8001d0a:	6713      	str	r3, [r2, #112]	@ 0x70
 8001d0c:	4b57      	ldr	r3, [pc, #348]	@ (8001e6c <HAL_RCC_OscConfig+0x4ac>)
 8001d0e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001d10:	4a56      	ldr	r2, [pc, #344]	@ (8001e6c <HAL_RCC_OscConfig+0x4ac>)
 8001d12:	f023 0304 	bic.w	r3, r3, #4
 8001d16:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8001d18:	687b      	ldr	r3, [r7, #4]
 8001d1a:	689b      	ldr	r3, [r3, #8]
 8001d1c:	2b00      	cmp	r3, #0
 8001d1e:	d015      	beq.n	8001d4c <HAL_RCC_OscConfig+0x38c>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001d20:	f7ff f81e 	bl	8000d60 <HAL_GetTick>
 8001d24:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001d26:	e00a      	b.n	8001d3e <HAL_RCC_OscConfig+0x37e>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001d28:	f7ff f81a 	bl	8000d60 <HAL_GetTick>
 8001d2c:	4602      	mov	r2, r0
 8001d2e:	693b      	ldr	r3, [r7, #16]
 8001d30:	1ad3      	subs	r3, r2, r3
 8001d32:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001d36:	4293      	cmp	r3, r2
 8001d38:	d901      	bls.n	8001d3e <HAL_RCC_OscConfig+0x37e>
        {
          return HAL_TIMEOUT;
 8001d3a:	2303      	movs	r3, #3
 8001d3c:	e0d7      	b.n	8001eee <HAL_RCC_OscConfig+0x52e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001d3e:	4b4b      	ldr	r3, [pc, #300]	@ (8001e6c <HAL_RCC_OscConfig+0x4ac>)
 8001d40:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001d42:	f003 0302 	and.w	r3, r3, #2
 8001d46:	2b00      	cmp	r3, #0
 8001d48:	d0ee      	beq.n	8001d28 <HAL_RCC_OscConfig+0x368>
 8001d4a:	e014      	b.n	8001d76 <HAL_RCC_OscConfig+0x3b6>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001d4c:	f7ff f808 	bl	8000d60 <HAL_GetTick>
 8001d50:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001d52:	e00a      	b.n	8001d6a <HAL_RCC_OscConfig+0x3aa>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001d54:	f7ff f804 	bl	8000d60 <HAL_GetTick>
 8001d58:	4602      	mov	r2, r0
 8001d5a:	693b      	ldr	r3, [r7, #16]
 8001d5c:	1ad3      	subs	r3, r2, r3
 8001d5e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001d62:	4293      	cmp	r3, r2
 8001d64:	d901      	bls.n	8001d6a <HAL_RCC_OscConfig+0x3aa>
        {
          return HAL_TIMEOUT;
 8001d66:	2303      	movs	r3, #3
 8001d68:	e0c1      	b.n	8001eee <HAL_RCC_OscConfig+0x52e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001d6a:	4b40      	ldr	r3, [pc, #256]	@ (8001e6c <HAL_RCC_OscConfig+0x4ac>)
 8001d6c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001d6e:	f003 0302 	and.w	r3, r3, #2
 8001d72:	2b00      	cmp	r3, #0
 8001d74:	d1ee      	bne.n	8001d54 <HAL_RCC_OscConfig+0x394>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8001d76:	7dfb      	ldrb	r3, [r7, #23]
 8001d78:	2b01      	cmp	r3, #1
 8001d7a:	d105      	bne.n	8001d88 <HAL_RCC_OscConfig+0x3c8>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001d7c:	4b3b      	ldr	r3, [pc, #236]	@ (8001e6c <HAL_RCC_OscConfig+0x4ac>)
 8001d7e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001d80:	4a3a      	ldr	r2, [pc, #232]	@ (8001e6c <HAL_RCC_OscConfig+0x4ac>)
 8001d82:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8001d86:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001d88:	687b      	ldr	r3, [r7, #4]
 8001d8a:	699b      	ldr	r3, [r3, #24]
 8001d8c:	2b00      	cmp	r3, #0
 8001d8e:	f000 80ad 	beq.w	8001eec <HAL_RCC_OscConfig+0x52c>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8001d92:	4b36      	ldr	r3, [pc, #216]	@ (8001e6c <HAL_RCC_OscConfig+0x4ac>)
 8001d94:	689b      	ldr	r3, [r3, #8]
 8001d96:	f003 030c 	and.w	r3, r3, #12
 8001d9a:	2b08      	cmp	r3, #8
 8001d9c:	d060      	beq.n	8001e60 <HAL_RCC_OscConfig+0x4a0>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001d9e:	687b      	ldr	r3, [r7, #4]
 8001da0:	699b      	ldr	r3, [r3, #24]
 8001da2:	2b02      	cmp	r3, #2
 8001da4:	d145      	bne.n	8001e32 <HAL_RCC_OscConfig+0x472>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001da6:	4b33      	ldr	r3, [pc, #204]	@ (8001e74 <HAL_RCC_OscConfig+0x4b4>)
 8001da8:	2200      	movs	r2, #0
 8001daa:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001dac:	f7fe ffd8 	bl	8000d60 <HAL_GetTick>
 8001db0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001db2:	e008      	b.n	8001dc6 <HAL_RCC_OscConfig+0x406>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001db4:	f7fe ffd4 	bl	8000d60 <HAL_GetTick>
 8001db8:	4602      	mov	r2, r0
 8001dba:	693b      	ldr	r3, [r7, #16]
 8001dbc:	1ad3      	subs	r3, r2, r3
 8001dbe:	2b02      	cmp	r3, #2
 8001dc0:	d901      	bls.n	8001dc6 <HAL_RCC_OscConfig+0x406>
          {
            return HAL_TIMEOUT;
 8001dc2:	2303      	movs	r3, #3
 8001dc4:	e093      	b.n	8001eee <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001dc6:	4b29      	ldr	r3, [pc, #164]	@ (8001e6c <HAL_RCC_OscConfig+0x4ac>)
 8001dc8:	681b      	ldr	r3, [r3, #0]
 8001dca:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001dce:	2b00      	cmp	r3, #0
 8001dd0:	d1f0      	bne.n	8001db4 <HAL_RCC_OscConfig+0x3f4>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8001dd2:	687b      	ldr	r3, [r7, #4]
 8001dd4:	69da      	ldr	r2, [r3, #28]
 8001dd6:	687b      	ldr	r3, [r7, #4]
 8001dd8:	6a1b      	ldr	r3, [r3, #32]
 8001dda:	431a      	orrs	r2, r3
 8001ddc:	687b      	ldr	r3, [r7, #4]
 8001dde:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001de0:	019b      	lsls	r3, r3, #6
 8001de2:	431a      	orrs	r2, r3
 8001de4:	687b      	ldr	r3, [r7, #4]
 8001de6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001de8:	085b      	lsrs	r3, r3, #1
 8001dea:	3b01      	subs	r3, #1
 8001dec:	041b      	lsls	r3, r3, #16
 8001dee:	431a      	orrs	r2, r3
 8001df0:	687b      	ldr	r3, [r7, #4]
 8001df2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001df4:	061b      	lsls	r3, r3, #24
 8001df6:	431a      	orrs	r2, r3
 8001df8:	687b      	ldr	r3, [r7, #4]
 8001dfa:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001dfc:	071b      	lsls	r3, r3, #28
 8001dfe:	491b      	ldr	r1, [pc, #108]	@ (8001e6c <HAL_RCC_OscConfig+0x4ac>)
 8001e00:	4313      	orrs	r3, r2
 8001e02:	604b      	str	r3, [r1, #4]
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)                       | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)        | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)                       | \
                                 (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001e04:	4b1b      	ldr	r3, [pc, #108]	@ (8001e74 <HAL_RCC_OscConfig+0x4b4>)
 8001e06:	2201      	movs	r2, #1
 8001e08:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001e0a:	f7fe ffa9 	bl	8000d60 <HAL_GetTick>
 8001e0e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001e10:	e008      	b.n	8001e24 <HAL_RCC_OscConfig+0x464>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001e12:	f7fe ffa5 	bl	8000d60 <HAL_GetTick>
 8001e16:	4602      	mov	r2, r0
 8001e18:	693b      	ldr	r3, [r7, #16]
 8001e1a:	1ad3      	subs	r3, r2, r3
 8001e1c:	2b02      	cmp	r3, #2
 8001e1e:	d901      	bls.n	8001e24 <HAL_RCC_OscConfig+0x464>
          {
            return HAL_TIMEOUT;
 8001e20:	2303      	movs	r3, #3
 8001e22:	e064      	b.n	8001eee <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001e24:	4b11      	ldr	r3, [pc, #68]	@ (8001e6c <HAL_RCC_OscConfig+0x4ac>)
 8001e26:	681b      	ldr	r3, [r3, #0]
 8001e28:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001e2c:	2b00      	cmp	r3, #0
 8001e2e:	d0f0      	beq.n	8001e12 <HAL_RCC_OscConfig+0x452>
 8001e30:	e05c      	b.n	8001eec <HAL_RCC_OscConfig+0x52c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001e32:	4b10      	ldr	r3, [pc, #64]	@ (8001e74 <HAL_RCC_OscConfig+0x4b4>)
 8001e34:	2200      	movs	r2, #0
 8001e36:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001e38:	f7fe ff92 	bl	8000d60 <HAL_GetTick>
 8001e3c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001e3e:	e008      	b.n	8001e52 <HAL_RCC_OscConfig+0x492>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001e40:	f7fe ff8e 	bl	8000d60 <HAL_GetTick>
 8001e44:	4602      	mov	r2, r0
 8001e46:	693b      	ldr	r3, [r7, #16]
 8001e48:	1ad3      	subs	r3, r2, r3
 8001e4a:	2b02      	cmp	r3, #2
 8001e4c:	d901      	bls.n	8001e52 <HAL_RCC_OscConfig+0x492>
          {
            return HAL_TIMEOUT;
 8001e4e:	2303      	movs	r3, #3
 8001e50:	e04d      	b.n	8001eee <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001e52:	4b06      	ldr	r3, [pc, #24]	@ (8001e6c <HAL_RCC_OscConfig+0x4ac>)
 8001e54:	681b      	ldr	r3, [r3, #0]
 8001e56:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001e5a:	2b00      	cmp	r3, #0
 8001e5c:	d1f0      	bne.n	8001e40 <HAL_RCC_OscConfig+0x480>
 8001e5e:	e045      	b.n	8001eec <HAL_RCC_OscConfig+0x52c>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001e60:	687b      	ldr	r3, [r7, #4]
 8001e62:	699b      	ldr	r3, [r3, #24]
 8001e64:	2b01      	cmp	r3, #1
 8001e66:	d107      	bne.n	8001e78 <HAL_RCC_OscConfig+0x4b8>
      {
        return HAL_ERROR;
 8001e68:	2301      	movs	r3, #1
 8001e6a:	e040      	b.n	8001eee <HAL_RCC_OscConfig+0x52e>
 8001e6c:	40023800 	.word	0x40023800
 8001e70:	40007000 	.word	0x40007000
 8001e74:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8001e78:	4b1f      	ldr	r3, [pc, #124]	@ (8001ef8 <HAL_RCC_OscConfig+0x538>)
 8001e7a:	685b      	ldr	r3, [r3, #4]
 8001e7c:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001e7e:	687b      	ldr	r3, [r7, #4]
 8001e80:	699b      	ldr	r3, [r3, #24]
 8001e82:	2b01      	cmp	r3, #1
 8001e84:	d030      	beq.n	8001ee8 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001e86:	68fb      	ldr	r3, [r7, #12]
 8001e88:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8001e8c:	687b      	ldr	r3, [r7, #4]
 8001e8e:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001e90:	429a      	cmp	r2, r3
 8001e92:	d129      	bne.n	8001ee8 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8001e94:	68fb      	ldr	r3, [r7, #12]
 8001e96:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8001e9a:	687b      	ldr	r3, [r7, #4]
 8001e9c:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001e9e:	429a      	cmp	r2, r3
 8001ea0:	d122      	bne.n	8001ee8 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8001ea2:	68fa      	ldr	r2, [r7, #12]
 8001ea4:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8001ea8:	4013      	ands	r3, r2
 8001eaa:	687a      	ldr	r2, [r7, #4]
 8001eac:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8001eae:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8001eb0:	4293      	cmp	r3, r2
 8001eb2:	d119      	bne.n	8001ee8 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8001eb4:	68fb      	ldr	r3, [r7, #12]
 8001eb6:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 8001eba:	687b      	ldr	r3, [r7, #4]
 8001ebc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001ebe:	085b      	lsrs	r3, r3, #1
 8001ec0:	3b01      	subs	r3, #1
 8001ec2:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8001ec4:	429a      	cmp	r2, r3
 8001ec6:	d10f      	bne.n	8001ee8 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8001ec8:	68fb      	ldr	r3, [r7, #12]
 8001eca:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 8001ece:	687b      	ldr	r3, [r7, #4]
 8001ed0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001ed2:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8001ed4:	429a      	cmp	r2, r3
 8001ed6:	d107      	bne.n	8001ee8 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 8001ed8:	68fb      	ldr	r3, [r7, #12]
 8001eda:	f003 42e0 	and.w	r2, r3, #1879048192	@ 0x70000000
 8001ede:	687b      	ldr	r3, [r7, #4]
 8001ee0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001ee2:	071b      	lsls	r3, r3, #28
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8001ee4:	429a      	cmp	r2, r3
 8001ee6:	d001      	beq.n	8001eec <HAL_RCC_OscConfig+0x52c>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 8001ee8:	2301      	movs	r3, #1
 8001eea:	e000      	b.n	8001eee <HAL_RCC_OscConfig+0x52e>
        }
      }
    }
  }
  return HAL_OK;
 8001eec:	2300      	movs	r3, #0
}
 8001eee:	4618      	mov	r0, r3
 8001ef0:	3718      	adds	r7, #24
 8001ef2:	46bd      	mov	sp, r7
 8001ef4:	bd80      	pop	{r7, pc}
 8001ef6:	bf00      	nop
 8001ef8:	40023800 	.word	0x40023800

08001efc <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8001efc:	b580      	push	{r7, lr}
 8001efe:	b082      	sub	sp, #8
 8001f00:	af00      	add	r7, sp, #0
 8001f02:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8001f04:	687b      	ldr	r3, [r7, #4]
 8001f06:	2b00      	cmp	r3, #0
 8001f08:	d101      	bne.n	8001f0e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8001f0a:	2301      	movs	r3, #1
 8001f0c:	e041      	b.n	8001f92 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8001f0e:	687b      	ldr	r3, [r7, #4]
 8001f10:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8001f14:	b2db      	uxtb	r3, r3
 8001f16:	2b00      	cmp	r3, #0
 8001f18:	d106      	bne.n	8001f28 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8001f1a:	687b      	ldr	r3, [r7, #4]
 8001f1c:	2200      	movs	r2, #0
 8001f1e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8001f22:	6878      	ldr	r0, [r7, #4]
 8001f24:	f7fe fd64 	bl	80009f0 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001f28:	687b      	ldr	r3, [r7, #4]
 8001f2a:	2202      	movs	r2, #2
 8001f2c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8001f30:	687b      	ldr	r3, [r7, #4]
 8001f32:	681a      	ldr	r2, [r3, #0]
 8001f34:	687b      	ldr	r3, [r7, #4]
 8001f36:	3304      	adds	r3, #4
 8001f38:	4619      	mov	r1, r3
 8001f3a:	4610      	mov	r0, r2
 8001f3c:	f000 fa7e 	bl	800243c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8001f40:	687b      	ldr	r3, [r7, #4]
 8001f42:	2201      	movs	r2, #1
 8001f44:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001f48:	687b      	ldr	r3, [r7, #4]
 8001f4a:	2201      	movs	r2, #1
 8001f4c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8001f50:	687b      	ldr	r3, [r7, #4]
 8001f52:	2201      	movs	r2, #1
 8001f54:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8001f58:	687b      	ldr	r3, [r7, #4]
 8001f5a:	2201      	movs	r2, #1
 8001f5c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8001f60:	687b      	ldr	r3, [r7, #4]
 8001f62:	2201      	movs	r2, #1
 8001f64:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001f68:	687b      	ldr	r3, [r7, #4]
 8001f6a:	2201      	movs	r2, #1
 8001f6c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8001f70:	687b      	ldr	r3, [r7, #4]
 8001f72:	2201      	movs	r2, #1
 8001f74:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8001f78:	687b      	ldr	r3, [r7, #4]
 8001f7a:	2201      	movs	r2, #1
 8001f7c:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8001f80:	687b      	ldr	r3, [r7, #4]
 8001f82:	2201      	movs	r2, #1
 8001f84:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8001f88:	687b      	ldr	r3, [r7, #4]
 8001f8a:	2201      	movs	r2, #1
 8001f8c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8001f90:	2300      	movs	r3, #0
}
 8001f92:	4618      	mov	r0, r3
 8001f94:	3708      	adds	r7, #8
 8001f96:	46bd      	mov	sp, r7
 8001f98:	bd80      	pop	{r7, pc}
	...

08001f9c <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8001f9c:	b480      	push	{r7}
 8001f9e:	b085      	sub	sp, #20
 8001fa0:	af00      	add	r7, sp, #0
 8001fa2:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8001fa4:	687b      	ldr	r3, [r7, #4]
 8001fa6:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8001faa:	b2db      	uxtb	r3, r3
 8001fac:	2b01      	cmp	r3, #1
 8001fae:	d001      	beq.n	8001fb4 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8001fb0:	2301      	movs	r3, #1
 8001fb2:	e04e      	b.n	8002052 <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001fb4:	687b      	ldr	r3, [r7, #4]
 8001fb6:	2202      	movs	r2, #2
 8001fb8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8001fbc:	687b      	ldr	r3, [r7, #4]
 8001fbe:	681b      	ldr	r3, [r3, #0]
 8001fc0:	68da      	ldr	r2, [r3, #12]
 8001fc2:	687b      	ldr	r3, [r7, #4]
 8001fc4:	681b      	ldr	r3, [r3, #0]
 8001fc6:	f042 0201 	orr.w	r2, r2, #1
 8001fca:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8001fcc:	687b      	ldr	r3, [r7, #4]
 8001fce:	681b      	ldr	r3, [r3, #0]
 8001fd0:	4a23      	ldr	r2, [pc, #140]	@ (8002060 <HAL_TIM_Base_Start_IT+0xc4>)
 8001fd2:	4293      	cmp	r3, r2
 8001fd4:	d022      	beq.n	800201c <HAL_TIM_Base_Start_IT+0x80>
 8001fd6:	687b      	ldr	r3, [r7, #4]
 8001fd8:	681b      	ldr	r3, [r3, #0]
 8001fda:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8001fde:	d01d      	beq.n	800201c <HAL_TIM_Base_Start_IT+0x80>
 8001fe0:	687b      	ldr	r3, [r7, #4]
 8001fe2:	681b      	ldr	r3, [r3, #0]
 8001fe4:	4a1f      	ldr	r2, [pc, #124]	@ (8002064 <HAL_TIM_Base_Start_IT+0xc8>)
 8001fe6:	4293      	cmp	r3, r2
 8001fe8:	d018      	beq.n	800201c <HAL_TIM_Base_Start_IT+0x80>
 8001fea:	687b      	ldr	r3, [r7, #4]
 8001fec:	681b      	ldr	r3, [r3, #0]
 8001fee:	4a1e      	ldr	r2, [pc, #120]	@ (8002068 <HAL_TIM_Base_Start_IT+0xcc>)
 8001ff0:	4293      	cmp	r3, r2
 8001ff2:	d013      	beq.n	800201c <HAL_TIM_Base_Start_IT+0x80>
 8001ff4:	687b      	ldr	r3, [r7, #4]
 8001ff6:	681b      	ldr	r3, [r3, #0]
 8001ff8:	4a1c      	ldr	r2, [pc, #112]	@ (800206c <HAL_TIM_Base_Start_IT+0xd0>)
 8001ffa:	4293      	cmp	r3, r2
 8001ffc:	d00e      	beq.n	800201c <HAL_TIM_Base_Start_IT+0x80>
 8001ffe:	687b      	ldr	r3, [r7, #4]
 8002000:	681b      	ldr	r3, [r3, #0]
 8002002:	4a1b      	ldr	r2, [pc, #108]	@ (8002070 <HAL_TIM_Base_Start_IT+0xd4>)
 8002004:	4293      	cmp	r3, r2
 8002006:	d009      	beq.n	800201c <HAL_TIM_Base_Start_IT+0x80>
 8002008:	687b      	ldr	r3, [r7, #4]
 800200a:	681b      	ldr	r3, [r3, #0]
 800200c:	4a19      	ldr	r2, [pc, #100]	@ (8002074 <HAL_TIM_Base_Start_IT+0xd8>)
 800200e:	4293      	cmp	r3, r2
 8002010:	d004      	beq.n	800201c <HAL_TIM_Base_Start_IT+0x80>
 8002012:	687b      	ldr	r3, [r7, #4]
 8002014:	681b      	ldr	r3, [r3, #0]
 8002016:	4a18      	ldr	r2, [pc, #96]	@ (8002078 <HAL_TIM_Base_Start_IT+0xdc>)
 8002018:	4293      	cmp	r3, r2
 800201a:	d111      	bne.n	8002040 <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800201c:	687b      	ldr	r3, [r7, #4]
 800201e:	681b      	ldr	r3, [r3, #0]
 8002020:	689b      	ldr	r3, [r3, #8]
 8002022:	f003 0307 	and.w	r3, r3, #7
 8002026:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002028:	68fb      	ldr	r3, [r7, #12]
 800202a:	2b06      	cmp	r3, #6
 800202c:	d010      	beq.n	8002050 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 800202e:	687b      	ldr	r3, [r7, #4]
 8002030:	681b      	ldr	r3, [r3, #0]
 8002032:	681a      	ldr	r2, [r3, #0]
 8002034:	687b      	ldr	r3, [r7, #4]
 8002036:	681b      	ldr	r3, [r3, #0]
 8002038:	f042 0201 	orr.w	r2, r2, #1
 800203c:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800203e:	e007      	b.n	8002050 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8002040:	687b      	ldr	r3, [r7, #4]
 8002042:	681b      	ldr	r3, [r3, #0]
 8002044:	681a      	ldr	r2, [r3, #0]
 8002046:	687b      	ldr	r3, [r7, #4]
 8002048:	681b      	ldr	r3, [r3, #0]
 800204a:	f042 0201 	orr.w	r2, r2, #1
 800204e:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8002050:	2300      	movs	r3, #0
}
 8002052:	4618      	mov	r0, r3
 8002054:	3714      	adds	r7, #20
 8002056:	46bd      	mov	sp, r7
 8002058:	f85d 7b04 	ldr.w	r7, [sp], #4
 800205c:	4770      	bx	lr
 800205e:	bf00      	nop
 8002060:	40010000 	.word	0x40010000
 8002064:	40000400 	.word	0x40000400
 8002068:	40000800 	.word	0x40000800
 800206c:	40000c00 	.word	0x40000c00
 8002070:	40010400 	.word	0x40010400
 8002074:	40014000 	.word	0x40014000
 8002078:	40001800 	.word	0x40001800

0800207c <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800207c:	b580      	push	{r7, lr}
 800207e:	b084      	sub	sp, #16
 8002080:	af00      	add	r7, sp, #0
 8002082:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8002084:	687b      	ldr	r3, [r7, #4]
 8002086:	681b      	ldr	r3, [r3, #0]
 8002088:	68db      	ldr	r3, [r3, #12]
 800208a:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 800208c:	687b      	ldr	r3, [r7, #4]
 800208e:	681b      	ldr	r3, [r3, #0]
 8002090:	691b      	ldr	r3, [r3, #16]
 8002092:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8002094:	68bb      	ldr	r3, [r7, #8]
 8002096:	f003 0302 	and.w	r3, r3, #2
 800209a:	2b00      	cmp	r3, #0
 800209c:	d020      	beq.n	80020e0 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 800209e:	68fb      	ldr	r3, [r7, #12]
 80020a0:	f003 0302 	and.w	r3, r3, #2
 80020a4:	2b00      	cmp	r3, #0
 80020a6:	d01b      	beq.n	80020e0 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 80020a8:	687b      	ldr	r3, [r7, #4]
 80020aa:	681b      	ldr	r3, [r3, #0]
 80020ac:	f06f 0202 	mvn.w	r2, #2
 80020b0:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80020b2:	687b      	ldr	r3, [r7, #4]
 80020b4:	2201      	movs	r2, #1
 80020b6:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80020b8:	687b      	ldr	r3, [r7, #4]
 80020ba:	681b      	ldr	r3, [r3, #0]
 80020bc:	699b      	ldr	r3, [r3, #24]
 80020be:	f003 0303 	and.w	r3, r3, #3
 80020c2:	2b00      	cmp	r3, #0
 80020c4:	d003      	beq.n	80020ce <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80020c6:	6878      	ldr	r0, [r7, #4]
 80020c8:	f000 f999 	bl	80023fe <HAL_TIM_IC_CaptureCallback>
 80020cc:	e005      	b.n	80020da <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80020ce:	6878      	ldr	r0, [r7, #4]
 80020d0:	f000 f98b 	bl	80023ea <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80020d4:	6878      	ldr	r0, [r7, #4]
 80020d6:	f000 f99c 	bl	8002412 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80020da:	687b      	ldr	r3, [r7, #4]
 80020dc:	2200      	movs	r2, #0
 80020de:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 80020e0:	68bb      	ldr	r3, [r7, #8]
 80020e2:	f003 0304 	and.w	r3, r3, #4
 80020e6:	2b00      	cmp	r3, #0
 80020e8:	d020      	beq.n	800212c <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 80020ea:	68fb      	ldr	r3, [r7, #12]
 80020ec:	f003 0304 	and.w	r3, r3, #4
 80020f0:	2b00      	cmp	r3, #0
 80020f2:	d01b      	beq.n	800212c <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 80020f4:	687b      	ldr	r3, [r7, #4]
 80020f6:	681b      	ldr	r3, [r3, #0]
 80020f8:	f06f 0204 	mvn.w	r2, #4
 80020fc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80020fe:	687b      	ldr	r3, [r7, #4]
 8002100:	2202      	movs	r2, #2
 8002102:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8002104:	687b      	ldr	r3, [r7, #4]
 8002106:	681b      	ldr	r3, [r3, #0]
 8002108:	699b      	ldr	r3, [r3, #24]
 800210a:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800210e:	2b00      	cmp	r3, #0
 8002110:	d003      	beq.n	800211a <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002112:	6878      	ldr	r0, [r7, #4]
 8002114:	f000 f973 	bl	80023fe <HAL_TIM_IC_CaptureCallback>
 8002118:	e005      	b.n	8002126 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800211a:	6878      	ldr	r0, [r7, #4]
 800211c:	f000 f965 	bl	80023ea <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002120:	6878      	ldr	r0, [r7, #4]
 8002122:	f000 f976 	bl	8002412 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002126:	687b      	ldr	r3, [r7, #4]
 8002128:	2200      	movs	r2, #0
 800212a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 800212c:	68bb      	ldr	r3, [r7, #8]
 800212e:	f003 0308 	and.w	r3, r3, #8
 8002132:	2b00      	cmp	r3, #0
 8002134:	d020      	beq.n	8002178 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8002136:	68fb      	ldr	r3, [r7, #12]
 8002138:	f003 0308 	and.w	r3, r3, #8
 800213c:	2b00      	cmp	r3, #0
 800213e:	d01b      	beq.n	8002178 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8002140:	687b      	ldr	r3, [r7, #4]
 8002142:	681b      	ldr	r3, [r3, #0]
 8002144:	f06f 0208 	mvn.w	r2, #8
 8002148:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800214a:	687b      	ldr	r3, [r7, #4]
 800214c:	2204      	movs	r2, #4
 800214e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8002150:	687b      	ldr	r3, [r7, #4]
 8002152:	681b      	ldr	r3, [r3, #0]
 8002154:	69db      	ldr	r3, [r3, #28]
 8002156:	f003 0303 	and.w	r3, r3, #3
 800215a:	2b00      	cmp	r3, #0
 800215c:	d003      	beq.n	8002166 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800215e:	6878      	ldr	r0, [r7, #4]
 8002160:	f000 f94d 	bl	80023fe <HAL_TIM_IC_CaptureCallback>
 8002164:	e005      	b.n	8002172 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002166:	6878      	ldr	r0, [r7, #4]
 8002168:	f000 f93f 	bl	80023ea <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800216c:	6878      	ldr	r0, [r7, #4]
 800216e:	f000 f950 	bl	8002412 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002172:	687b      	ldr	r3, [r7, #4]
 8002174:	2200      	movs	r2, #0
 8002176:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8002178:	68bb      	ldr	r3, [r7, #8]
 800217a:	f003 0310 	and.w	r3, r3, #16
 800217e:	2b00      	cmp	r3, #0
 8002180:	d020      	beq.n	80021c4 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8002182:	68fb      	ldr	r3, [r7, #12]
 8002184:	f003 0310 	and.w	r3, r3, #16
 8002188:	2b00      	cmp	r3, #0
 800218a:	d01b      	beq.n	80021c4 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 800218c:	687b      	ldr	r3, [r7, #4]
 800218e:	681b      	ldr	r3, [r3, #0]
 8002190:	f06f 0210 	mvn.w	r2, #16
 8002194:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8002196:	687b      	ldr	r3, [r7, #4]
 8002198:	2208      	movs	r2, #8
 800219a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800219c:	687b      	ldr	r3, [r7, #4]
 800219e:	681b      	ldr	r3, [r3, #0]
 80021a0:	69db      	ldr	r3, [r3, #28]
 80021a2:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80021a6:	2b00      	cmp	r3, #0
 80021a8:	d003      	beq.n	80021b2 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80021aa:	6878      	ldr	r0, [r7, #4]
 80021ac:	f000 f927 	bl	80023fe <HAL_TIM_IC_CaptureCallback>
 80021b0:	e005      	b.n	80021be <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80021b2:	6878      	ldr	r0, [r7, #4]
 80021b4:	f000 f919 	bl	80023ea <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80021b8:	6878      	ldr	r0, [r7, #4]
 80021ba:	f000 f92a 	bl	8002412 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80021be:	687b      	ldr	r3, [r7, #4]
 80021c0:	2200      	movs	r2, #0
 80021c2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 80021c4:	68bb      	ldr	r3, [r7, #8]
 80021c6:	f003 0301 	and.w	r3, r3, #1
 80021ca:	2b00      	cmp	r3, #0
 80021cc:	d00c      	beq.n	80021e8 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 80021ce:	68fb      	ldr	r3, [r7, #12]
 80021d0:	f003 0301 	and.w	r3, r3, #1
 80021d4:	2b00      	cmp	r3, #0
 80021d6:	d007      	beq.n	80021e8 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 80021d8:	687b      	ldr	r3, [r7, #4]
 80021da:	681b      	ldr	r3, [r3, #0]
 80021dc:	f06f 0201 	mvn.w	r2, #1
 80021e0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80021e2:	6878      	ldr	r0, [r7, #4]
 80021e4:	f7fe fbc0 	bl	8000968 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 80021e8:	68bb      	ldr	r3, [r7, #8]
 80021ea:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80021ee:	2b00      	cmp	r3, #0
 80021f0:	d00c      	beq.n	800220c <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 80021f2:	68fb      	ldr	r3, [r7, #12]
 80021f4:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80021f8:	2b00      	cmp	r3, #0
 80021fa:	d007      	beq.n	800220c <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 80021fc:	687b      	ldr	r3, [r7, #4]
 80021fe:	681b      	ldr	r3, [r3, #0]
 8002200:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 8002204:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8002206:	6878      	ldr	r0, [r7, #4]
 8002208:	f000 fade 	bl	80027c8 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 800220c:	68bb      	ldr	r3, [r7, #8]
 800220e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002212:	2b00      	cmp	r3, #0
 8002214:	d00c      	beq.n	8002230 <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8002216:	68fb      	ldr	r3, [r7, #12]
 8002218:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800221c:	2b00      	cmp	r3, #0
 800221e:	d007      	beq.n	8002230 <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8002220:	687b      	ldr	r3, [r7, #4]
 8002222:	681b      	ldr	r3, [r3, #0]
 8002224:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8002228:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800222a:	6878      	ldr	r0, [r7, #4]
 800222c:	f000 f8fb 	bl	8002426 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8002230:	68bb      	ldr	r3, [r7, #8]
 8002232:	f003 0320 	and.w	r3, r3, #32
 8002236:	2b00      	cmp	r3, #0
 8002238:	d00c      	beq.n	8002254 <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 800223a:	68fb      	ldr	r3, [r7, #12]
 800223c:	f003 0320 	and.w	r3, r3, #32
 8002240:	2b00      	cmp	r3, #0
 8002242:	d007      	beq.n	8002254 <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8002244:	687b      	ldr	r3, [r7, #4]
 8002246:	681b      	ldr	r3, [r3, #0]
 8002248:	f06f 0220 	mvn.w	r2, #32
 800224c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800224e:	6878      	ldr	r0, [r7, #4]
 8002250:	f000 fab0 	bl	80027b4 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8002254:	bf00      	nop
 8002256:	3710      	adds	r7, #16
 8002258:	46bd      	mov	sp, r7
 800225a:	bd80      	pop	{r7, pc}

0800225c <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800225c:	b580      	push	{r7, lr}
 800225e:	b084      	sub	sp, #16
 8002260:	af00      	add	r7, sp, #0
 8002262:	6078      	str	r0, [r7, #4]
 8002264:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8002266:	2300      	movs	r3, #0
 8002268:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800226a:	687b      	ldr	r3, [r7, #4]
 800226c:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8002270:	2b01      	cmp	r3, #1
 8002272:	d101      	bne.n	8002278 <HAL_TIM_ConfigClockSource+0x1c>
 8002274:	2302      	movs	r3, #2
 8002276:	e0b4      	b.n	80023e2 <HAL_TIM_ConfigClockSource+0x186>
 8002278:	687b      	ldr	r3, [r7, #4]
 800227a:	2201      	movs	r2, #1
 800227c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8002280:	687b      	ldr	r3, [r7, #4]
 8002282:	2202      	movs	r2, #2
 8002284:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8002288:	687b      	ldr	r3, [r7, #4]
 800228a:	681b      	ldr	r3, [r3, #0]
 800228c:	689b      	ldr	r3, [r3, #8]
 800228e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8002290:	68bb      	ldr	r3, [r7, #8]
 8002292:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 8002296:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002298:	68bb      	ldr	r3, [r7, #8]
 800229a:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 800229e:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 80022a0:	687b      	ldr	r3, [r7, #4]
 80022a2:	681b      	ldr	r3, [r3, #0]
 80022a4:	68ba      	ldr	r2, [r7, #8]
 80022a6:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80022a8:	683b      	ldr	r3, [r7, #0]
 80022aa:	681b      	ldr	r3, [r3, #0]
 80022ac:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80022b0:	d03e      	beq.n	8002330 <HAL_TIM_ConfigClockSource+0xd4>
 80022b2:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80022b6:	f200 8087 	bhi.w	80023c8 <HAL_TIM_ConfigClockSource+0x16c>
 80022ba:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80022be:	f000 8086 	beq.w	80023ce <HAL_TIM_ConfigClockSource+0x172>
 80022c2:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80022c6:	d87f      	bhi.n	80023c8 <HAL_TIM_ConfigClockSource+0x16c>
 80022c8:	2b70      	cmp	r3, #112	@ 0x70
 80022ca:	d01a      	beq.n	8002302 <HAL_TIM_ConfigClockSource+0xa6>
 80022cc:	2b70      	cmp	r3, #112	@ 0x70
 80022ce:	d87b      	bhi.n	80023c8 <HAL_TIM_ConfigClockSource+0x16c>
 80022d0:	2b60      	cmp	r3, #96	@ 0x60
 80022d2:	d050      	beq.n	8002376 <HAL_TIM_ConfigClockSource+0x11a>
 80022d4:	2b60      	cmp	r3, #96	@ 0x60
 80022d6:	d877      	bhi.n	80023c8 <HAL_TIM_ConfigClockSource+0x16c>
 80022d8:	2b50      	cmp	r3, #80	@ 0x50
 80022da:	d03c      	beq.n	8002356 <HAL_TIM_ConfigClockSource+0xfa>
 80022dc:	2b50      	cmp	r3, #80	@ 0x50
 80022de:	d873      	bhi.n	80023c8 <HAL_TIM_ConfigClockSource+0x16c>
 80022e0:	2b40      	cmp	r3, #64	@ 0x40
 80022e2:	d058      	beq.n	8002396 <HAL_TIM_ConfigClockSource+0x13a>
 80022e4:	2b40      	cmp	r3, #64	@ 0x40
 80022e6:	d86f      	bhi.n	80023c8 <HAL_TIM_ConfigClockSource+0x16c>
 80022e8:	2b30      	cmp	r3, #48	@ 0x30
 80022ea:	d064      	beq.n	80023b6 <HAL_TIM_ConfigClockSource+0x15a>
 80022ec:	2b30      	cmp	r3, #48	@ 0x30
 80022ee:	d86b      	bhi.n	80023c8 <HAL_TIM_ConfigClockSource+0x16c>
 80022f0:	2b20      	cmp	r3, #32
 80022f2:	d060      	beq.n	80023b6 <HAL_TIM_ConfigClockSource+0x15a>
 80022f4:	2b20      	cmp	r3, #32
 80022f6:	d867      	bhi.n	80023c8 <HAL_TIM_ConfigClockSource+0x16c>
 80022f8:	2b00      	cmp	r3, #0
 80022fa:	d05c      	beq.n	80023b6 <HAL_TIM_ConfigClockSource+0x15a>
 80022fc:	2b10      	cmp	r3, #16
 80022fe:	d05a      	beq.n	80023b6 <HAL_TIM_ConfigClockSource+0x15a>
 8002300:	e062      	b.n	80023c8 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8002302:	687b      	ldr	r3, [r7, #4]
 8002304:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8002306:	683b      	ldr	r3, [r7, #0]
 8002308:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800230a:	683b      	ldr	r3, [r7, #0]
 800230c:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800230e:	683b      	ldr	r3, [r7, #0]
 8002310:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8002312:	f000 f9b3 	bl	800267c <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8002316:	687b      	ldr	r3, [r7, #4]
 8002318:	681b      	ldr	r3, [r3, #0]
 800231a:	689b      	ldr	r3, [r3, #8]
 800231c:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800231e:	68bb      	ldr	r3, [r7, #8]
 8002320:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 8002324:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8002326:	687b      	ldr	r3, [r7, #4]
 8002328:	681b      	ldr	r3, [r3, #0]
 800232a:	68ba      	ldr	r2, [r7, #8]
 800232c:	609a      	str	r2, [r3, #8]
      break;
 800232e:	e04f      	b.n	80023d0 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8002330:	687b      	ldr	r3, [r7, #4]
 8002332:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8002334:	683b      	ldr	r3, [r7, #0]
 8002336:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8002338:	683b      	ldr	r3, [r7, #0]
 800233a:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800233c:	683b      	ldr	r3, [r7, #0]
 800233e:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8002340:	f000 f99c 	bl	800267c <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8002344:	687b      	ldr	r3, [r7, #4]
 8002346:	681b      	ldr	r3, [r3, #0]
 8002348:	689a      	ldr	r2, [r3, #8]
 800234a:	687b      	ldr	r3, [r7, #4]
 800234c:	681b      	ldr	r3, [r3, #0]
 800234e:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8002352:	609a      	str	r2, [r3, #8]
      break;
 8002354:	e03c      	b.n	80023d0 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8002356:	687b      	ldr	r3, [r7, #4]
 8002358:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800235a:	683b      	ldr	r3, [r7, #0]
 800235c:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800235e:	683b      	ldr	r3, [r7, #0]
 8002360:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8002362:	461a      	mov	r2, r3
 8002364:	f000 f910 	bl	8002588 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8002368:	687b      	ldr	r3, [r7, #4]
 800236a:	681b      	ldr	r3, [r3, #0]
 800236c:	2150      	movs	r1, #80	@ 0x50
 800236e:	4618      	mov	r0, r3
 8002370:	f000 f969 	bl	8002646 <TIM_ITRx_SetConfig>
      break;
 8002374:	e02c      	b.n	80023d0 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8002376:	687b      	ldr	r3, [r7, #4]
 8002378:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800237a:	683b      	ldr	r3, [r7, #0]
 800237c:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800237e:	683b      	ldr	r3, [r7, #0]
 8002380:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8002382:	461a      	mov	r2, r3
 8002384:	f000 f92f 	bl	80025e6 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8002388:	687b      	ldr	r3, [r7, #4]
 800238a:	681b      	ldr	r3, [r3, #0]
 800238c:	2160      	movs	r1, #96	@ 0x60
 800238e:	4618      	mov	r0, r3
 8002390:	f000 f959 	bl	8002646 <TIM_ITRx_SetConfig>
      break;
 8002394:	e01c      	b.n	80023d0 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8002396:	687b      	ldr	r3, [r7, #4]
 8002398:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800239a:	683b      	ldr	r3, [r7, #0]
 800239c:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800239e:	683b      	ldr	r3, [r7, #0]
 80023a0:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 80023a2:	461a      	mov	r2, r3
 80023a4:	f000 f8f0 	bl	8002588 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80023a8:	687b      	ldr	r3, [r7, #4]
 80023aa:	681b      	ldr	r3, [r3, #0]
 80023ac:	2140      	movs	r1, #64	@ 0x40
 80023ae:	4618      	mov	r0, r3
 80023b0:	f000 f949 	bl	8002646 <TIM_ITRx_SetConfig>
      break;
 80023b4:	e00c      	b.n	80023d0 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80023b6:	687b      	ldr	r3, [r7, #4]
 80023b8:	681a      	ldr	r2, [r3, #0]
 80023ba:	683b      	ldr	r3, [r7, #0]
 80023bc:	681b      	ldr	r3, [r3, #0]
 80023be:	4619      	mov	r1, r3
 80023c0:	4610      	mov	r0, r2
 80023c2:	f000 f940 	bl	8002646 <TIM_ITRx_SetConfig>
      break;
 80023c6:	e003      	b.n	80023d0 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 80023c8:	2301      	movs	r3, #1
 80023ca:	73fb      	strb	r3, [r7, #15]
      break;
 80023cc:	e000      	b.n	80023d0 <HAL_TIM_ConfigClockSource+0x174>
      break;
 80023ce:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80023d0:	687b      	ldr	r3, [r7, #4]
 80023d2:	2201      	movs	r2, #1
 80023d4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 80023d8:	687b      	ldr	r3, [r7, #4]
 80023da:	2200      	movs	r2, #0
 80023dc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 80023e0:	7bfb      	ldrb	r3, [r7, #15]
}
 80023e2:	4618      	mov	r0, r3
 80023e4:	3710      	adds	r7, #16
 80023e6:	46bd      	mov	sp, r7
 80023e8:	bd80      	pop	{r7, pc}

080023ea <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80023ea:	b480      	push	{r7}
 80023ec:	b083      	sub	sp, #12
 80023ee:	af00      	add	r7, sp, #0
 80023f0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80023f2:	bf00      	nop
 80023f4:	370c      	adds	r7, #12
 80023f6:	46bd      	mov	sp, r7
 80023f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023fc:	4770      	bx	lr

080023fe <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80023fe:	b480      	push	{r7}
 8002400:	b083      	sub	sp, #12
 8002402:	af00      	add	r7, sp, #0
 8002404:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8002406:	bf00      	nop
 8002408:	370c      	adds	r7, #12
 800240a:	46bd      	mov	sp, r7
 800240c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002410:	4770      	bx	lr

08002412 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8002412:	b480      	push	{r7}
 8002414:	b083      	sub	sp, #12
 8002416:	af00      	add	r7, sp, #0
 8002418:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800241a:	bf00      	nop
 800241c:	370c      	adds	r7, #12
 800241e:	46bd      	mov	sp, r7
 8002420:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002424:	4770      	bx	lr

08002426 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8002426:	b480      	push	{r7}
 8002428:	b083      	sub	sp, #12
 800242a:	af00      	add	r7, sp, #0
 800242c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800242e:	bf00      	nop
 8002430:	370c      	adds	r7, #12
 8002432:	46bd      	mov	sp, r7
 8002434:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002438:	4770      	bx	lr
	...

0800243c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 800243c:	b480      	push	{r7}
 800243e:	b085      	sub	sp, #20
 8002440:	af00      	add	r7, sp, #0
 8002442:	6078      	str	r0, [r7, #4]
 8002444:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8002446:	687b      	ldr	r3, [r7, #4]
 8002448:	681b      	ldr	r3, [r3, #0]
 800244a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800244c:	687b      	ldr	r3, [r7, #4]
 800244e:	4a43      	ldr	r2, [pc, #268]	@ (800255c <TIM_Base_SetConfig+0x120>)
 8002450:	4293      	cmp	r3, r2
 8002452:	d013      	beq.n	800247c <TIM_Base_SetConfig+0x40>
 8002454:	687b      	ldr	r3, [r7, #4]
 8002456:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800245a:	d00f      	beq.n	800247c <TIM_Base_SetConfig+0x40>
 800245c:	687b      	ldr	r3, [r7, #4]
 800245e:	4a40      	ldr	r2, [pc, #256]	@ (8002560 <TIM_Base_SetConfig+0x124>)
 8002460:	4293      	cmp	r3, r2
 8002462:	d00b      	beq.n	800247c <TIM_Base_SetConfig+0x40>
 8002464:	687b      	ldr	r3, [r7, #4]
 8002466:	4a3f      	ldr	r2, [pc, #252]	@ (8002564 <TIM_Base_SetConfig+0x128>)
 8002468:	4293      	cmp	r3, r2
 800246a:	d007      	beq.n	800247c <TIM_Base_SetConfig+0x40>
 800246c:	687b      	ldr	r3, [r7, #4]
 800246e:	4a3e      	ldr	r2, [pc, #248]	@ (8002568 <TIM_Base_SetConfig+0x12c>)
 8002470:	4293      	cmp	r3, r2
 8002472:	d003      	beq.n	800247c <TIM_Base_SetConfig+0x40>
 8002474:	687b      	ldr	r3, [r7, #4]
 8002476:	4a3d      	ldr	r2, [pc, #244]	@ (800256c <TIM_Base_SetConfig+0x130>)
 8002478:	4293      	cmp	r3, r2
 800247a:	d108      	bne.n	800248e <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800247c:	68fb      	ldr	r3, [r7, #12]
 800247e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8002482:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8002484:	683b      	ldr	r3, [r7, #0]
 8002486:	685b      	ldr	r3, [r3, #4]
 8002488:	68fa      	ldr	r2, [r7, #12]
 800248a:	4313      	orrs	r3, r2
 800248c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800248e:	687b      	ldr	r3, [r7, #4]
 8002490:	4a32      	ldr	r2, [pc, #200]	@ (800255c <TIM_Base_SetConfig+0x120>)
 8002492:	4293      	cmp	r3, r2
 8002494:	d02b      	beq.n	80024ee <TIM_Base_SetConfig+0xb2>
 8002496:	687b      	ldr	r3, [r7, #4]
 8002498:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800249c:	d027      	beq.n	80024ee <TIM_Base_SetConfig+0xb2>
 800249e:	687b      	ldr	r3, [r7, #4]
 80024a0:	4a2f      	ldr	r2, [pc, #188]	@ (8002560 <TIM_Base_SetConfig+0x124>)
 80024a2:	4293      	cmp	r3, r2
 80024a4:	d023      	beq.n	80024ee <TIM_Base_SetConfig+0xb2>
 80024a6:	687b      	ldr	r3, [r7, #4]
 80024a8:	4a2e      	ldr	r2, [pc, #184]	@ (8002564 <TIM_Base_SetConfig+0x128>)
 80024aa:	4293      	cmp	r3, r2
 80024ac:	d01f      	beq.n	80024ee <TIM_Base_SetConfig+0xb2>
 80024ae:	687b      	ldr	r3, [r7, #4]
 80024b0:	4a2d      	ldr	r2, [pc, #180]	@ (8002568 <TIM_Base_SetConfig+0x12c>)
 80024b2:	4293      	cmp	r3, r2
 80024b4:	d01b      	beq.n	80024ee <TIM_Base_SetConfig+0xb2>
 80024b6:	687b      	ldr	r3, [r7, #4]
 80024b8:	4a2c      	ldr	r2, [pc, #176]	@ (800256c <TIM_Base_SetConfig+0x130>)
 80024ba:	4293      	cmp	r3, r2
 80024bc:	d017      	beq.n	80024ee <TIM_Base_SetConfig+0xb2>
 80024be:	687b      	ldr	r3, [r7, #4]
 80024c0:	4a2b      	ldr	r2, [pc, #172]	@ (8002570 <TIM_Base_SetConfig+0x134>)
 80024c2:	4293      	cmp	r3, r2
 80024c4:	d013      	beq.n	80024ee <TIM_Base_SetConfig+0xb2>
 80024c6:	687b      	ldr	r3, [r7, #4]
 80024c8:	4a2a      	ldr	r2, [pc, #168]	@ (8002574 <TIM_Base_SetConfig+0x138>)
 80024ca:	4293      	cmp	r3, r2
 80024cc:	d00f      	beq.n	80024ee <TIM_Base_SetConfig+0xb2>
 80024ce:	687b      	ldr	r3, [r7, #4]
 80024d0:	4a29      	ldr	r2, [pc, #164]	@ (8002578 <TIM_Base_SetConfig+0x13c>)
 80024d2:	4293      	cmp	r3, r2
 80024d4:	d00b      	beq.n	80024ee <TIM_Base_SetConfig+0xb2>
 80024d6:	687b      	ldr	r3, [r7, #4]
 80024d8:	4a28      	ldr	r2, [pc, #160]	@ (800257c <TIM_Base_SetConfig+0x140>)
 80024da:	4293      	cmp	r3, r2
 80024dc:	d007      	beq.n	80024ee <TIM_Base_SetConfig+0xb2>
 80024de:	687b      	ldr	r3, [r7, #4]
 80024e0:	4a27      	ldr	r2, [pc, #156]	@ (8002580 <TIM_Base_SetConfig+0x144>)
 80024e2:	4293      	cmp	r3, r2
 80024e4:	d003      	beq.n	80024ee <TIM_Base_SetConfig+0xb2>
 80024e6:	687b      	ldr	r3, [r7, #4]
 80024e8:	4a26      	ldr	r2, [pc, #152]	@ (8002584 <TIM_Base_SetConfig+0x148>)
 80024ea:	4293      	cmp	r3, r2
 80024ec:	d108      	bne.n	8002500 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80024ee:	68fb      	ldr	r3, [r7, #12]
 80024f0:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80024f4:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80024f6:	683b      	ldr	r3, [r7, #0]
 80024f8:	68db      	ldr	r3, [r3, #12]
 80024fa:	68fa      	ldr	r2, [r7, #12]
 80024fc:	4313      	orrs	r3, r2
 80024fe:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8002500:	68fb      	ldr	r3, [r7, #12]
 8002502:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8002506:	683b      	ldr	r3, [r7, #0]
 8002508:	695b      	ldr	r3, [r3, #20]
 800250a:	4313      	orrs	r3, r2
 800250c:	60fb      	str	r3, [r7, #12]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800250e:	683b      	ldr	r3, [r7, #0]
 8002510:	689a      	ldr	r2, [r3, #8]
 8002512:	687b      	ldr	r3, [r7, #4]
 8002514:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8002516:	683b      	ldr	r3, [r7, #0]
 8002518:	681a      	ldr	r2, [r3, #0]
 800251a:	687b      	ldr	r3, [r7, #4]
 800251c:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800251e:	687b      	ldr	r3, [r7, #4]
 8002520:	4a0e      	ldr	r2, [pc, #56]	@ (800255c <TIM_Base_SetConfig+0x120>)
 8002522:	4293      	cmp	r3, r2
 8002524:	d003      	beq.n	800252e <TIM_Base_SetConfig+0xf2>
 8002526:	687b      	ldr	r3, [r7, #4]
 8002528:	4a10      	ldr	r2, [pc, #64]	@ (800256c <TIM_Base_SetConfig+0x130>)
 800252a:	4293      	cmp	r3, r2
 800252c:	d103      	bne.n	8002536 <TIM_Base_SetConfig+0xfa>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800252e:	683b      	ldr	r3, [r7, #0]
 8002530:	691a      	ldr	r2, [r3, #16]
 8002532:	687b      	ldr	r3, [r7, #4]
 8002534:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Disable Update Event (UEV) with Update Generation (UG)
     by changing Update Request Source (URS) to avoid Update flag (UIF) */
  SET_BIT(TIMx->CR1, TIM_CR1_URS);
 8002536:	687b      	ldr	r3, [r7, #4]
 8002538:	681b      	ldr	r3, [r3, #0]
 800253a:	f043 0204 	orr.w	r2, r3, #4
 800253e:	687b      	ldr	r3, [r7, #4]
 8002540:	601a      	str	r2, [r3, #0]

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8002542:	687b      	ldr	r3, [r7, #4]
 8002544:	2201      	movs	r2, #1
 8002546:	615a      	str	r2, [r3, #20]

  TIMx->CR1 = tmpcr1;
 8002548:	687b      	ldr	r3, [r7, #4]
 800254a:	68fa      	ldr	r2, [r7, #12]
 800254c:	601a      	str	r2, [r3, #0]
}
 800254e:	bf00      	nop
 8002550:	3714      	adds	r7, #20
 8002552:	46bd      	mov	sp, r7
 8002554:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002558:	4770      	bx	lr
 800255a:	bf00      	nop
 800255c:	40010000 	.word	0x40010000
 8002560:	40000400 	.word	0x40000400
 8002564:	40000800 	.word	0x40000800
 8002568:	40000c00 	.word	0x40000c00
 800256c:	40010400 	.word	0x40010400
 8002570:	40014000 	.word	0x40014000
 8002574:	40014400 	.word	0x40014400
 8002578:	40014800 	.word	0x40014800
 800257c:	40001800 	.word	0x40001800
 8002580:	40001c00 	.word	0x40001c00
 8002584:	40002000 	.word	0x40002000

08002588 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8002588:	b480      	push	{r7}
 800258a:	b087      	sub	sp, #28
 800258c:	af00      	add	r7, sp, #0
 800258e:	60f8      	str	r0, [r7, #12]
 8002590:	60b9      	str	r1, [r7, #8]
 8002592:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8002594:	68fb      	ldr	r3, [r7, #12]
 8002596:	6a1b      	ldr	r3, [r3, #32]
 8002598:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800259a:	68fb      	ldr	r3, [r7, #12]
 800259c:	6a1b      	ldr	r3, [r3, #32]
 800259e:	f023 0201 	bic.w	r2, r3, #1
 80025a2:	68fb      	ldr	r3, [r7, #12]
 80025a4:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80025a6:	68fb      	ldr	r3, [r7, #12]
 80025a8:	699b      	ldr	r3, [r3, #24]
 80025aa:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80025ac:	693b      	ldr	r3, [r7, #16]
 80025ae:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 80025b2:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80025b4:	687b      	ldr	r3, [r7, #4]
 80025b6:	011b      	lsls	r3, r3, #4
 80025b8:	693a      	ldr	r2, [r7, #16]
 80025ba:	4313      	orrs	r3, r2
 80025bc:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80025be:	697b      	ldr	r3, [r7, #20]
 80025c0:	f023 030a 	bic.w	r3, r3, #10
 80025c4:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80025c6:	697a      	ldr	r2, [r7, #20]
 80025c8:	68bb      	ldr	r3, [r7, #8]
 80025ca:	4313      	orrs	r3, r2
 80025cc:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80025ce:	68fb      	ldr	r3, [r7, #12]
 80025d0:	693a      	ldr	r2, [r7, #16]
 80025d2:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80025d4:	68fb      	ldr	r3, [r7, #12]
 80025d6:	697a      	ldr	r2, [r7, #20]
 80025d8:	621a      	str	r2, [r3, #32]
}
 80025da:	bf00      	nop
 80025dc:	371c      	adds	r7, #28
 80025de:	46bd      	mov	sp, r7
 80025e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025e4:	4770      	bx	lr

080025e6 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80025e6:	b480      	push	{r7}
 80025e8:	b087      	sub	sp, #28
 80025ea:	af00      	add	r7, sp, #0
 80025ec:	60f8      	str	r0, [r7, #12]
 80025ee:	60b9      	str	r1, [r7, #8]
 80025f0:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 80025f2:	68fb      	ldr	r3, [r7, #12]
 80025f4:	6a1b      	ldr	r3, [r3, #32]
 80025f6:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80025f8:	68fb      	ldr	r3, [r7, #12]
 80025fa:	6a1b      	ldr	r3, [r3, #32]
 80025fc:	f023 0210 	bic.w	r2, r3, #16
 8002600:	68fb      	ldr	r3, [r7, #12]
 8002602:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8002604:	68fb      	ldr	r3, [r7, #12]
 8002606:	699b      	ldr	r3, [r3, #24]
 8002608:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800260a:	693b      	ldr	r3, [r7, #16]
 800260c:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8002610:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8002612:	687b      	ldr	r3, [r7, #4]
 8002614:	031b      	lsls	r3, r3, #12
 8002616:	693a      	ldr	r2, [r7, #16]
 8002618:	4313      	orrs	r3, r2
 800261a:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800261c:	697b      	ldr	r3, [r7, #20]
 800261e:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 8002622:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8002624:	68bb      	ldr	r3, [r7, #8]
 8002626:	011b      	lsls	r3, r3, #4
 8002628:	697a      	ldr	r2, [r7, #20]
 800262a:	4313      	orrs	r3, r2
 800262c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800262e:	68fb      	ldr	r3, [r7, #12]
 8002630:	693a      	ldr	r2, [r7, #16]
 8002632:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8002634:	68fb      	ldr	r3, [r7, #12]
 8002636:	697a      	ldr	r2, [r7, #20]
 8002638:	621a      	str	r2, [r3, #32]
}
 800263a:	bf00      	nop
 800263c:	371c      	adds	r7, #28
 800263e:	46bd      	mov	sp, r7
 8002640:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002644:	4770      	bx	lr

08002646 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8002646:	b480      	push	{r7}
 8002648:	b085      	sub	sp, #20
 800264a:	af00      	add	r7, sp, #0
 800264c:	6078      	str	r0, [r7, #4]
 800264e:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8002650:	687b      	ldr	r3, [r7, #4]
 8002652:	689b      	ldr	r3, [r3, #8]
 8002654:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8002656:	68fb      	ldr	r3, [r7, #12]
 8002658:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800265c:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800265e:	683a      	ldr	r2, [r7, #0]
 8002660:	68fb      	ldr	r3, [r7, #12]
 8002662:	4313      	orrs	r3, r2
 8002664:	f043 0307 	orr.w	r3, r3, #7
 8002668:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800266a:	687b      	ldr	r3, [r7, #4]
 800266c:	68fa      	ldr	r2, [r7, #12]
 800266e:	609a      	str	r2, [r3, #8]
}
 8002670:	bf00      	nop
 8002672:	3714      	adds	r7, #20
 8002674:	46bd      	mov	sp, r7
 8002676:	f85d 7b04 	ldr.w	r7, [sp], #4
 800267a:	4770      	bx	lr

0800267c <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800267c:	b480      	push	{r7}
 800267e:	b087      	sub	sp, #28
 8002680:	af00      	add	r7, sp, #0
 8002682:	60f8      	str	r0, [r7, #12]
 8002684:	60b9      	str	r1, [r7, #8]
 8002686:	607a      	str	r2, [r7, #4]
 8002688:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800268a:	68fb      	ldr	r3, [r7, #12]
 800268c:	689b      	ldr	r3, [r3, #8]
 800268e:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002690:	697b      	ldr	r3, [r7, #20]
 8002692:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8002696:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8002698:	683b      	ldr	r3, [r7, #0]
 800269a:	021a      	lsls	r2, r3, #8
 800269c:	687b      	ldr	r3, [r7, #4]
 800269e:	431a      	orrs	r2, r3
 80026a0:	68bb      	ldr	r3, [r7, #8]
 80026a2:	4313      	orrs	r3, r2
 80026a4:	697a      	ldr	r2, [r7, #20]
 80026a6:	4313      	orrs	r3, r2
 80026a8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80026aa:	68fb      	ldr	r3, [r7, #12]
 80026ac:	697a      	ldr	r2, [r7, #20]
 80026ae:	609a      	str	r2, [r3, #8]
}
 80026b0:	bf00      	nop
 80026b2:	371c      	adds	r7, #28
 80026b4:	46bd      	mov	sp, r7
 80026b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026ba:	4770      	bx	lr

080026bc <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 80026bc:	b480      	push	{r7}
 80026be:	b085      	sub	sp, #20
 80026c0:	af00      	add	r7, sp, #0
 80026c2:	6078      	str	r0, [r7, #4]
 80026c4:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80026c6:	687b      	ldr	r3, [r7, #4]
 80026c8:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80026cc:	2b01      	cmp	r3, #1
 80026ce:	d101      	bne.n	80026d4 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80026d0:	2302      	movs	r3, #2
 80026d2:	e05a      	b.n	800278a <HAL_TIMEx_MasterConfigSynchronization+0xce>
 80026d4:	687b      	ldr	r3, [r7, #4]
 80026d6:	2201      	movs	r2, #1
 80026d8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80026dc:	687b      	ldr	r3, [r7, #4]
 80026de:	2202      	movs	r2, #2
 80026e0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80026e4:	687b      	ldr	r3, [r7, #4]
 80026e6:	681b      	ldr	r3, [r3, #0]
 80026e8:	685b      	ldr	r3, [r3, #4]
 80026ea:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80026ec:	687b      	ldr	r3, [r7, #4]
 80026ee:	681b      	ldr	r3, [r3, #0]
 80026f0:	689b      	ldr	r3, [r3, #8]
 80026f2:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80026f4:	68fb      	ldr	r3, [r7, #12]
 80026f6:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80026fa:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80026fc:	683b      	ldr	r3, [r7, #0]
 80026fe:	681b      	ldr	r3, [r3, #0]
 8002700:	68fa      	ldr	r2, [r7, #12]
 8002702:	4313      	orrs	r3, r2
 8002704:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8002706:	687b      	ldr	r3, [r7, #4]
 8002708:	681b      	ldr	r3, [r3, #0]
 800270a:	68fa      	ldr	r2, [r7, #12]
 800270c:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800270e:	687b      	ldr	r3, [r7, #4]
 8002710:	681b      	ldr	r3, [r3, #0]
 8002712:	4a21      	ldr	r2, [pc, #132]	@ (8002798 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 8002714:	4293      	cmp	r3, r2
 8002716:	d022      	beq.n	800275e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8002718:	687b      	ldr	r3, [r7, #4]
 800271a:	681b      	ldr	r3, [r3, #0]
 800271c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002720:	d01d      	beq.n	800275e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8002722:	687b      	ldr	r3, [r7, #4]
 8002724:	681b      	ldr	r3, [r3, #0]
 8002726:	4a1d      	ldr	r2, [pc, #116]	@ (800279c <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 8002728:	4293      	cmp	r3, r2
 800272a:	d018      	beq.n	800275e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800272c:	687b      	ldr	r3, [r7, #4]
 800272e:	681b      	ldr	r3, [r3, #0]
 8002730:	4a1b      	ldr	r2, [pc, #108]	@ (80027a0 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 8002732:	4293      	cmp	r3, r2
 8002734:	d013      	beq.n	800275e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8002736:	687b      	ldr	r3, [r7, #4]
 8002738:	681b      	ldr	r3, [r3, #0]
 800273a:	4a1a      	ldr	r2, [pc, #104]	@ (80027a4 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 800273c:	4293      	cmp	r3, r2
 800273e:	d00e      	beq.n	800275e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8002740:	687b      	ldr	r3, [r7, #4]
 8002742:	681b      	ldr	r3, [r3, #0]
 8002744:	4a18      	ldr	r2, [pc, #96]	@ (80027a8 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 8002746:	4293      	cmp	r3, r2
 8002748:	d009      	beq.n	800275e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800274a:	687b      	ldr	r3, [r7, #4]
 800274c:	681b      	ldr	r3, [r3, #0]
 800274e:	4a17      	ldr	r2, [pc, #92]	@ (80027ac <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8002750:	4293      	cmp	r3, r2
 8002752:	d004      	beq.n	800275e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8002754:	687b      	ldr	r3, [r7, #4]
 8002756:	681b      	ldr	r3, [r3, #0]
 8002758:	4a15      	ldr	r2, [pc, #84]	@ (80027b0 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 800275a:	4293      	cmp	r3, r2
 800275c:	d10c      	bne.n	8002778 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800275e:	68bb      	ldr	r3, [r7, #8]
 8002760:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8002764:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8002766:	683b      	ldr	r3, [r7, #0]
 8002768:	685b      	ldr	r3, [r3, #4]
 800276a:	68ba      	ldr	r2, [r7, #8]
 800276c:	4313      	orrs	r3, r2
 800276e:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8002770:	687b      	ldr	r3, [r7, #4]
 8002772:	681b      	ldr	r3, [r3, #0]
 8002774:	68ba      	ldr	r2, [r7, #8]
 8002776:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8002778:	687b      	ldr	r3, [r7, #4]
 800277a:	2201      	movs	r2, #1
 800277c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8002780:	687b      	ldr	r3, [r7, #4]
 8002782:	2200      	movs	r2, #0
 8002784:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8002788:	2300      	movs	r3, #0
}
 800278a:	4618      	mov	r0, r3
 800278c:	3714      	adds	r7, #20
 800278e:	46bd      	mov	sp, r7
 8002790:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002794:	4770      	bx	lr
 8002796:	bf00      	nop
 8002798:	40010000 	.word	0x40010000
 800279c:	40000400 	.word	0x40000400
 80027a0:	40000800 	.word	0x40000800
 80027a4:	40000c00 	.word	0x40000c00
 80027a8:	40010400 	.word	0x40010400
 80027ac:	40014000 	.word	0x40014000
 80027b0:	40001800 	.word	0x40001800

080027b4 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80027b4:	b480      	push	{r7}
 80027b6:	b083      	sub	sp, #12
 80027b8:	af00      	add	r7, sp, #0
 80027ba:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80027bc:	bf00      	nop
 80027be:	370c      	adds	r7, #12
 80027c0:	46bd      	mov	sp, r7
 80027c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027c6:	4770      	bx	lr

080027c8 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80027c8:	b480      	push	{r7}
 80027ca:	b083      	sub	sp, #12
 80027cc:	af00      	add	r7, sp, #0
 80027ce:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80027d0:	bf00      	nop
 80027d2:	370c      	adds	r7, #12
 80027d4:	46bd      	mov	sp, r7
 80027d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027da:	4770      	bx	lr

080027dc <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80027dc:	b580      	push	{r7, lr}
 80027de:	b082      	sub	sp, #8
 80027e0:	af00      	add	r7, sp, #0
 80027e2:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80027e4:	687b      	ldr	r3, [r7, #4]
 80027e6:	2b00      	cmp	r3, #0
 80027e8:	d101      	bne.n	80027ee <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80027ea:	2301      	movs	r3, #1
 80027ec:	e042      	b.n	8002874 <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 80027ee:	687b      	ldr	r3, [r7, #4]
 80027f0:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80027f4:	b2db      	uxtb	r3, r3
 80027f6:	2b00      	cmp	r3, #0
 80027f8:	d106      	bne.n	8002808 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80027fa:	687b      	ldr	r3, [r7, #4]
 80027fc:	2200      	movs	r2, #0
 80027fe:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8002802:	6878      	ldr	r0, [r7, #4]
 8002804:	f7fe f91a 	bl	8000a3c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8002808:	687b      	ldr	r3, [r7, #4]
 800280a:	2224      	movs	r2, #36	@ 0x24
 800280c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8002810:	687b      	ldr	r3, [r7, #4]
 8002812:	681b      	ldr	r3, [r3, #0]
 8002814:	68da      	ldr	r2, [r3, #12]
 8002816:	687b      	ldr	r3, [r7, #4]
 8002818:	681b      	ldr	r3, [r3, #0]
 800281a:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 800281e:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8002820:	6878      	ldr	r0, [r7, #4]
 8002822:	f000 f82b 	bl	800287c <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8002826:	687b      	ldr	r3, [r7, #4]
 8002828:	681b      	ldr	r3, [r3, #0]
 800282a:	691a      	ldr	r2, [r3, #16]
 800282c:	687b      	ldr	r3, [r7, #4]
 800282e:	681b      	ldr	r3, [r3, #0]
 8002830:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8002834:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8002836:	687b      	ldr	r3, [r7, #4]
 8002838:	681b      	ldr	r3, [r3, #0]
 800283a:	695a      	ldr	r2, [r3, #20]
 800283c:	687b      	ldr	r3, [r7, #4]
 800283e:	681b      	ldr	r3, [r3, #0]
 8002840:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8002844:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8002846:	687b      	ldr	r3, [r7, #4]
 8002848:	681b      	ldr	r3, [r3, #0]
 800284a:	68da      	ldr	r2, [r3, #12]
 800284c:	687b      	ldr	r3, [r7, #4]
 800284e:	681b      	ldr	r3, [r3, #0]
 8002850:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8002854:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002856:	687b      	ldr	r3, [r7, #4]
 8002858:	2200      	movs	r2, #0
 800285a:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 800285c:	687b      	ldr	r3, [r7, #4]
 800285e:	2220      	movs	r2, #32
 8002860:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8002864:	687b      	ldr	r3, [r7, #4]
 8002866:	2220      	movs	r2, #32
 8002868:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800286c:	687b      	ldr	r3, [r7, #4]
 800286e:	2200      	movs	r2, #0
 8002870:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 8002872:	2300      	movs	r3, #0
}
 8002874:	4618      	mov	r0, r3
 8002876:	3708      	adds	r7, #8
 8002878:	46bd      	mov	sp, r7
 800287a:	bd80      	pop	{r7, pc}

0800287c <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 800287c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002880:	b0c0      	sub	sp, #256	@ 0x100
 8002882:	af00      	add	r7, sp, #0
 8002884:	f8c7 00f4 	str.w	r0, [r7, #244]	@ 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8002888:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800288c:	681b      	ldr	r3, [r3, #0]
 800288e:	691b      	ldr	r3, [r3, #16]
 8002890:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 8002894:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002898:	68d9      	ldr	r1, [r3, #12]
 800289a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800289e:	681a      	ldr	r2, [r3, #0]
 80028a0:	ea40 0301 	orr.w	r3, r0, r1
 80028a4:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 80028a6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80028aa:	689a      	ldr	r2, [r3, #8]
 80028ac:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80028b0:	691b      	ldr	r3, [r3, #16]
 80028b2:	431a      	orrs	r2, r3
 80028b4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80028b8:	695b      	ldr	r3, [r3, #20]
 80028ba:	431a      	orrs	r2, r3
 80028bc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80028c0:	69db      	ldr	r3, [r3, #28]
 80028c2:	4313      	orrs	r3, r2
 80028c4:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
  MODIFY_REG(huart->Instance->CR1,
 80028c8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80028cc:	681b      	ldr	r3, [r3, #0]
 80028ce:	68db      	ldr	r3, [r3, #12]
 80028d0:	f423 4116 	bic.w	r1, r3, #38400	@ 0x9600
 80028d4:	f021 010c 	bic.w	r1, r1, #12
 80028d8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80028dc:	681a      	ldr	r2, [r3, #0]
 80028de:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 80028e2:	430b      	orrs	r3, r1
 80028e4:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80028e6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80028ea:	681b      	ldr	r3, [r3, #0]
 80028ec:	695b      	ldr	r3, [r3, #20]
 80028ee:	f423 7040 	bic.w	r0, r3, #768	@ 0x300
 80028f2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80028f6:	6999      	ldr	r1, [r3, #24]
 80028f8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80028fc:	681a      	ldr	r2, [r3, #0]
 80028fe:	ea40 0301 	orr.w	r3, r0, r1
 8002902:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8002904:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002908:	681a      	ldr	r2, [r3, #0]
 800290a:	4b8f      	ldr	r3, [pc, #572]	@ (8002b48 <UART_SetConfig+0x2cc>)
 800290c:	429a      	cmp	r2, r3
 800290e:	d005      	beq.n	800291c <UART_SetConfig+0xa0>
 8002910:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002914:	681a      	ldr	r2, [r3, #0]
 8002916:	4b8d      	ldr	r3, [pc, #564]	@ (8002b4c <UART_SetConfig+0x2d0>)
 8002918:	429a      	cmp	r2, r3
 800291a:	d104      	bne.n	8002926 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 800291c:	f7fe fdda 	bl	80014d4 <HAL_RCC_GetPCLK2Freq>
 8002920:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 8002924:	e003      	b.n	800292e <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8002926:	f7fe fdc1 	bl	80014ac <HAL_RCC_GetPCLK1Freq>
 800292a:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800292e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002932:	69db      	ldr	r3, [r3, #28]
 8002934:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8002938:	f040 810c 	bne.w	8002b54 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 800293c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8002940:	2200      	movs	r2, #0
 8002942:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 8002946:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 800294a:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 800294e:	4622      	mov	r2, r4
 8002950:	462b      	mov	r3, r5
 8002952:	1891      	adds	r1, r2, r2
 8002954:	65b9      	str	r1, [r7, #88]	@ 0x58
 8002956:	415b      	adcs	r3, r3
 8002958:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800295a:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 800295e:	4621      	mov	r1, r4
 8002960:	eb12 0801 	adds.w	r8, r2, r1
 8002964:	4629      	mov	r1, r5
 8002966:	eb43 0901 	adc.w	r9, r3, r1
 800296a:	f04f 0200 	mov.w	r2, #0
 800296e:	f04f 0300 	mov.w	r3, #0
 8002972:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8002976:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800297a:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800297e:	4690      	mov	r8, r2
 8002980:	4699      	mov	r9, r3
 8002982:	4623      	mov	r3, r4
 8002984:	eb18 0303 	adds.w	r3, r8, r3
 8002988:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 800298c:	462b      	mov	r3, r5
 800298e:	eb49 0303 	adc.w	r3, r9, r3
 8002992:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8002996:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800299a:	685b      	ldr	r3, [r3, #4]
 800299c:	2200      	movs	r2, #0
 800299e:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 80029a2:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 80029a6:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 80029aa:	460b      	mov	r3, r1
 80029ac:	18db      	adds	r3, r3, r3
 80029ae:	653b      	str	r3, [r7, #80]	@ 0x50
 80029b0:	4613      	mov	r3, r2
 80029b2:	eb42 0303 	adc.w	r3, r2, r3
 80029b6:	657b      	str	r3, [r7, #84]	@ 0x54
 80029b8:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 80029bc:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 80029c0:	f7fd fc7e 	bl	80002c0 <__aeabi_uldivmod>
 80029c4:	4602      	mov	r2, r0
 80029c6:	460b      	mov	r3, r1
 80029c8:	4b61      	ldr	r3, [pc, #388]	@ (8002b50 <UART_SetConfig+0x2d4>)
 80029ca:	fba3 2302 	umull	r2, r3, r3, r2
 80029ce:	095b      	lsrs	r3, r3, #5
 80029d0:	011c      	lsls	r4, r3, #4
 80029d2:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80029d6:	2200      	movs	r2, #0
 80029d8:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 80029dc:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 80029e0:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	@ 0xd0
 80029e4:	4642      	mov	r2, r8
 80029e6:	464b      	mov	r3, r9
 80029e8:	1891      	adds	r1, r2, r2
 80029ea:	64b9      	str	r1, [r7, #72]	@ 0x48
 80029ec:	415b      	adcs	r3, r3
 80029ee:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80029f0:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 80029f4:	4641      	mov	r1, r8
 80029f6:	eb12 0a01 	adds.w	sl, r2, r1
 80029fa:	4649      	mov	r1, r9
 80029fc:	eb43 0b01 	adc.w	fp, r3, r1
 8002a00:	f04f 0200 	mov.w	r2, #0
 8002a04:	f04f 0300 	mov.w	r3, #0
 8002a08:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8002a0c:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8002a10:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8002a14:	4692      	mov	sl, r2
 8002a16:	469b      	mov	fp, r3
 8002a18:	4643      	mov	r3, r8
 8002a1a:	eb1a 0303 	adds.w	r3, sl, r3
 8002a1e:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8002a22:	464b      	mov	r3, r9
 8002a24:	eb4b 0303 	adc.w	r3, fp, r3
 8002a28:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8002a2c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002a30:	685b      	ldr	r3, [r3, #4]
 8002a32:	2200      	movs	r2, #0
 8002a34:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8002a38:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 8002a3c:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 8002a40:	460b      	mov	r3, r1
 8002a42:	18db      	adds	r3, r3, r3
 8002a44:	643b      	str	r3, [r7, #64]	@ 0x40
 8002a46:	4613      	mov	r3, r2
 8002a48:	eb42 0303 	adc.w	r3, r2, r3
 8002a4c:	647b      	str	r3, [r7, #68]	@ 0x44
 8002a4e:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 8002a52:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 8002a56:	f7fd fc33 	bl	80002c0 <__aeabi_uldivmod>
 8002a5a:	4602      	mov	r2, r0
 8002a5c:	460b      	mov	r3, r1
 8002a5e:	4611      	mov	r1, r2
 8002a60:	4b3b      	ldr	r3, [pc, #236]	@ (8002b50 <UART_SetConfig+0x2d4>)
 8002a62:	fba3 2301 	umull	r2, r3, r3, r1
 8002a66:	095b      	lsrs	r3, r3, #5
 8002a68:	2264      	movs	r2, #100	@ 0x64
 8002a6a:	fb02 f303 	mul.w	r3, r2, r3
 8002a6e:	1acb      	subs	r3, r1, r3
 8002a70:	00db      	lsls	r3, r3, #3
 8002a72:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 8002a76:	4b36      	ldr	r3, [pc, #216]	@ (8002b50 <UART_SetConfig+0x2d4>)
 8002a78:	fba3 2302 	umull	r2, r3, r3, r2
 8002a7c:	095b      	lsrs	r3, r3, #5
 8002a7e:	005b      	lsls	r3, r3, #1
 8002a80:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 8002a84:	441c      	add	r4, r3
 8002a86:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8002a8a:	2200      	movs	r2, #0
 8002a8c:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8002a90:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 8002a94:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	@ 0xb8
 8002a98:	4642      	mov	r2, r8
 8002a9a:	464b      	mov	r3, r9
 8002a9c:	1891      	adds	r1, r2, r2
 8002a9e:	63b9      	str	r1, [r7, #56]	@ 0x38
 8002aa0:	415b      	adcs	r3, r3
 8002aa2:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8002aa4:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 8002aa8:	4641      	mov	r1, r8
 8002aaa:	1851      	adds	r1, r2, r1
 8002aac:	6339      	str	r1, [r7, #48]	@ 0x30
 8002aae:	4649      	mov	r1, r9
 8002ab0:	414b      	adcs	r3, r1
 8002ab2:	637b      	str	r3, [r7, #52]	@ 0x34
 8002ab4:	f04f 0200 	mov.w	r2, #0
 8002ab8:	f04f 0300 	mov.w	r3, #0
 8002abc:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 8002ac0:	4659      	mov	r1, fp
 8002ac2:	00cb      	lsls	r3, r1, #3
 8002ac4:	4651      	mov	r1, sl
 8002ac6:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8002aca:	4651      	mov	r1, sl
 8002acc:	00ca      	lsls	r2, r1, #3
 8002ace:	4610      	mov	r0, r2
 8002ad0:	4619      	mov	r1, r3
 8002ad2:	4603      	mov	r3, r0
 8002ad4:	4642      	mov	r2, r8
 8002ad6:	189b      	adds	r3, r3, r2
 8002ad8:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8002adc:	464b      	mov	r3, r9
 8002ade:	460a      	mov	r2, r1
 8002ae0:	eb42 0303 	adc.w	r3, r2, r3
 8002ae4:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8002ae8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002aec:	685b      	ldr	r3, [r3, #4]
 8002aee:	2200      	movs	r2, #0
 8002af0:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8002af4:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 8002af8:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 8002afc:	460b      	mov	r3, r1
 8002afe:	18db      	adds	r3, r3, r3
 8002b00:	62bb      	str	r3, [r7, #40]	@ 0x28
 8002b02:	4613      	mov	r3, r2
 8002b04:	eb42 0303 	adc.w	r3, r2, r3
 8002b08:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8002b0a:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8002b0e:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 8002b12:	f7fd fbd5 	bl	80002c0 <__aeabi_uldivmod>
 8002b16:	4602      	mov	r2, r0
 8002b18:	460b      	mov	r3, r1
 8002b1a:	4b0d      	ldr	r3, [pc, #52]	@ (8002b50 <UART_SetConfig+0x2d4>)
 8002b1c:	fba3 1302 	umull	r1, r3, r3, r2
 8002b20:	095b      	lsrs	r3, r3, #5
 8002b22:	2164      	movs	r1, #100	@ 0x64
 8002b24:	fb01 f303 	mul.w	r3, r1, r3
 8002b28:	1ad3      	subs	r3, r2, r3
 8002b2a:	00db      	lsls	r3, r3, #3
 8002b2c:	3332      	adds	r3, #50	@ 0x32
 8002b2e:	4a08      	ldr	r2, [pc, #32]	@ (8002b50 <UART_SetConfig+0x2d4>)
 8002b30:	fba2 2303 	umull	r2, r3, r2, r3
 8002b34:	095b      	lsrs	r3, r3, #5
 8002b36:	f003 0207 	and.w	r2, r3, #7
 8002b3a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002b3e:	681b      	ldr	r3, [r3, #0]
 8002b40:	4422      	add	r2, r4
 8002b42:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8002b44:	e106      	b.n	8002d54 <UART_SetConfig+0x4d8>
 8002b46:	bf00      	nop
 8002b48:	40011000 	.word	0x40011000
 8002b4c:	40011400 	.word	0x40011400
 8002b50:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8002b54:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8002b58:	2200      	movs	r2, #0
 8002b5a:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 8002b5e:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 8002b62:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 8002b66:	4642      	mov	r2, r8
 8002b68:	464b      	mov	r3, r9
 8002b6a:	1891      	adds	r1, r2, r2
 8002b6c:	6239      	str	r1, [r7, #32]
 8002b6e:	415b      	adcs	r3, r3
 8002b70:	627b      	str	r3, [r7, #36]	@ 0x24
 8002b72:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8002b76:	4641      	mov	r1, r8
 8002b78:	1854      	adds	r4, r2, r1
 8002b7a:	4649      	mov	r1, r9
 8002b7c:	eb43 0501 	adc.w	r5, r3, r1
 8002b80:	f04f 0200 	mov.w	r2, #0
 8002b84:	f04f 0300 	mov.w	r3, #0
 8002b88:	00eb      	lsls	r3, r5, #3
 8002b8a:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8002b8e:	00e2      	lsls	r2, r4, #3
 8002b90:	4614      	mov	r4, r2
 8002b92:	461d      	mov	r5, r3
 8002b94:	4643      	mov	r3, r8
 8002b96:	18e3      	adds	r3, r4, r3
 8002b98:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8002b9c:	464b      	mov	r3, r9
 8002b9e:	eb45 0303 	adc.w	r3, r5, r3
 8002ba2:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8002ba6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002baa:	685b      	ldr	r3, [r3, #4]
 8002bac:	2200      	movs	r2, #0
 8002bae:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8002bb2:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 8002bb6:	f04f 0200 	mov.w	r2, #0
 8002bba:	f04f 0300 	mov.w	r3, #0
 8002bbe:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 8002bc2:	4629      	mov	r1, r5
 8002bc4:	008b      	lsls	r3, r1, #2
 8002bc6:	4621      	mov	r1, r4
 8002bc8:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8002bcc:	4621      	mov	r1, r4
 8002bce:	008a      	lsls	r2, r1, #2
 8002bd0:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 8002bd4:	f7fd fb74 	bl	80002c0 <__aeabi_uldivmod>
 8002bd8:	4602      	mov	r2, r0
 8002bda:	460b      	mov	r3, r1
 8002bdc:	4b60      	ldr	r3, [pc, #384]	@ (8002d60 <UART_SetConfig+0x4e4>)
 8002bde:	fba3 2302 	umull	r2, r3, r3, r2
 8002be2:	095b      	lsrs	r3, r3, #5
 8002be4:	011c      	lsls	r4, r3, #4
 8002be6:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8002bea:	2200      	movs	r2, #0
 8002bec:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8002bf0:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 8002bf4:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 8002bf8:	4642      	mov	r2, r8
 8002bfa:	464b      	mov	r3, r9
 8002bfc:	1891      	adds	r1, r2, r2
 8002bfe:	61b9      	str	r1, [r7, #24]
 8002c00:	415b      	adcs	r3, r3
 8002c02:	61fb      	str	r3, [r7, #28]
 8002c04:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8002c08:	4641      	mov	r1, r8
 8002c0a:	1851      	adds	r1, r2, r1
 8002c0c:	6139      	str	r1, [r7, #16]
 8002c0e:	4649      	mov	r1, r9
 8002c10:	414b      	adcs	r3, r1
 8002c12:	617b      	str	r3, [r7, #20]
 8002c14:	f04f 0200 	mov.w	r2, #0
 8002c18:	f04f 0300 	mov.w	r3, #0
 8002c1c:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8002c20:	4659      	mov	r1, fp
 8002c22:	00cb      	lsls	r3, r1, #3
 8002c24:	4651      	mov	r1, sl
 8002c26:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8002c2a:	4651      	mov	r1, sl
 8002c2c:	00ca      	lsls	r2, r1, #3
 8002c2e:	4610      	mov	r0, r2
 8002c30:	4619      	mov	r1, r3
 8002c32:	4603      	mov	r3, r0
 8002c34:	4642      	mov	r2, r8
 8002c36:	189b      	adds	r3, r3, r2
 8002c38:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8002c3c:	464b      	mov	r3, r9
 8002c3e:	460a      	mov	r2, r1
 8002c40:	eb42 0303 	adc.w	r3, r2, r3
 8002c44:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8002c48:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002c4c:	685b      	ldr	r3, [r3, #4]
 8002c4e:	2200      	movs	r2, #0
 8002c50:	67bb      	str	r3, [r7, #120]	@ 0x78
 8002c52:	67fa      	str	r2, [r7, #124]	@ 0x7c
 8002c54:	f04f 0200 	mov.w	r2, #0
 8002c58:	f04f 0300 	mov.w	r3, #0
 8002c5c:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 8002c60:	4649      	mov	r1, r9
 8002c62:	008b      	lsls	r3, r1, #2
 8002c64:	4641      	mov	r1, r8
 8002c66:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8002c6a:	4641      	mov	r1, r8
 8002c6c:	008a      	lsls	r2, r1, #2
 8002c6e:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 8002c72:	f7fd fb25 	bl	80002c0 <__aeabi_uldivmod>
 8002c76:	4602      	mov	r2, r0
 8002c78:	460b      	mov	r3, r1
 8002c7a:	4611      	mov	r1, r2
 8002c7c:	4b38      	ldr	r3, [pc, #224]	@ (8002d60 <UART_SetConfig+0x4e4>)
 8002c7e:	fba3 2301 	umull	r2, r3, r3, r1
 8002c82:	095b      	lsrs	r3, r3, #5
 8002c84:	2264      	movs	r2, #100	@ 0x64
 8002c86:	fb02 f303 	mul.w	r3, r2, r3
 8002c8a:	1acb      	subs	r3, r1, r3
 8002c8c:	011b      	lsls	r3, r3, #4
 8002c8e:	3332      	adds	r3, #50	@ 0x32
 8002c90:	4a33      	ldr	r2, [pc, #204]	@ (8002d60 <UART_SetConfig+0x4e4>)
 8002c92:	fba2 2303 	umull	r2, r3, r2, r3
 8002c96:	095b      	lsrs	r3, r3, #5
 8002c98:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8002c9c:	441c      	add	r4, r3
 8002c9e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8002ca2:	2200      	movs	r2, #0
 8002ca4:	673b      	str	r3, [r7, #112]	@ 0x70
 8002ca6:	677a      	str	r2, [r7, #116]	@ 0x74
 8002ca8:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 8002cac:	4642      	mov	r2, r8
 8002cae:	464b      	mov	r3, r9
 8002cb0:	1891      	adds	r1, r2, r2
 8002cb2:	60b9      	str	r1, [r7, #8]
 8002cb4:	415b      	adcs	r3, r3
 8002cb6:	60fb      	str	r3, [r7, #12]
 8002cb8:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8002cbc:	4641      	mov	r1, r8
 8002cbe:	1851      	adds	r1, r2, r1
 8002cc0:	6039      	str	r1, [r7, #0]
 8002cc2:	4649      	mov	r1, r9
 8002cc4:	414b      	adcs	r3, r1
 8002cc6:	607b      	str	r3, [r7, #4]
 8002cc8:	f04f 0200 	mov.w	r2, #0
 8002ccc:	f04f 0300 	mov.w	r3, #0
 8002cd0:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8002cd4:	4659      	mov	r1, fp
 8002cd6:	00cb      	lsls	r3, r1, #3
 8002cd8:	4651      	mov	r1, sl
 8002cda:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8002cde:	4651      	mov	r1, sl
 8002ce0:	00ca      	lsls	r2, r1, #3
 8002ce2:	4610      	mov	r0, r2
 8002ce4:	4619      	mov	r1, r3
 8002ce6:	4603      	mov	r3, r0
 8002ce8:	4642      	mov	r2, r8
 8002cea:	189b      	adds	r3, r3, r2
 8002cec:	66bb      	str	r3, [r7, #104]	@ 0x68
 8002cee:	464b      	mov	r3, r9
 8002cf0:	460a      	mov	r2, r1
 8002cf2:	eb42 0303 	adc.w	r3, r2, r3
 8002cf6:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8002cf8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002cfc:	685b      	ldr	r3, [r3, #4]
 8002cfe:	2200      	movs	r2, #0
 8002d00:	663b      	str	r3, [r7, #96]	@ 0x60
 8002d02:	667a      	str	r2, [r7, #100]	@ 0x64
 8002d04:	f04f 0200 	mov.w	r2, #0
 8002d08:	f04f 0300 	mov.w	r3, #0
 8002d0c:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 8002d10:	4649      	mov	r1, r9
 8002d12:	008b      	lsls	r3, r1, #2
 8002d14:	4641      	mov	r1, r8
 8002d16:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8002d1a:	4641      	mov	r1, r8
 8002d1c:	008a      	lsls	r2, r1, #2
 8002d1e:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 8002d22:	f7fd facd 	bl	80002c0 <__aeabi_uldivmod>
 8002d26:	4602      	mov	r2, r0
 8002d28:	460b      	mov	r3, r1
 8002d2a:	4b0d      	ldr	r3, [pc, #52]	@ (8002d60 <UART_SetConfig+0x4e4>)
 8002d2c:	fba3 1302 	umull	r1, r3, r3, r2
 8002d30:	095b      	lsrs	r3, r3, #5
 8002d32:	2164      	movs	r1, #100	@ 0x64
 8002d34:	fb01 f303 	mul.w	r3, r1, r3
 8002d38:	1ad3      	subs	r3, r2, r3
 8002d3a:	011b      	lsls	r3, r3, #4
 8002d3c:	3332      	adds	r3, #50	@ 0x32
 8002d3e:	4a08      	ldr	r2, [pc, #32]	@ (8002d60 <UART_SetConfig+0x4e4>)
 8002d40:	fba2 2303 	umull	r2, r3, r2, r3
 8002d44:	095b      	lsrs	r3, r3, #5
 8002d46:	f003 020f 	and.w	r2, r3, #15
 8002d4a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002d4e:	681b      	ldr	r3, [r3, #0]
 8002d50:	4422      	add	r2, r4
 8002d52:	609a      	str	r2, [r3, #8]
}
 8002d54:	bf00      	nop
 8002d56:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 8002d5a:	46bd      	mov	sp, r7
 8002d5c:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8002d60:	51eb851f 	.word	0x51eb851f

08002d64 <makeFreeRtosPriority>:

extern void xPortSysTickHandler(void);

/* Convert from CMSIS type osPriority to FreeRTOS priority number */
static unsigned portBASE_TYPE makeFreeRtosPriority (osPriority priority)
{
 8002d64:	b480      	push	{r7}
 8002d66:	b085      	sub	sp, #20
 8002d68:	af00      	add	r7, sp, #0
 8002d6a:	4603      	mov	r3, r0
 8002d6c:	80fb      	strh	r3, [r7, #6]
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 8002d6e:	2300      	movs	r3, #0
 8002d70:	60fb      	str	r3, [r7, #12]
  
  if (priority != osPriorityError) {
 8002d72:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8002d76:	2b84      	cmp	r3, #132	@ 0x84
 8002d78:	d005      	beq.n	8002d86 <makeFreeRtosPriority+0x22>
    fpriority += (priority - osPriorityIdle);
 8002d7a:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8002d7e:	68fb      	ldr	r3, [r7, #12]
 8002d80:	4413      	add	r3, r2
 8002d82:	3303      	adds	r3, #3
 8002d84:	60fb      	str	r3, [r7, #12]
  }
  
  return fpriority;
 8002d86:	68fb      	ldr	r3, [r7, #12]
}
 8002d88:	4618      	mov	r0, r3
 8002d8a:	3714      	adds	r7, #20
 8002d8c:	46bd      	mov	sp, r7
 8002d8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d92:	4770      	bx	lr

08002d94 <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
 8002d94:	b580      	push	{r7, lr}
 8002d96:	af00      	add	r7, sp, #0
  vTaskStartScheduler();
 8002d98:	f001 f830 	bl	8003dfc <vTaskStartScheduler>
  
  return osOK;
 8002d9c:	2300      	movs	r3, #0
}
 8002d9e:	4618      	mov	r0, r3
 8002da0:	bd80      	pop	{r7, pc}

08002da2 <osThreadCreate>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval thread ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osThreadCreate shall be consistent in every CMSIS-RTOS.
*/
osThreadId osThreadCreate (const osThreadDef_t *thread_def, void *argument)
{
 8002da2:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002da4:	b089      	sub	sp, #36	@ 0x24
 8002da6:	af04      	add	r7, sp, #16
 8002da8:	6078      	str	r0, [r7, #4]
 8002daa:	6039      	str	r1, [r7, #0]
  TaskHandle_t handle;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) &&  ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
  if((thread_def->buffer != NULL) && (thread_def->controlblock != NULL)) {
 8002dac:	687b      	ldr	r3, [r7, #4]
 8002dae:	695b      	ldr	r3, [r3, #20]
 8002db0:	2b00      	cmp	r3, #0
 8002db2:	d020      	beq.n	8002df6 <osThreadCreate+0x54>
 8002db4:	687b      	ldr	r3, [r7, #4]
 8002db6:	699b      	ldr	r3, [r3, #24]
 8002db8:	2b00      	cmp	r3, #0
 8002dba:	d01c      	beq.n	8002df6 <osThreadCreate+0x54>
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8002dbc:	687b      	ldr	r3, [r7, #4]
 8002dbe:	685c      	ldr	r4, [r3, #4]
 8002dc0:	687b      	ldr	r3, [r7, #4]
 8002dc2:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 8002dc4:	687b      	ldr	r3, [r7, #4]
 8002dc6:	691e      	ldr	r6, [r3, #16]
 8002dc8:	687b      	ldr	r3, [r7, #4]
 8002dca:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8002dce:	4618      	mov	r0, r3
 8002dd0:	f7ff ffc8 	bl	8002d64 <makeFreeRtosPriority>
 8002dd4:	4601      	mov	r1, r0
              thread_def->buffer, thread_def->controlblock);
 8002dd6:	687b      	ldr	r3, [r7, #4]
 8002dd8:	695b      	ldr	r3, [r3, #20]
 8002dda:	687a      	ldr	r2, [r7, #4]
 8002ddc:	6992      	ldr	r2, [r2, #24]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8002dde:	9202      	str	r2, [sp, #8]
 8002de0:	9301      	str	r3, [sp, #4]
 8002de2:	9100      	str	r1, [sp, #0]
 8002de4:	683b      	ldr	r3, [r7, #0]
 8002de6:	4632      	mov	r2, r6
 8002de8:	4629      	mov	r1, r5
 8002dea:	4620      	mov	r0, r4
 8002dec:	f000 fe20 	bl	8003a30 <xTaskCreateStatic>
 8002df0:	4603      	mov	r3, r0
 8002df2:	60fb      	str	r3, [r7, #12]
 8002df4:	e01c      	b.n	8002e30 <osThreadCreate+0x8e>
  }
  else {
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8002df6:	687b      	ldr	r3, [r7, #4]
 8002df8:	685c      	ldr	r4, [r3, #4]
 8002dfa:	687b      	ldr	r3, [r7, #4]
 8002dfc:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 8002dfe:	687b      	ldr	r3, [r7, #4]
 8002e00:	691b      	ldr	r3, [r3, #16]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8002e02:	b29e      	uxth	r6, r3
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 8002e04:	687b      	ldr	r3, [r7, #4]
 8002e06:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8002e0a:	4618      	mov	r0, r3
 8002e0c:	f7ff ffaa 	bl	8002d64 <makeFreeRtosPriority>
 8002e10:	4602      	mov	r2, r0
 8002e12:	f107 030c 	add.w	r3, r7, #12
 8002e16:	9301      	str	r3, [sp, #4]
 8002e18:	9200      	str	r2, [sp, #0]
 8002e1a:	683b      	ldr	r3, [r7, #0]
 8002e1c:	4632      	mov	r2, r6
 8002e1e:	4629      	mov	r1, r5
 8002e20:	4620      	mov	r0, r4
 8002e22:	f000 fe65 	bl	8003af0 <xTaskCreate>
 8002e26:	4603      	mov	r3, r0
 8002e28:	2b01      	cmp	r3, #1
 8002e2a:	d001      	beq.n	8002e30 <osThreadCreate+0x8e>
              &handle) != pdPASS)  {
      return NULL;
 8002e2c:	2300      	movs	r3, #0
 8002e2e:	e000      	b.n	8002e32 <osThreadCreate+0x90>
                   &handle) != pdPASS)  {
    return NULL;
  }     
#endif
  
  return handle;
 8002e30:	68fb      	ldr	r3, [r7, #12]
}
 8002e32:	4618      	mov	r0, r3
 8002e34:	3714      	adds	r7, #20
 8002e36:	46bd      	mov	sp, r7
 8002e38:	bdf0      	pop	{r4, r5, r6, r7, pc}

08002e3a <osDelay>:
* @brief   Wait for Timeout (Time Delay)
* @param   millisec      time delay value
* @retval  status code that indicates the execution status of the function.
*/
osStatus osDelay (uint32_t millisec)
{
 8002e3a:	b580      	push	{r7, lr}
 8002e3c:	b084      	sub	sp, #16
 8002e3e:	af00      	add	r7, sp, #0
 8002e40:	6078      	str	r0, [r7, #4]
#if INCLUDE_vTaskDelay
  TickType_t ticks = millisec / portTICK_PERIOD_MS;
 8002e42:	687b      	ldr	r3, [r7, #4]
 8002e44:	60fb      	str	r3, [r7, #12]
  
  vTaskDelay(ticks ? ticks : 1);          /* Minimum delay = 1 tick */
 8002e46:	68fb      	ldr	r3, [r7, #12]
 8002e48:	2b00      	cmp	r3, #0
 8002e4a:	d001      	beq.n	8002e50 <osDelay+0x16>
 8002e4c:	68fb      	ldr	r3, [r7, #12]
 8002e4e:	e000      	b.n	8002e52 <osDelay+0x18>
 8002e50:	2301      	movs	r3, #1
 8002e52:	4618      	mov	r0, r3
 8002e54:	f000 ff9c 	bl	8003d90 <vTaskDelay>
  
  return osOK;
 8002e58:	2300      	movs	r3, #0
#else
  (void) millisec;
  
  return osErrorResource;
#endif
}
 8002e5a:	4618      	mov	r0, r3
 8002e5c:	3710      	adds	r7, #16
 8002e5e:	46bd      	mov	sp, r7
 8002e60:	bd80      	pop	{r7, pc}

08002e62 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8002e62:	b480      	push	{r7}
 8002e64:	b083      	sub	sp, #12
 8002e66:	af00      	add	r7, sp, #0
 8002e68:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8002e6a:	687b      	ldr	r3, [r7, #4]
 8002e6c:	f103 0208 	add.w	r2, r3, #8
 8002e70:	687b      	ldr	r3, [r7, #4]
 8002e72:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8002e74:	687b      	ldr	r3, [r7, #4]
 8002e76:	f04f 32ff 	mov.w	r2, #4294967295
 8002e7a:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8002e7c:	687b      	ldr	r3, [r7, #4]
 8002e7e:	f103 0208 	add.w	r2, r3, #8
 8002e82:	687b      	ldr	r3, [r7, #4]
 8002e84:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8002e86:	687b      	ldr	r3, [r7, #4]
 8002e88:	f103 0208 	add.w	r2, r3, #8
 8002e8c:	687b      	ldr	r3, [r7, #4]
 8002e8e:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8002e90:	687b      	ldr	r3, [r7, #4]
 8002e92:	2200      	movs	r2, #0
 8002e94:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8002e96:	bf00      	nop
 8002e98:	370c      	adds	r7, #12
 8002e9a:	46bd      	mov	sp, r7
 8002e9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ea0:	4770      	bx	lr

08002ea2 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8002ea2:	b480      	push	{r7}
 8002ea4:	b083      	sub	sp, #12
 8002ea6:	af00      	add	r7, sp, #0
 8002ea8:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8002eaa:	687b      	ldr	r3, [r7, #4]
 8002eac:	2200      	movs	r2, #0
 8002eae:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8002eb0:	bf00      	nop
 8002eb2:	370c      	adds	r7, #12
 8002eb4:	46bd      	mov	sp, r7
 8002eb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002eba:	4770      	bx	lr

08002ebc <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8002ebc:	b480      	push	{r7}
 8002ebe:	b085      	sub	sp, #20
 8002ec0:	af00      	add	r7, sp, #0
 8002ec2:	6078      	str	r0, [r7, #4]
 8002ec4:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8002ec6:	687b      	ldr	r3, [r7, #4]
 8002ec8:	685b      	ldr	r3, [r3, #4]
 8002eca:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8002ecc:	683b      	ldr	r3, [r7, #0]
 8002ece:	68fa      	ldr	r2, [r7, #12]
 8002ed0:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8002ed2:	68fb      	ldr	r3, [r7, #12]
 8002ed4:	689a      	ldr	r2, [r3, #8]
 8002ed6:	683b      	ldr	r3, [r7, #0]
 8002ed8:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8002eda:	68fb      	ldr	r3, [r7, #12]
 8002edc:	689b      	ldr	r3, [r3, #8]
 8002ede:	683a      	ldr	r2, [r7, #0]
 8002ee0:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8002ee2:	68fb      	ldr	r3, [r7, #12]
 8002ee4:	683a      	ldr	r2, [r7, #0]
 8002ee6:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8002ee8:	683b      	ldr	r3, [r7, #0]
 8002eea:	687a      	ldr	r2, [r7, #4]
 8002eec:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8002eee:	687b      	ldr	r3, [r7, #4]
 8002ef0:	681b      	ldr	r3, [r3, #0]
 8002ef2:	1c5a      	adds	r2, r3, #1
 8002ef4:	687b      	ldr	r3, [r7, #4]
 8002ef6:	601a      	str	r2, [r3, #0]
}
 8002ef8:	bf00      	nop
 8002efa:	3714      	adds	r7, #20
 8002efc:	46bd      	mov	sp, r7
 8002efe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f02:	4770      	bx	lr

08002f04 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8002f04:	b480      	push	{r7}
 8002f06:	b085      	sub	sp, #20
 8002f08:	af00      	add	r7, sp, #0
 8002f0a:	6078      	str	r0, [r7, #4]
 8002f0c:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8002f0e:	683b      	ldr	r3, [r7, #0]
 8002f10:	681b      	ldr	r3, [r3, #0]
 8002f12:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8002f14:	68bb      	ldr	r3, [r7, #8]
 8002f16:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002f1a:	d103      	bne.n	8002f24 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8002f1c:	687b      	ldr	r3, [r7, #4]
 8002f1e:	691b      	ldr	r3, [r3, #16]
 8002f20:	60fb      	str	r3, [r7, #12]
 8002f22:	e00c      	b.n	8002f3e <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8002f24:	687b      	ldr	r3, [r7, #4]
 8002f26:	3308      	adds	r3, #8
 8002f28:	60fb      	str	r3, [r7, #12]
 8002f2a:	e002      	b.n	8002f32 <vListInsert+0x2e>
 8002f2c:	68fb      	ldr	r3, [r7, #12]
 8002f2e:	685b      	ldr	r3, [r3, #4]
 8002f30:	60fb      	str	r3, [r7, #12]
 8002f32:	68fb      	ldr	r3, [r7, #12]
 8002f34:	685b      	ldr	r3, [r3, #4]
 8002f36:	681b      	ldr	r3, [r3, #0]
 8002f38:	68ba      	ldr	r2, [r7, #8]
 8002f3a:	429a      	cmp	r2, r3
 8002f3c:	d2f6      	bcs.n	8002f2c <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8002f3e:	68fb      	ldr	r3, [r7, #12]
 8002f40:	685a      	ldr	r2, [r3, #4]
 8002f42:	683b      	ldr	r3, [r7, #0]
 8002f44:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8002f46:	683b      	ldr	r3, [r7, #0]
 8002f48:	685b      	ldr	r3, [r3, #4]
 8002f4a:	683a      	ldr	r2, [r7, #0]
 8002f4c:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8002f4e:	683b      	ldr	r3, [r7, #0]
 8002f50:	68fa      	ldr	r2, [r7, #12]
 8002f52:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8002f54:	68fb      	ldr	r3, [r7, #12]
 8002f56:	683a      	ldr	r2, [r7, #0]
 8002f58:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8002f5a:	683b      	ldr	r3, [r7, #0]
 8002f5c:	687a      	ldr	r2, [r7, #4]
 8002f5e:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8002f60:	687b      	ldr	r3, [r7, #4]
 8002f62:	681b      	ldr	r3, [r3, #0]
 8002f64:	1c5a      	adds	r2, r3, #1
 8002f66:	687b      	ldr	r3, [r7, #4]
 8002f68:	601a      	str	r2, [r3, #0]
}
 8002f6a:	bf00      	nop
 8002f6c:	3714      	adds	r7, #20
 8002f6e:	46bd      	mov	sp, r7
 8002f70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f74:	4770      	bx	lr

08002f76 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8002f76:	b480      	push	{r7}
 8002f78:	b085      	sub	sp, #20
 8002f7a:	af00      	add	r7, sp, #0
 8002f7c:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8002f7e:	687b      	ldr	r3, [r7, #4]
 8002f80:	691b      	ldr	r3, [r3, #16]
 8002f82:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8002f84:	687b      	ldr	r3, [r7, #4]
 8002f86:	685b      	ldr	r3, [r3, #4]
 8002f88:	687a      	ldr	r2, [r7, #4]
 8002f8a:	6892      	ldr	r2, [r2, #8]
 8002f8c:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8002f8e:	687b      	ldr	r3, [r7, #4]
 8002f90:	689b      	ldr	r3, [r3, #8]
 8002f92:	687a      	ldr	r2, [r7, #4]
 8002f94:	6852      	ldr	r2, [r2, #4]
 8002f96:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8002f98:	68fb      	ldr	r3, [r7, #12]
 8002f9a:	685b      	ldr	r3, [r3, #4]
 8002f9c:	687a      	ldr	r2, [r7, #4]
 8002f9e:	429a      	cmp	r2, r3
 8002fa0:	d103      	bne.n	8002faa <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8002fa2:	687b      	ldr	r3, [r7, #4]
 8002fa4:	689a      	ldr	r2, [r3, #8]
 8002fa6:	68fb      	ldr	r3, [r7, #12]
 8002fa8:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8002faa:	687b      	ldr	r3, [r7, #4]
 8002fac:	2200      	movs	r2, #0
 8002fae:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8002fb0:	68fb      	ldr	r3, [r7, #12]
 8002fb2:	681b      	ldr	r3, [r3, #0]
 8002fb4:	1e5a      	subs	r2, r3, #1
 8002fb6:	68fb      	ldr	r3, [r7, #12]
 8002fb8:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8002fba:	68fb      	ldr	r3, [r7, #12]
 8002fbc:	681b      	ldr	r3, [r3, #0]
}
 8002fbe:	4618      	mov	r0, r3
 8002fc0:	3714      	adds	r7, #20
 8002fc2:	46bd      	mov	sp, r7
 8002fc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fc8:	4770      	bx	lr
	...

08002fcc <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8002fcc:	b580      	push	{r7, lr}
 8002fce:	b084      	sub	sp, #16
 8002fd0:	af00      	add	r7, sp, #0
 8002fd2:	6078      	str	r0, [r7, #4]
 8002fd4:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 8002fd6:	687b      	ldr	r3, [r7, #4]
 8002fd8:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8002fda:	68fb      	ldr	r3, [r7, #12]
 8002fdc:	2b00      	cmp	r3, #0
 8002fde:	d10b      	bne.n	8002ff8 <xQueueGenericReset+0x2c>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8002fe0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002fe4:	f383 8811 	msr	BASEPRI, r3
 8002fe8:	f3bf 8f6f 	isb	sy
 8002fec:	f3bf 8f4f 	dsb	sy
 8002ff0:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 8002ff2:	bf00      	nop
 8002ff4:	bf00      	nop
 8002ff6:	e7fd      	b.n	8002ff4 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 8002ff8:	f002 f8de 	bl	80051b8 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8002ffc:	68fb      	ldr	r3, [r7, #12]
 8002ffe:	681a      	ldr	r2, [r3, #0]
 8003000:	68fb      	ldr	r3, [r7, #12]
 8003002:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003004:	68f9      	ldr	r1, [r7, #12]
 8003006:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 8003008:	fb01 f303 	mul.w	r3, r1, r3
 800300c:	441a      	add	r2, r3
 800300e:	68fb      	ldr	r3, [r7, #12]
 8003010:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8003012:	68fb      	ldr	r3, [r7, #12]
 8003014:	2200      	movs	r2, #0
 8003016:	639a      	str	r2, [r3, #56]	@ 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8003018:	68fb      	ldr	r3, [r7, #12]
 800301a:	681a      	ldr	r2, [r3, #0]
 800301c:	68fb      	ldr	r3, [r7, #12]
 800301e:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8003020:	68fb      	ldr	r3, [r7, #12]
 8003022:	681a      	ldr	r2, [r3, #0]
 8003024:	68fb      	ldr	r3, [r7, #12]
 8003026:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003028:	3b01      	subs	r3, #1
 800302a:	68f9      	ldr	r1, [r7, #12]
 800302c:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 800302e:	fb01 f303 	mul.w	r3, r1, r3
 8003032:	441a      	add	r2, r3
 8003034:	68fb      	ldr	r3, [r7, #12]
 8003036:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8003038:	68fb      	ldr	r3, [r7, #12]
 800303a:	22ff      	movs	r2, #255	@ 0xff
 800303c:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8003040:	68fb      	ldr	r3, [r7, #12]
 8003042:	22ff      	movs	r2, #255	@ 0xff
 8003044:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

		if( xNewQueue == pdFALSE )
 8003048:	683b      	ldr	r3, [r7, #0]
 800304a:	2b00      	cmp	r3, #0
 800304c:	d114      	bne.n	8003078 <xQueueGenericReset+0xac>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800304e:	68fb      	ldr	r3, [r7, #12]
 8003050:	691b      	ldr	r3, [r3, #16]
 8003052:	2b00      	cmp	r3, #0
 8003054:	d01a      	beq.n	800308c <xQueueGenericReset+0xc0>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8003056:	68fb      	ldr	r3, [r7, #12]
 8003058:	3310      	adds	r3, #16
 800305a:	4618      	mov	r0, r3
 800305c:	f001 f96a 	bl	8004334 <xTaskRemoveFromEventList>
 8003060:	4603      	mov	r3, r0
 8003062:	2b00      	cmp	r3, #0
 8003064:	d012      	beq.n	800308c <xQueueGenericReset+0xc0>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8003066:	4b0d      	ldr	r3, [pc, #52]	@ (800309c <xQueueGenericReset+0xd0>)
 8003068:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800306c:	601a      	str	r2, [r3, #0]
 800306e:	f3bf 8f4f 	dsb	sy
 8003072:	f3bf 8f6f 	isb	sy
 8003076:	e009      	b.n	800308c <xQueueGenericReset+0xc0>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8003078:	68fb      	ldr	r3, [r7, #12]
 800307a:	3310      	adds	r3, #16
 800307c:	4618      	mov	r0, r3
 800307e:	f7ff fef0 	bl	8002e62 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8003082:	68fb      	ldr	r3, [r7, #12]
 8003084:	3324      	adds	r3, #36	@ 0x24
 8003086:	4618      	mov	r0, r3
 8003088:	f7ff feeb 	bl	8002e62 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 800308c:	f002 f8c6 	bl	800521c <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8003090:	2301      	movs	r3, #1
}
 8003092:	4618      	mov	r0, r3
 8003094:	3710      	adds	r7, #16
 8003096:	46bd      	mov	sp, r7
 8003098:	bd80      	pop	{r7, pc}
 800309a:	bf00      	nop
 800309c:	e000ed04 	.word	0xe000ed04

080030a0 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 80030a0:	b580      	push	{r7, lr}
 80030a2:	b08e      	sub	sp, #56	@ 0x38
 80030a4:	af02      	add	r7, sp, #8
 80030a6:	60f8      	str	r0, [r7, #12]
 80030a8:	60b9      	str	r1, [r7, #8]
 80030aa:	607a      	str	r2, [r7, #4]
 80030ac:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 80030ae:	68fb      	ldr	r3, [r7, #12]
 80030b0:	2b00      	cmp	r3, #0
 80030b2:	d10b      	bne.n	80030cc <xQueueGenericCreateStatic+0x2c>
	__asm volatile
 80030b4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80030b8:	f383 8811 	msr	BASEPRI, r3
 80030bc:	f3bf 8f6f 	isb	sy
 80030c0:	f3bf 8f4f 	dsb	sy
 80030c4:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 80030c6:	bf00      	nop
 80030c8:	bf00      	nop
 80030ca:	e7fd      	b.n	80030c8 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 80030cc:	683b      	ldr	r3, [r7, #0]
 80030ce:	2b00      	cmp	r3, #0
 80030d0:	d10b      	bne.n	80030ea <xQueueGenericCreateStatic+0x4a>
	__asm volatile
 80030d2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80030d6:	f383 8811 	msr	BASEPRI, r3
 80030da:	f3bf 8f6f 	isb	sy
 80030de:	f3bf 8f4f 	dsb	sy
 80030e2:	627b      	str	r3, [r7, #36]	@ 0x24
}
 80030e4:	bf00      	nop
 80030e6:	bf00      	nop
 80030e8:	e7fd      	b.n	80030e6 <xQueueGenericCreateStatic+0x46>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 80030ea:	687b      	ldr	r3, [r7, #4]
 80030ec:	2b00      	cmp	r3, #0
 80030ee:	d002      	beq.n	80030f6 <xQueueGenericCreateStatic+0x56>
 80030f0:	68bb      	ldr	r3, [r7, #8]
 80030f2:	2b00      	cmp	r3, #0
 80030f4:	d001      	beq.n	80030fa <xQueueGenericCreateStatic+0x5a>
 80030f6:	2301      	movs	r3, #1
 80030f8:	e000      	b.n	80030fc <xQueueGenericCreateStatic+0x5c>
 80030fa:	2300      	movs	r3, #0
 80030fc:	2b00      	cmp	r3, #0
 80030fe:	d10b      	bne.n	8003118 <xQueueGenericCreateStatic+0x78>
	__asm volatile
 8003100:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003104:	f383 8811 	msr	BASEPRI, r3
 8003108:	f3bf 8f6f 	isb	sy
 800310c:	f3bf 8f4f 	dsb	sy
 8003110:	623b      	str	r3, [r7, #32]
}
 8003112:	bf00      	nop
 8003114:	bf00      	nop
 8003116:	e7fd      	b.n	8003114 <xQueueGenericCreateStatic+0x74>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 8003118:	687b      	ldr	r3, [r7, #4]
 800311a:	2b00      	cmp	r3, #0
 800311c:	d102      	bne.n	8003124 <xQueueGenericCreateStatic+0x84>
 800311e:	68bb      	ldr	r3, [r7, #8]
 8003120:	2b00      	cmp	r3, #0
 8003122:	d101      	bne.n	8003128 <xQueueGenericCreateStatic+0x88>
 8003124:	2301      	movs	r3, #1
 8003126:	e000      	b.n	800312a <xQueueGenericCreateStatic+0x8a>
 8003128:	2300      	movs	r3, #0
 800312a:	2b00      	cmp	r3, #0
 800312c:	d10b      	bne.n	8003146 <xQueueGenericCreateStatic+0xa6>
	__asm volatile
 800312e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003132:	f383 8811 	msr	BASEPRI, r3
 8003136:	f3bf 8f6f 	isb	sy
 800313a:	f3bf 8f4f 	dsb	sy
 800313e:	61fb      	str	r3, [r7, #28]
}
 8003140:	bf00      	nop
 8003142:	bf00      	nop
 8003144:	e7fd      	b.n	8003142 <xQueueGenericCreateStatic+0xa2>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 8003146:	2348      	movs	r3, #72	@ 0x48
 8003148:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 800314a:	697b      	ldr	r3, [r7, #20]
 800314c:	2b48      	cmp	r3, #72	@ 0x48
 800314e:	d00b      	beq.n	8003168 <xQueueGenericCreateStatic+0xc8>
	__asm volatile
 8003150:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003154:	f383 8811 	msr	BASEPRI, r3
 8003158:	f3bf 8f6f 	isb	sy
 800315c:	f3bf 8f4f 	dsb	sy
 8003160:	61bb      	str	r3, [r7, #24]
}
 8003162:	bf00      	nop
 8003164:	bf00      	nop
 8003166:	e7fd      	b.n	8003164 <xQueueGenericCreateStatic+0xc4>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 8003168:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800316a:	683b      	ldr	r3, [r7, #0]
 800316c:	62fb      	str	r3, [r7, #44]	@ 0x2c

		if( pxNewQueue != NULL )
 800316e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003170:	2b00      	cmp	r3, #0
 8003172:	d00d      	beq.n	8003190 <xQueueGenericCreateStatic+0xf0>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8003174:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003176:	2201      	movs	r2, #1
 8003178:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800317c:	f897 2038 	ldrb.w	r2, [r7, #56]	@ 0x38
 8003180:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003182:	9300      	str	r3, [sp, #0]
 8003184:	4613      	mov	r3, r2
 8003186:	687a      	ldr	r2, [r7, #4]
 8003188:	68b9      	ldr	r1, [r7, #8]
 800318a:	68f8      	ldr	r0, [r7, #12]
 800318c:	f000 f840 	bl	8003210 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8003190:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
	}
 8003192:	4618      	mov	r0, r3
 8003194:	3730      	adds	r7, #48	@ 0x30
 8003196:	46bd      	mov	sp, r7
 8003198:	bd80      	pop	{r7, pc}

0800319a <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 800319a:	b580      	push	{r7, lr}
 800319c:	b08a      	sub	sp, #40	@ 0x28
 800319e:	af02      	add	r7, sp, #8
 80031a0:	60f8      	str	r0, [r7, #12]
 80031a2:	60b9      	str	r1, [r7, #8]
 80031a4:	4613      	mov	r3, r2
 80031a6:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 80031a8:	68fb      	ldr	r3, [r7, #12]
 80031aa:	2b00      	cmp	r3, #0
 80031ac:	d10b      	bne.n	80031c6 <xQueueGenericCreate+0x2c>
	__asm volatile
 80031ae:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80031b2:	f383 8811 	msr	BASEPRI, r3
 80031b6:	f3bf 8f6f 	isb	sy
 80031ba:	f3bf 8f4f 	dsb	sy
 80031be:	613b      	str	r3, [r7, #16]
}
 80031c0:	bf00      	nop
 80031c2:	bf00      	nop
 80031c4:	e7fd      	b.n	80031c2 <xQueueGenericCreate+0x28>

		/* Allocate enough space to hold the maximum number of items that
		can be in the queue at any time.  It is valid for uxItemSize to be
		zero in the case the queue is used as a semaphore. */
		xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80031c6:	68fb      	ldr	r3, [r7, #12]
 80031c8:	68ba      	ldr	r2, [r7, #8]
 80031ca:	fb02 f303 	mul.w	r3, r2, r3
 80031ce:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 80031d0:	69fb      	ldr	r3, [r7, #28]
 80031d2:	3348      	adds	r3, #72	@ 0x48
 80031d4:	4618      	mov	r0, r3
 80031d6:	f002 f911 	bl	80053fc <pvPortMalloc>
 80031da:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 80031dc:	69bb      	ldr	r3, [r7, #24]
 80031de:	2b00      	cmp	r3, #0
 80031e0:	d011      	beq.n	8003206 <xQueueGenericCreate+0x6c>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 80031e2:	69bb      	ldr	r3, [r7, #24]
 80031e4:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80031e6:	697b      	ldr	r3, [r7, #20]
 80031e8:	3348      	adds	r3, #72	@ 0x48
 80031ea:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 80031ec:	69bb      	ldr	r3, [r7, #24]
 80031ee:	2200      	movs	r2, #0
 80031f0:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 80031f4:	79fa      	ldrb	r2, [r7, #7]
 80031f6:	69bb      	ldr	r3, [r7, #24]
 80031f8:	9300      	str	r3, [sp, #0]
 80031fa:	4613      	mov	r3, r2
 80031fc:	697a      	ldr	r2, [r7, #20]
 80031fe:	68b9      	ldr	r1, [r7, #8]
 8003200:	68f8      	ldr	r0, [r7, #12]
 8003202:	f000 f805 	bl	8003210 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8003206:	69bb      	ldr	r3, [r7, #24]
	}
 8003208:	4618      	mov	r0, r3
 800320a:	3720      	adds	r7, #32
 800320c:	46bd      	mov	sp, r7
 800320e:	bd80      	pop	{r7, pc}

08003210 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8003210:	b580      	push	{r7, lr}
 8003212:	b084      	sub	sp, #16
 8003214:	af00      	add	r7, sp, #0
 8003216:	60f8      	str	r0, [r7, #12]
 8003218:	60b9      	str	r1, [r7, #8]
 800321a:	607a      	str	r2, [r7, #4]
 800321c:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 800321e:	68bb      	ldr	r3, [r7, #8]
 8003220:	2b00      	cmp	r3, #0
 8003222:	d103      	bne.n	800322c <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8003224:	69bb      	ldr	r3, [r7, #24]
 8003226:	69ba      	ldr	r2, [r7, #24]
 8003228:	601a      	str	r2, [r3, #0]
 800322a:	e002      	b.n	8003232 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 800322c:	69bb      	ldr	r3, [r7, #24]
 800322e:	687a      	ldr	r2, [r7, #4]
 8003230:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8003232:	69bb      	ldr	r3, [r7, #24]
 8003234:	68fa      	ldr	r2, [r7, #12]
 8003236:	63da      	str	r2, [r3, #60]	@ 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8003238:	69bb      	ldr	r3, [r7, #24]
 800323a:	68ba      	ldr	r2, [r7, #8]
 800323c:	641a      	str	r2, [r3, #64]	@ 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 800323e:	2101      	movs	r1, #1
 8003240:	69b8      	ldr	r0, [r7, #24]
 8003242:	f7ff fec3 	bl	8002fcc <xQueueGenericReset>
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8003246:	bf00      	nop
 8003248:	3710      	adds	r7, #16
 800324a:	46bd      	mov	sp, r7
 800324c:	bd80      	pop	{r7, pc}
	...

08003250 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8003250:	b580      	push	{r7, lr}
 8003252:	b08e      	sub	sp, #56	@ 0x38
 8003254:	af00      	add	r7, sp, #0
 8003256:	60f8      	str	r0, [r7, #12]
 8003258:	60b9      	str	r1, [r7, #8]
 800325a:	607a      	str	r2, [r7, #4]
 800325c:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 800325e:	2300      	movs	r3, #0
 8003260:	637b      	str	r3, [r7, #52]	@ 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8003262:	68fb      	ldr	r3, [r7, #12]
 8003264:	633b      	str	r3, [r7, #48]	@ 0x30

	configASSERT( pxQueue );
 8003266:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003268:	2b00      	cmp	r3, #0
 800326a:	d10b      	bne.n	8003284 <xQueueGenericSend+0x34>
	__asm volatile
 800326c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003270:	f383 8811 	msr	BASEPRI, r3
 8003274:	f3bf 8f6f 	isb	sy
 8003278:	f3bf 8f4f 	dsb	sy
 800327c:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 800327e:	bf00      	nop
 8003280:	bf00      	nop
 8003282:	e7fd      	b.n	8003280 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8003284:	68bb      	ldr	r3, [r7, #8]
 8003286:	2b00      	cmp	r3, #0
 8003288:	d103      	bne.n	8003292 <xQueueGenericSend+0x42>
 800328a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800328c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800328e:	2b00      	cmp	r3, #0
 8003290:	d101      	bne.n	8003296 <xQueueGenericSend+0x46>
 8003292:	2301      	movs	r3, #1
 8003294:	e000      	b.n	8003298 <xQueueGenericSend+0x48>
 8003296:	2300      	movs	r3, #0
 8003298:	2b00      	cmp	r3, #0
 800329a:	d10b      	bne.n	80032b4 <xQueueGenericSend+0x64>
	__asm volatile
 800329c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80032a0:	f383 8811 	msr	BASEPRI, r3
 80032a4:	f3bf 8f6f 	isb	sy
 80032a8:	f3bf 8f4f 	dsb	sy
 80032ac:	627b      	str	r3, [r7, #36]	@ 0x24
}
 80032ae:	bf00      	nop
 80032b0:	bf00      	nop
 80032b2:	e7fd      	b.n	80032b0 <xQueueGenericSend+0x60>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 80032b4:	683b      	ldr	r3, [r7, #0]
 80032b6:	2b02      	cmp	r3, #2
 80032b8:	d103      	bne.n	80032c2 <xQueueGenericSend+0x72>
 80032ba:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80032bc:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80032be:	2b01      	cmp	r3, #1
 80032c0:	d101      	bne.n	80032c6 <xQueueGenericSend+0x76>
 80032c2:	2301      	movs	r3, #1
 80032c4:	e000      	b.n	80032c8 <xQueueGenericSend+0x78>
 80032c6:	2300      	movs	r3, #0
 80032c8:	2b00      	cmp	r3, #0
 80032ca:	d10b      	bne.n	80032e4 <xQueueGenericSend+0x94>
	__asm volatile
 80032cc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80032d0:	f383 8811 	msr	BASEPRI, r3
 80032d4:	f3bf 8f6f 	isb	sy
 80032d8:	f3bf 8f4f 	dsb	sy
 80032dc:	623b      	str	r3, [r7, #32]
}
 80032de:	bf00      	nop
 80032e0:	bf00      	nop
 80032e2:	e7fd      	b.n	80032e0 <xQueueGenericSend+0x90>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80032e4:	f001 f9ec 	bl	80046c0 <xTaskGetSchedulerState>
 80032e8:	4603      	mov	r3, r0
 80032ea:	2b00      	cmp	r3, #0
 80032ec:	d102      	bne.n	80032f4 <xQueueGenericSend+0xa4>
 80032ee:	687b      	ldr	r3, [r7, #4]
 80032f0:	2b00      	cmp	r3, #0
 80032f2:	d101      	bne.n	80032f8 <xQueueGenericSend+0xa8>
 80032f4:	2301      	movs	r3, #1
 80032f6:	e000      	b.n	80032fa <xQueueGenericSend+0xaa>
 80032f8:	2300      	movs	r3, #0
 80032fa:	2b00      	cmp	r3, #0
 80032fc:	d10b      	bne.n	8003316 <xQueueGenericSend+0xc6>
	__asm volatile
 80032fe:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003302:	f383 8811 	msr	BASEPRI, r3
 8003306:	f3bf 8f6f 	isb	sy
 800330a:	f3bf 8f4f 	dsb	sy
 800330e:	61fb      	str	r3, [r7, #28]
}
 8003310:	bf00      	nop
 8003312:	bf00      	nop
 8003314:	e7fd      	b.n	8003312 <xQueueGenericSend+0xc2>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8003316:	f001 ff4f 	bl	80051b8 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800331a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800331c:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800331e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003320:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003322:	429a      	cmp	r2, r3
 8003324:	d302      	bcc.n	800332c <xQueueGenericSend+0xdc>
 8003326:	683b      	ldr	r3, [r7, #0]
 8003328:	2b02      	cmp	r3, #2
 800332a:	d129      	bne.n	8003380 <xQueueGenericSend+0x130>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800332c:	683a      	ldr	r2, [r7, #0]
 800332e:	68b9      	ldr	r1, [r7, #8]
 8003330:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8003332:	f000 fa0f 	bl	8003754 <prvCopyDataToQueue>
 8003336:	62f8      	str	r0, [r7, #44]	@ 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8003338:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800333a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800333c:	2b00      	cmp	r3, #0
 800333e:	d010      	beq.n	8003362 <xQueueGenericSend+0x112>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8003340:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003342:	3324      	adds	r3, #36	@ 0x24
 8003344:	4618      	mov	r0, r3
 8003346:	f000 fff5 	bl	8004334 <xTaskRemoveFromEventList>
 800334a:	4603      	mov	r3, r0
 800334c:	2b00      	cmp	r3, #0
 800334e:	d013      	beq.n	8003378 <xQueueGenericSend+0x128>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8003350:	4b3f      	ldr	r3, [pc, #252]	@ (8003450 <xQueueGenericSend+0x200>)
 8003352:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8003356:	601a      	str	r2, [r3, #0]
 8003358:	f3bf 8f4f 	dsb	sy
 800335c:	f3bf 8f6f 	isb	sy
 8003360:	e00a      	b.n	8003378 <xQueueGenericSend+0x128>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 8003362:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003364:	2b00      	cmp	r3, #0
 8003366:	d007      	beq.n	8003378 <xQueueGenericSend+0x128>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8003368:	4b39      	ldr	r3, [pc, #228]	@ (8003450 <xQueueGenericSend+0x200>)
 800336a:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800336e:	601a      	str	r2, [r3, #0]
 8003370:	f3bf 8f4f 	dsb	sy
 8003374:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8003378:	f001 ff50 	bl	800521c <vPortExitCritical>
				return pdPASS;
 800337c:	2301      	movs	r3, #1
 800337e:	e063      	b.n	8003448 <xQueueGenericSend+0x1f8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8003380:	687b      	ldr	r3, [r7, #4]
 8003382:	2b00      	cmp	r3, #0
 8003384:	d103      	bne.n	800338e <xQueueGenericSend+0x13e>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8003386:	f001 ff49 	bl	800521c <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 800338a:	2300      	movs	r3, #0
 800338c:	e05c      	b.n	8003448 <xQueueGenericSend+0x1f8>
				}
				else if( xEntryTimeSet == pdFALSE )
 800338e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003390:	2b00      	cmp	r3, #0
 8003392:	d106      	bne.n	80033a2 <xQueueGenericSend+0x152>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8003394:	f107 0314 	add.w	r3, r7, #20
 8003398:	4618      	mov	r0, r3
 800339a:	f001 f82f 	bl	80043fc <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800339e:	2301      	movs	r3, #1
 80033a0:	637b      	str	r3, [r7, #52]	@ 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 80033a2:	f001 ff3b 	bl	800521c <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 80033a6:	f000 fd99 	bl	8003edc <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 80033aa:	f001 ff05 	bl	80051b8 <vPortEnterCritical>
 80033ae:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80033b0:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 80033b4:	b25b      	sxtb	r3, r3
 80033b6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80033ba:	d103      	bne.n	80033c4 <xQueueGenericSend+0x174>
 80033bc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80033be:	2200      	movs	r2, #0
 80033c0:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80033c4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80033c6:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 80033ca:	b25b      	sxtb	r3, r3
 80033cc:	f1b3 3fff 	cmp.w	r3, #4294967295
 80033d0:	d103      	bne.n	80033da <xQueueGenericSend+0x18a>
 80033d2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80033d4:	2200      	movs	r2, #0
 80033d6:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 80033da:	f001 ff1f 	bl	800521c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80033de:	1d3a      	adds	r2, r7, #4
 80033e0:	f107 0314 	add.w	r3, r7, #20
 80033e4:	4611      	mov	r1, r2
 80033e6:	4618      	mov	r0, r3
 80033e8:	f001 f81e 	bl	8004428 <xTaskCheckForTimeOut>
 80033ec:	4603      	mov	r3, r0
 80033ee:	2b00      	cmp	r3, #0
 80033f0:	d124      	bne.n	800343c <xQueueGenericSend+0x1ec>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 80033f2:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 80033f4:	f000 faa6 	bl	8003944 <prvIsQueueFull>
 80033f8:	4603      	mov	r3, r0
 80033fa:	2b00      	cmp	r3, #0
 80033fc:	d018      	beq.n	8003430 <xQueueGenericSend+0x1e0>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 80033fe:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003400:	3310      	adds	r3, #16
 8003402:	687a      	ldr	r2, [r7, #4]
 8003404:	4611      	mov	r1, r2
 8003406:	4618      	mov	r0, r3
 8003408:	f000 ff42 	bl	8004290 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 800340c:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800340e:	f000 fa31 	bl	8003874 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 8003412:	f000 fd71 	bl	8003ef8 <xTaskResumeAll>
 8003416:	4603      	mov	r3, r0
 8003418:	2b00      	cmp	r3, #0
 800341a:	f47f af7c 	bne.w	8003316 <xQueueGenericSend+0xc6>
				{
					portYIELD_WITHIN_API();
 800341e:	4b0c      	ldr	r3, [pc, #48]	@ (8003450 <xQueueGenericSend+0x200>)
 8003420:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8003424:	601a      	str	r2, [r3, #0]
 8003426:	f3bf 8f4f 	dsb	sy
 800342a:	f3bf 8f6f 	isb	sy
 800342e:	e772      	b.n	8003316 <xQueueGenericSend+0xc6>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8003430:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8003432:	f000 fa1f 	bl	8003874 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8003436:	f000 fd5f 	bl	8003ef8 <xTaskResumeAll>
 800343a:	e76c      	b.n	8003316 <xQueueGenericSend+0xc6>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 800343c:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800343e:	f000 fa19 	bl	8003874 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8003442:	f000 fd59 	bl	8003ef8 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 8003446:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 8003448:	4618      	mov	r0, r3
 800344a:	3738      	adds	r7, #56	@ 0x38
 800344c:	46bd      	mov	sp, r7
 800344e:	bd80      	pop	{r7, pc}
 8003450:	e000ed04 	.word	0xe000ed04

08003454 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 8003454:	b580      	push	{r7, lr}
 8003456:	b090      	sub	sp, #64	@ 0x40
 8003458:	af00      	add	r7, sp, #0
 800345a:	60f8      	str	r0, [r7, #12]
 800345c:	60b9      	str	r1, [r7, #8]
 800345e:	607a      	str	r2, [r7, #4]
 8003460:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8003462:	68fb      	ldr	r3, [r7, #12]
 8003464:	63bb      	str	r3, [r7, #56]	@ 0x38

	configASSERT( pxQueue );
 8003466:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003468:	2b00      	cmp	r3, #0
 800346a:	d10b      	bne.n	8003484 <xQueueGenericSendFromISR+0x30>
	__asm volatile
 800346c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003470:	f383 8811 	msr	BASEPRI, r3
 8003474:	f3bf 8f6f 	isb	sy
 8003478:	f3bf 8f4f 	dsb	sy
 800347c:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 800347e:	bf00      	nop
 8003480:	bf00      	nop
 8003482:	e7fd      	b.n	8003480 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8003484:	68bb      	ldr	r3, [r7, #8]
 8003486:	2b00      	cmp	r3, #0
 8003488:	d103      	bne.n	8003492 <xQueueGenericSendFromISR+0x3e>
 800348a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800348c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800348e:	2b00      	cmp	r3, #0
 8003490:	d101      	bne.n	8003496 <xQueueGenericSendFromISR+0x42>
 8003492:	2301      	movs	r3, #1
 8003494:	e000      	b.n	8003498 <xQueueGenericSendFromISR+0x44>
 8003496:	2300      	movs	r3, #0
 8003498:	2b00      	cmp	r3, #0
 800349a:	d10b      	bne.n	80034b4 <xQueueGenericSendFromISR+0x60>
	__asm volatile
 800349c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80034a0:	f383 8811 	msr	BASEPRI, r3
 80034a4:	f3bf 8f6f 	isb	sy
 80034a8:	f3bf 8f4f 	dsb	sy
 80034ac:	627b      	str	r3, [r7, #36]	@ 0x24
}
 80034ae:	bf00      	nop
 80034b0:	bf00      	nop
 80034b2:	e7fd      	b.n	80034b0 <xQueueGenericSendFromISR+0x5c>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 80034b4:	683b      	ldr	r3, [r7, #0]
 80034b6:	2b02      	cmp	r3, #2
 80034b8:	d103      	bne.n	80034c2 <xQueueGenericSendFromISR+0x6e>
 80034ba:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80034bc:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80034be:	2b01      	cmp	r3, #1
 80034c0:	d101      	bne.n	80034c6 <xQueueGenericSendFromISR+0x72>
 80034c2:	2301      	movs	r3, #1
 80034c4:	e000      	b.n	80034c8 <xQueueGenericSendFromISR+0x74>
 80034c6:	2300      	movs	r3, #0
 80034c8:	2b00      	cmp	r3, #0
 80034ca:	d10b      	bne.n	80034e4 <xQueueGenericSendFromISR+0x90>
	__asm volatile
 80034cc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80034d0:	f383 8811 	msr	BASEPRI, r3
 80034d4:	f3bf 8f6f 	isb	sy
 80034d8:	f3bf 8f4f 	dsb	sy
 80034dc:	623b      	str	r3, [r7, #32]
}
 80034de:	bf00      	nop
 80034e0:	bf00      	nop
 80034e2:	e7fd      	b.n	80034e0 <xQueueGenericSendFromISR+0x8c>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 80034e4:	f001 ff48 	bl	8005378 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 80034e8:	f3ef 8211 	mrs	r2, BASEPRI
 80034ec:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80034f0:	f383 8811 	msr	BASEPRI, r3
 80034f4:	f3bf 8f6f 	isb	sy
 80034f8:	f3bf 8f4f 	dsb	sy
 80034fc:	61fa      	str	r2, [r7, #28]
 80034fe:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 8003500:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8003502:	637b      	str	r3, [r7, #52]	@ 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8003504:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003506:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8003508:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800350a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800350c:	429a      	cmp	r2, r3
 800350e:	d302      	bcc.n	8003516 <xQueueGenericSendFromISR+0xc2>
 8003510:	683b      	ldr	r3, [r7, #0]
 8003512:	2b02      	cmp	r3, #2
 8003514:	d12f      	bne.n	8003576 <xQueueGenericSendFromISR+0x122>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8003516:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003518:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800351c:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 8003520:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003522:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003524:	62fb      	str	r3, [r7, #44]	@ 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8003526:	683a      	ldr	r2, [r7, #0]
 8003528:	68b9      	ldr	r1, [r7, #8]
 800352a:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 800352c:	f000 f912 	bl	8003754 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8003530:	f997 3033 	ldrsb.w	r3, [r7, #51]	@ 0x33
 8003534:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003538:	d112      	bne.n	8003560 <xQueueGenericSendFromISR+0x10c>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800353a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800353c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800353e:	2b00      	cmp	r3, #0
 8003540:	d016      	beq.n	8003570 <xQueueGenericSendFromISR+0x11c>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8003542:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003544:	3324      	adds	r3, #36	@ 0x24
 8003546:	4618      	mov	r0, r3
 8003548:	f000 fef4 	bl	8004334 <xTaskRemoveFromEventList>
 800354c:	4603      	mov	r3, r0
 800354e:	2b00      	cmp	r3, #0
 8003550:	d00e      	beq.n	8003570 <xQueueGenericSendFromISR+0x11c>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8003552:	687b      	ldr	r3, [r7, #4]
 8003554:	2b00      	cmp	r3, #0
 8003556:	d00b      	beq.n	8003570 <xQueueGenericSendFromISR+0x11c>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8003558:	687b      	ldr	r3, [r7, #4]
 800355a:	2201      	movs	r2, #1
 800355c:	601a      	str	r2, [r3, #0]
 800355e:	e007      	b.n	8003570 <xQueueGenericSendFromISR+0x11c>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8003560:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 8003564:	3301      	adds	r3, #1
 8003566:	b2db      	uxtb	r3, r3
 8003568:	b25a      	sxtb	r2, r3
 800356a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800356c:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
			}

			xReturn = pdPASS;
 8003570:	2301      	movs	r3, #1
 8003572:	63fb      	str	r3, [r7, #60]	@ 0x3c
		{
 8003574:	e001      	b.n	800357a <xQueueGenericSendFromISR+0x126>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8003576:	2300      	movs	r3, #0
 8003578:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800357a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800357c:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 800357e:	697b      	ldr	r3, [r7, #20]
 8003580:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 8003584:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8003586:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
}
 8003588:	4618      	mov	r0, r3
 800358a:	3740      	adds	r7, #64	@ 0x40
 800358c:	46bd      	mov	sp, r7
 800358e:	bd80      	pop	{r7, pc}

08003590 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8003590:	b580      	push	{r7, lr}
 8003592:	b08c      	sub	sp, #48	@ 0x30
 8003594:	af00      	add	r7, sp, #0
 8003596:	60f8      	str	r0, [r7, #12]
 8003598:	60b9      	str	r1, [r7, #8]
 800359a:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 800359c:	2300      	movs	r3, #0
 800359e:	62fb      	str	r3, [r7, #44]	@ 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 80035a0:	68fb      	ldr	r3, [r7, #12]
 80035a2:	62bb      	str	r3, [r7, #40]	@ 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 80035a4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80035a6:	2b00      	cmp	r3, #0
 80035a8:	d10b      	bne.n	80035c2 <xQueueReceive+0x32>
	__asm volatile
 80035aa:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80035ae:	f383 8811 	msr	BASEPRI, r3
 80035b2:	f3bf 8f6f 	isb	sy
 80035b6:	f3bf 8f4f 	dsb	sy
 80035ba:	623b      	str	r3, [r7, #32]
}
 80035bc:	bf00      	nop
 80035be:	bf00      	nop
 80035c0:	e7fd      	b.n	80035be <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80035c2:	68bb      	ldr	r3, [r7, #8]
 80035c4:	2b00      	cmp	r3, #0
 80035c6:	d103      	bne.n	80035d0 <xQueueReceive+0x40>
 80035c8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80035ca:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80035cc:	2b00      	cmp	r3, #0
 80035ce:	d101      	bne.n	80035d4 <xQueueReceive+0x44>
 80035d0:	2301      	movs	r3, #1
 80035d2:	e000      	b.n	80035d6 <xQueueReceive+0x46>
 80035d4:	2300      	movs	r3, #0
 80035d6:	2b00      	cmp	r3, #0
 80035d8:	d10b      	bne.n	80035f2 <xQueueReceive+0x62>
	__asm volatile
 80035da:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80035de:	f383 8811 	msr	BASEPRI, r3
 80035e2:	f3bf 8f6f 	isb	sy
 80035e6:	f3bf 8f4f 	dsb	sy
 80035ea:	61fb      	str	r3, [r7, #28]
}
 80035ec:	bf00      	nop
 80035ee:	bf00      	nop
 80035f0:	e7fd      	b.n	80035ee <xQueueReceive+0x5e>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80035f2:	f001 f865 	bl	80046c0 <xTaskGetSchedulerState>
 80035f6:	4603      	mov	r3, r0
 80035f8:	2b00      	cmp	r3, #0
 80035fa:	d102      	bne.n	8003602 <xQueueReceive+0x72>
 80035fc:	687b      	ldr	r3, [r7, #4]
 80035fe:	2b00      	cmp	r3, #0
 8003600:	d101      	bne.n	8003606 <xQueueReceive+0x76>
 8003602:	2301      	movs	r3, #1
 8003604:	e000      	b.n	8003608 <xQueueReceive+0x78>
 8003606:	2300      	movs	r3, #0
 8003608:	2b00      	cmp	r3, #0
 800360a:	d10b      	bne.n	8003624 <xQueueReceive+0x94>
	__asm volatile
 800360c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003610:	f383 8811 	msr	BASEPRI, r3
 8003614:	f3bf 8f6f 	isb	sy
 8003618:	f3bf 8f4f 	dsb	sy
 800361c:	61bb      	str	r3, [r7, #24]
}
 800361e:	bf00      	nop
 8003620:	bf00      	nop
 8003622:	e7fd      	b.n	8003620 <xQueueReceive+0x90>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8003624:	f001 fdc8 	bl	80051b8 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8003628:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800362a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800362c:	627b      	str	r3, [r7, #36]	@ 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800362e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003630:	2b00      	cmp	r3, #0
 8003632:	d01f      	beq.n	8003674 <xQueueReceive+0xe4>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8003634:	68b9      	ldr	r1, [r7, #8]
 8003636:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8003638:	f000 f8f6 	bl	8003828 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800363c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800363e:	1e5a      	subs	r2, r3, #1
 8003640:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003642:	639a      	str	r2, [r3, #56]	@ 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8003644:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003646:	691b      	ldr	r3, [r3, #16]
 8003648:	2b00      	cmp	r3, #0
 800364a:	d00f      	beq.n	800366c <xQueueReceive+0xdc>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800364c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800364e:	3310      	adds	r3, #16
 8003650:	4618      	mov	r0, r3
 8003652:	f000 fe6f 	bl	8004334 <xTaskRemoveFromEventList>
 8003656:	4603      	mov	r3, r0
 8003658:	2b00      	cmp	r3, #0
 800365a:	d007      	beq.n	800366c <xQueueReceive+0xdc>
					{
						queueYIELD_IF_USING_PREEMPTION();
 800365c:	4b3c      	ldr	r3, [pc, #240]	@ (8003750 <xQueueReceive+0x1c0>)
 800365e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8003662:	601a      	str	r2, [r3, #0]
 8003664:	f3bf 8f4f 	dsb	sy
 8003668:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 800366c:	f001 fdd6 	bl	800521c <vPortExitCritical>
				return pdPASS;
 8003670:	2301      	movs	r3, #1
 8003672:	e069      	b.n	8003748 <xQueueReceive+0x1b8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8003674:	687b      	ldr	r3, [r7, #4]
 8003676:	2b00      	cmp	r3, #0
 8003678:	d103      	bne.n	8003682 <xQueueReceive+0xf2>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800367a:	f001 fdcf 	bl	800521c <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 800367e:	2300      	movs	r3, #0
 8003680:	e062      	b.n	8003748 <xQueueReceive+0x1b8>
				}
				else if( xEntryTimeSet == pdFALSE )
 8003682:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003684:	2b00      	cmp	r3, #0
 8003686:	d106      	bne.n	8003696 <xQueueReceive+0x106>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8003688:	f107 0310 	add.w	r3, r7, #16
 800368c:	4618      	mov	r0, r3
 800368e:	f000 feb5 	bl	80043fc <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8003692:	2301      	movs	r3, #1
 8003694:	62fb      	str	r3, [r7, #44]	@ 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8003696:	f001 fdc1 	bl	800521c <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800369a:	f000 fc1f 	bl	8003edc <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800369e:	f001 fd8b 	bl	80051b8 <vPortEnterCritical>
 80036a2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80036a4:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 80036a8:	b25b      	sxtb	r3, r3
 80036aa:	f1b3 3fff 	cmp.w	r3, #4294967295
 80036ae:	d103      	bne.n	80036b8 <xQueueReceive+0x128>
 80036b0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80036b2:	2200      	movs	r2, #0
 80036b4:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80036b8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80036ba:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 80036be:	b25b      	sxtb	r3, r3
 80036c0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80036c4:	d103      	bne.n	80036ce <xQueueReceive+0x13e>
 80036c6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80036c8:	2200      	movs	r2, #0
 80036ca:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 80036ce:	f001 fda5 	bl	800521c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80036d2:	1d3a      	adds	r2, r7, #4
 80036d4:	f107 0310 	add.w	r3, r7, #16
 80036d8:	4611      	mov	r1, r2
 80036da:	4618      	mov	r0, r3
 80036dc:	f000 fea4 	bl	8004428 <xTaskCheckForTimeOut>
 80036e0:	4603      	mov	r3, r0
 80036e2:	2b00      	cmp	r3, #0
 80036e4:	d123      	bne.n	800372e <xQueueReceive+0x19e>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80036e6:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80036e8:	f000 f916 	bl	8003918 <prvIsQueueEmpty>
 80036ec:	4603      	mov	r3, r0
 80036ee:	2b00      	cmp	r3, #0
 80036f0:	d017      	beq.n	8003722 <xQueueReceive+0x192>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 80036f2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80036f4:	3324      	adds	r3, #36	@ 0x24
 80036f6:	687a      	ldr	r2, [r7, #4]
 80036f8:	4611      	mov	r1, r2
 80036fa:	4618      	mov	r0, r3
 80036fc:	f000 fdc8 	bl	8004290 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8003700:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8003702:	f000 f8b7 	bl	8003874 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8003706:	f000 fbf7 	bl	8003ef8 <xTaskResumeAll>
 800370a:	4603      	mov	r3, r0
 800370c:	2b00      	cmp	r3, #0
 800370e:	d189      	bne.n	8003624 <xQueueReceive+0x94>
				{
					portYIELD_WITHIN_API();
 8003710:	4b0f      	ldr	r3, [pc, #60]	@ (8003750 <xQueueReceive+0x1c0>)
 8003712:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8003716:	601a      	str	r2, [r3, #0]
 8003718:	f3bf 8f4f 	dsb	sy
 800371c:	f3bf 8f6f 	isb	sy
 8003720:	e780      	b.n	8003624 <xQueueReceive+0x94>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 8003722:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8003724:	f000 f8a6 	bl	8003874 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8003728:	f000 fbe6 	bl	8003ef8 <xTaskResumeAll>
 800372c:	e77a      	b.n	8003624 <xQueueReceive+0x94>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 800372e:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8003730:	f000 f8a0 	bl	8003874 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8003734:	f000 fbe0 	bl	8003ef8 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8003738:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800373a:	f000 f8ed 	bl	8003918 <prvIsQueueEmpty>
 800373e:	4603      	mov	r3, r0
 8003740:	2b00      	cmp	r3, #0
 8003742:	f43f af6f 	beq.w	8003624 <xQueueReceive+0x94>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8003746:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8003748:	4618      	mov	r0, r3
 800374a:	3730      	adds	r7, #48	@ 0x30
 800374c:	46bd      	mov	sp, r7
 800374e:	bd80      	pop	{r7, pc}
 8003750:	e000ed04 	.word	0xe000ed04

08003754 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8003754:	b580      	push	{r7, lr}
 8003756:	b086      	sub	sp, #24
 8003758:	af00      	add	r7, sp, #0
 800375a:	60f8      	str	r0, [r7, #12]
 800375c:	60b9      	str	r1, [r7, #8]
 800375e:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8003760:	2300      	movs	r3, #0
 8003762:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8003764:	68fb      	ldr	r3, [r7, #12]
 8003766:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003768:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 800376a:	68fb      	ldr	r3, [r7, #12]
 800376c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800376e:	2b00      	cmp	r3, #0
 8003770:	d10d      	bne.n	800378e <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8003772:	68fb      	ldr	r3, [r7, #12]
 8003774:	681b      	ldr	r3, [r3, #0]
 8003776:	2b00      	cmp	r3, #0
 8003778:	d14d      	bne.n	8003816 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 800377a:	68fb      	ldr	r3, [r7, #12]
 800377c:	689b      	ldr	r3, [r3, #8]
 800377e:	4618      	mov	r0, r3
 8003780:	f000 ffbc 	bl	80046fc <xTaskPriorityDisinherit>
 8003784:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 8003786:	68fb      	ldr	r3, [r7, #12]
 8003788:	2200      	movs	r2, #0
 800378a:	609a      	str	r2, [r3, #8]
 800378c:	e043      	b.n	8003816 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 800378e:	687b      	ldr	r3, [r7, #4]
 8003790:	2b00      	cmp	r3, #0
 8003792:	d119      	bne.n	80037c8 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8003794:	68fb      	ldr	r3, [r7, #12]
 8003796:	6858      	ldr	r0, [r3, #4]
 8003798:	68fb      	ldr	r3, [r7, #12]
 800379a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800379c:	461a      	mov	r2, r3
 800379e:	68b9      	ldr	r1, [r7, #8]
 80037a0:	f003 fabf 	bl	8006d22 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 80037a4:	68fb      	ldr	r3, [r7, #12]
 80037a6:	685a      	ldr	r2, [r3, #4]
 80037a8:	68fb      	ldr	r3, [r7, #12]
 80037aa:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80037ac:	441a      	add	r2, r3
 80037ae:	68fb      	ldr	r3, [r7, #12]
 80037b0:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 80037b2:	68fb      	ldr	r3, [r7, #12]
 80037b4:	685a      	ldr	r2, [r3, #4]
 80037b6:	68fb      	ldr	r3, [r7, #12]
 80037b8:	689b      	ldr	r3, [r3, #8]
 80037ba:	429a      	cmp	r2, r3
 80037bc:	d32b      	bcc.n	8003816 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 80037be:	68fb      	ldr	r3, [r7, #12]
 80037c0:	681a      	ldr	r2, [r3, #0]
 80037c2:	68fb      	ldr	r3, [r7, #12]
 80037c4:	605a      	str	r2, [r3, #4]
 80037c6:	e026      	b.n	8003816 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 80037c8:	68fb      	ldr	r3, [r7, #12]
 80037ca:	68d8      	ldr	r0, [r3, #12]
 80037cc:	68fb      	ldr	r3, [r7, #12]
 80037ce:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80037d0:	461a      	mov	r2, r3
 80037d2:	68b9      	ldr	r1, [r7, #8]
 80037d4:	f003 faa5 	bl	8006d22 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 80037d8:	68fb      	ldr	r3, [r7, #12]
 80037da:	68da      	ldr	r2, [r3, #12]
 80037dc:	68fb      	ldr	r3, [r7, #12]
 80037de:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80037e0:	425b      	negs	r3, r3
 80037e2:	441a      	add	r2, r3
 80037e4:	68fb      	ldr	r3, [r7, #12]
 80037e6:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 80037e8:	68fb      	ldr	r3, [r7, #12]
 80037ea:	68da      	ldr	r2, [r3, #12]
 80037ec:	68fb      	ldr	r3, [r7, #12]
 80037ee:	681b      	ldr	r3, [r3, #0]
 80037f0:	429a      	cmp	r2, r3
 80037f2:	d207      	bcs.n	8003804 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 80037f4:	68fb      	ldr	r3, [r7, #12]
 80037f6:	689a      	ldr	r2, [r3, #8]
 80037f8:	68fb      	ldr	r3, [r7, #12]
 80037fa:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80037fc:	425b      	negs	r3, r3
 80037fe:	441a      	add	r2, r3
 8003800:	68fb      	ldr	r3, [r7, #12]
 8003802:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8003804:	687b      	ldr	r3, [r7, #4]
 8003806:	2b02      	cmp	r3, #2
 8003808:	d105      	bne.n	8003816 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800380a:	693b      	ldr	r3, [r7, #16]
 800380c:	2b00      	cmp	r3, #0
 800380e:	d002      	beq.n	8003816 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8003810:	693b      	ldr	r3, [r7, #16]
 8003812:	3b01      	subs	r3, #1
 8003814:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8003816:	693b      	ldr	r3, [r7, #16]
 8003818:	1c5a      	adds	r2, r3, #1
 800381a:	68fb      	ldr	r3, [r7, #12]
 800381c:	639a      	str	r2, [r3, #56]	@ 0x38

	return xReturn;
 800381e:	697b      	ldr	r3, [r7, #20]
}
 8003820:	4618      	mov	r0, r3
 8003822:	3718      	adds	r7, #24
 8003824:	46bd      	mov	sp, r7
 8003826:	bd80      	pop	{r7, pc}

08003828 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8003828:	b580      	push	{r7, lr}
 800382a:	b082      	sub	sp, #8
 800382c:	af00      	add	r7, sp, #0
 800382e:	6078      	str	r0, [r7, #4]
 8003830:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8003832:	687b      	ldr	r3, [r7, #4]
 8003834:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003836:	2b00      	cmp	r3, #0
 8003838:	d018      	beq.n	800386c <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800383a:	687b      	ldr	r3, [r7, #4]
 800383c:	68da      	ldr	r2, [r3, #12]
 800383e:	687b      	ldr	r3, [r7, #4]
 8003840:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003842:	441a      	add	r2, r3
 8003844:	687b      	ldr	r3, [r7, #4]
 8003846:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8003848:	687b      	ldr	r3, [r7, #4]
 800384a:	68da      	ldr	r2, [r3, #12]
 800384c:	687b      	ldr	r3, [r7, #4]
 800384e:	689b      	ldr	r3, [r3, #8]
 8003850:	429a      	cmp	r2, r3
 8003852:	d303      	bcc.n	800385c <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8003854:	687b      	ldr	r3, [r7, #4]
 8003856:	681a      	ldr	r2, [r3, #0]
 8003858:	687b      	ldr	r3, [r7, #4]
 800385a:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800385c:	687b      	ldr	r3, [r7, #4]
 800385e:	68d9      	ldr	r1, [r3, #12]
 8003860:	687b      	ldr	r3, [r7, #4]
 8003862:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003864:	461a      	mov	r2, r3
 8003866:	6838      	ldr	r0, [r7, #0]
 8003868:	f003 fa5b 	bl	8006d22 <memcpy>
	}
}
 800386c:	bf00      	nop
 800386e:	3708      	adds	r7, #8
 8003870:	46bd      	mov	sp, r7
 8003872:	bd80      	pop	{r7, pc}

08003874 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8003874:	b580      	push	{r7, lr}
 8003876:	b084      	sub	sp, #16
 8003878:	af00      	add	r7, sp, #0
 800387a:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 800387c:	f001 fc9c 	bl	80051b8 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8003880:	687b      	ldr	r3, [r7, #4]
 8003882:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8003886:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8003888:	e011      	b.n	80038ae <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800388a:	687b      	ldr	r3, [r7, #4]
 800388c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800388e:	2b00      	cmp	r3, #0
 8003890:	d012      	beq.n	80038b8 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8003892:	687b      	ldr	r3, [r7, #4]
 8003894:	3324      	adds	r3, #36	@ 0x24
 8003896:	4618      	mov	r0, r3
 8003898:	f000 fd4c 	bl	8004334 <xTaskRemoveFromEventList>
 800389c:	4603      	mov	r3, r0
 800389e:	2b00      	cmp	r3, #0
 80038a0:	d001      	beq.n	80038a6 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 80038a2:	f000 fe25 	bl	80044f0 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 80038a6:	7bfb      	ldrb	r3, [r7, #15]
 80038a8:	3b01      	subs	r3, #1
 80038aa:	b2db      	uxtb	r3, r3
 80038ac:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 80038ae:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80038b2:	2b00      	cmp	r3, #0
 80038b4:	dce9      	bgt.n	800388a <prvUnlockQueue+0x16>
 80038b6:	e000      	b.n	80038ba <prvUnlockQueue+0x46>
					break;
 80038b8:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 80038ba:	687b      	ldr	r3, [r7, #4]
 80038bc:	22ff      	movs	r2, #255	@ 0xff
 80038be:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
	}
	taskEXIT_CRITICAL();
 80038c2:	f001 fcab 	bl	800521c <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 80038c6:	f001 fc77 	bl	80051b8 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 80038ca:	687b      	ldr	r3, [r7, #4]
 80038cc:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 80038d0:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 80038d2:	e011      	b.n	80038f8 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80038d4:	687b      	ldr	r3, [r7, #4]
 80038d6:	691b      	ldr	r3, [r3, #16]
 80038d8:	2b00      	cmp	r3, #0
 80038da:	d012      	beq.n	8003902 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80038dc:	687b      	ldr	r3, [r7, #4]
 80038de:	3310      	adds	r3, #16
 80038e0:	4618      	mov	r0, r3
 80038e2:	f000 fd27 	bl	8004334 <xTaskRemoveFromEventList>
 80038e6:	4603      	mov	r3, r0
 80038e8:	2b00      	cmp	r3, #0
 80038ea:	d001      	beq.n	80038f0 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 80038ec:	f000 fe00 	bl	80044f0 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 80038f0:	7bbb      	ldrb	r3, [r7, #14]
 80038f2:	3b01      	subs	r3, #1
 80038f4:	b2db      	uxtb	r3, r3
 80038f6:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 80038f8:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80038fc:	2b00      	cmp	r3, #0
 80038fe:	dce9      	bgt.n	80038d4 <prvUnlockQueue+0x60>
 8003900:	e000      	b.n	8003904 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 8003902:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8003904:	687b      	ldr	r3, [r7, #4]
 8003906:	22ff      	movs	r2, #255	@ 0xff
 8003908:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
	}
	taskEXIT_CRITICAL();
 800390c:	f001 fc86 	bl	800521c <vPortExitCritical>
}
 8003910:	bf00      	nop
 8003912:	3710      	adds	r7, #16
 8003914:	46bd      	mov	sp, r7
 8003916:	bd80      	pop	{r7, pc}

08003918 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8003918:	b580      	push	{r7, lr}
 800391a:	b084      	sub	sp, #16
 800391c:	af00      	add	r7, sp, #0
 800391e:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8003920:	f001 fc4a 	bl	80051b8 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8003924:	687b      	ldr	r3, [r7, #4]
 8003926:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003928:	2b00      	cmp	r3, #0
 800392a:	d102      	bne.n	8003932 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 800392c:	2301      	movs	r3, #1
 800392e:	60fb      	str	r3, [r7, #12]
 8003930:	e001      	b.n	8003936 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 8003932:	2300      	movs	r3, #0
 8003934:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8003936:	f001 fc71 	bl	800521c <vPortExitCritical>

	return xReturn;
 800393a:	68fb      	ldr	r3, [r7, #12]
}
 800393c:	4618      	mov	r0, r3
 800393e:	3710      	adds	r7, #16
 8003940:	46bd      	mov	sp, r7
 8003942:	bd80      	pop	{r7, pc}

08003944 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8003944:	b580      	push	{r7, lr}
 8003946:	b084      	sub	sp, #16
 8003948:	af00      	add	r7, sp, #0
 800394a:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800394c:	f001 fc34 	bl	80051b8 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8003950:	687b      	ldr	r3, [r7, #4]
 8003952:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8003954:	687b      	ldr	r3, [r7, #4]
 8003956:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003958:	429a      	cmp	r2, r3
 800395a:	d102      	bne.n	8003962 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 800395c:	2301      	movs	r3, #1
 800395e:	60fb      	str	r3, [r7, #12]
 8003960:	e001      	b.n	8003966 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 8003962:	2300      	movs	r3, #0
 8003964:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8003966:	f001 fc59 	bl	800521c <vPortExitCritical>

	return xReturn;
 800396a:	68fb      	ldr	r3, [r7, #12]
}
 800396c:	4618      	mov	r0, r3
 800396e:	3710      	adds	r7, #16
 8003970:	46bd      	mov	sp, r7
 8003972:	bd80      	pop	{r7, pc}

08003974 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 8003974:	b480      	push	{r7}
 8003976:	b085      	sub	sp, #20
 8003978:	af00      	add	r7, sp, #0
 800397a:	6078      	str	r0, [r7, #4]
 800397c:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800397e:	2300      	movs	r3, #0
 8003980:	60fb      	str	r3, [r7, #12]
 8003982:	e014      	b.n	80039ae <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 8003984:	4a0f      	ldr	r2, [pc, #60]	@ (80039c4 <vQueueAddToRegistry+0x50>)
 8003986:	68fb      	ldr	r3, [r7, #12]
 8003988:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 800398c:	2b00      	cmp	r3, #0
 800398e:	d10b      	bne.n	80039a8 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 8003990:	490c      	ldr	r1, [pc, #48]	@ (80039c4 <vQueueAddToRegistry+0x50>)
 8003992:	68fb      	ldr	r3, [r7, #12]
 8003994:	683a      	ldr	r2, [r7, #0]
 8003996:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 800399a:	4a0a      	ldr	r2, [pc, #40]	@ (80039c4 <vQueueAddToRegistry+0x50>)
 800399c:	68fb      	ldr	r3, [r7, #12]
 800399e:	00db      	lsls	r3, r3, #3
 80039a0:	4413      	add	r3, r2
 80039a2:	687a      	ldr	r2, [r7, #4]
 80039a4:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 80039a6:	e006      	b.n	80039b6 <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 80039a8:	68fb      	ldr	r3, [r7, #12]
 80039aa:	3301      	adds	r3, #1
 80039ac:	60fb      	str	r3, [r7, #12]
 80039ae:	68fb      	ldr	r3, [r7, #12]
 80039b0:	2b07      	cmp	r3, #7
 80039b2:	d9e7      	bls.n	8003984 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 80039b4:	bf00      	nop
 80039b6:	bf00      	nop
 80039b8:	3714      	adds	r7, #20
 80039ba:	46bd      	mov	sp, r7
 80039bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039c0:	4770      	bx	lr
 80039c2:	bf00      	nop
 80039c4:	200008c0 	.word	0x200008c0

080039c8 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 80039c8:	b580      	push	{r7, lr}
 80039ca:	b086      	sub	sp, #24
 80039cc:	af00      	add	r7, sp, #0
 80039ce:	60f8      	str	r0, [r7, #12]
 80039d0:	60b9      	str	r1, [r7, #8]
 80039d2:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 80039d4:	68fb      	ldr	r3, [r7, #12]
 80039d6:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 80039d8:	f001 fbee 	bl	80051b8 <vPortEnterCritical>
 80039dc:	697b      	ldr	r3, [r7, #20]
 80039de:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 80039e2:	b25b      	sxtb	r3, r3
 80039e4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80039e8:	d103      	bne.n	80039f2 <vQueueWaitForMessageRestricted+0x2a>
 80039ea:	697b      	ldr	r3, [r7, #20]
 80039ec:	2200      	movs	r2, #0
 80039ee:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80039f2:	697b      	ldr	r3, [r7, #20]
 80039f4:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 80039f8:	b25b      	sxtb	r3, r3
 80039fa:	f1b3 3fff 	cmp.w	r3, #4294967295
 80039fe:	d103      	bne.n	8003a08 <vQueueWaitForMessageRestricted+0x40>
 8003a00:	697b      	ldr	r3, [r7, #20]
 8003a02:	2200      	movs	r2, #0
 8003a04:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8003a08:	f001 fc08 	bl	800521c <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 8003a0c:	697b      	ldr	r3, [r7, #20]
 8003a0e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003a10:	2b00      	cmp	r3, #0
 8003a12:	d106      	bne.n	8003a22 <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8003a14:	697b      	ldr	r3, [r7, #20]
 8003a16:	3324      	adds	r3, #36	@ 0x24
 8003a18:	687a      	ldr	r2, [r7, #4]
 8003a1a:	68b9      	ldr	r1, [r7, #8]
 8003a1c:	4618      	mov	r0, r3
 8003a1e:	f000 fc5d 	bl	80042dc <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 8003a22:	6978      	ldr	r0, [r7, #20]
 8003a24:	f7ff ff26 	bl	8003874 <prvUnlockQueue>
	}
 8003a28:	bf00      	nop
 8003a2a:	3718      	adds	r7, #24
 8003a2c:	46bd      	mov	sp, r7
 8003a2e:	bd80      	pop	{r7, pc}

08003a30 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8003a30:	b580      	push	{r7, lr}
 8003a32:	b08e      	sub	sp, #56	@ 0x38
 8003a34:	af04      	add	r7, sp, #16
 8003a36:	60f8      	str	r0, [r7, #12]
 8003a38:	60b9      	str	r1, [r7, #8]
 8003a3a:	607a      	str	r2, [r7, #4]
 8003a3c:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8003a3e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003a40:	2b00      	cmp	r3, #0
 8003a42:	d10b      	bne.n	8003a5c <xTaskCreateStatic+0x2c>
	__asm volatile
 8003a44:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003a48:	f383 8811 	msr	BASEPRI, r3
 8003a4c:	f3bf 8f6f 	isb	sy
 8003a50:	f3bf 8f4f 	dsb	sy
 8003a54:	623b      	str	r3, [r7, #32]
}
 8003a56:	bf00      	nop
 8003a58:	bf00      	nop
 8003a5a:	e7fd      	b.n	8003a58 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 8003a5c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003a5e:	2b00      	cmp	r3, #0
 8003a60:	d10b      	bne.n	8003a7a <xTaskCreateStatic+0x4a>
	__asm volatile
 8003a62:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003a66:	f383 8811 	msr	BASEPRI, r3
 8003a6a:	f3bf 8f6f 	isb	sy
 8003a6e:	f3bf 8f4f 	dsb	sy
 8003a72:	61fb      	str	r3, [r7, #28]
}
 8003a74:	bf00      	nop
 8003a76:	bf00      	nop
 8003a78:	e7fd      	b.n	8003a76 <xTaskCreateStatic+0x46>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8003a7a:	23a0      	movs	r3, #160	@ 0xa0
 8003a7c:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8003a7e:	693b      	ldr	r3, [r7, #16]
 8003a80:	2ba0      	cmp	r3, #160	@ 0xa0
 8003a82:	d00b      	beq.n	8003a9c <xTaskCreateStatic+0x6c>
	__asm volatile
 8003a84:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003a88:	f383 8811 	msr	BASEPRI, r3
 8003a8c:	f3bf 8f6f 	isb	sy
 8003a90:	f3bf 8f4f 	dsb	sy
 8003a94:	61bb      	str	r3, [r7, #24]
}
 8003a96:	bf00      	nop
 8003a98:	bf00      	nop
 8003a9a:	e7fd      	b.n	8003a98 <xTaskCreateStatic+0x68>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 8003a9c:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8003a9e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003aa0:	2b00      	cmp	r3, #0
 8003aa2:	d01e      	beq.n	8003ae2 <xTaskCreateStatic+0xb2>
 8003aa4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003aa6:	2b00      	cmp	r3, #0
 8003aa8:	d01b      	beq.n	8003ae2 <xTaskCreateStatic+0xb2>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8003aaa:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003aac:	627b      	str	r3, [r7, #36]	@ 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8003aae:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003ab0:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8003ab2:	631a      	str	r2, [r3, #48]	@ 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8003ab4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003ab6:	2202      	movs	r2, #2
 8003ab8:	f883 209d 	strb.w	r2, [r3, #157]	@ 0x9d
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8003abc:	2300      	movs	r3, #0
 8003abe:	9303      	str	r3, [sp, #12]
 8003ac0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003ac2:	9302      	str	r3, [sp, #8]
 8003ac4:	f107 0314 	add.w	r3, r7, #20
 8003ac8:	9301      	str	r3, [sp, #4]
 8003aca:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003acc:	9300      	str	r3, [sp, #0]
 8003ace:	683b      	ldr	r3, [r7, #0]
 8003ad0:	687a      	ldr	r2, [r7, #4]
 8003ad2:	68b9      	ldr	r1, [r7, #8]
 8003ad4:	68f8      	ldr	r0, [r7, #12]
 8003ad6:	f000 f851 	bl	8003b7c <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8003ada:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8003adc:	f000 f8ee 	bl	8003cbc <prvAddNewTaskToReadyList>
 8003ae0:	e001      	b.n	8003ae6 <xTaskCreateStatic+0xb6>
		}
		else
		{
			xReturn = NULL;
 8003ae2:	2300      	movs	r3, #0
 8003ae4:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8003ae6:	697b      	ldr	r3, [r7, #20]
	}
 8003ae8:	4618      	mov	r0, r3
 8003aea:	3728      	adds	r7, #40	@ 0x28
 8003aec:	46bd      	mov	sp, r7
 8003aee:	bd80      	pop	{r7, pc}

08003af0 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8003af0:	b580      	push	{r7, lr}
 8003af2:	b08c      	sub	sp, #48	@ 0x30
 8003af4:	af04      	add	r7, sp, #16
 8003af6:	60f8      	str	r0, [r7, #12]
 8003af8:	60b9      	str	r1, [r7, #8]
 8003afa:	603b      	str	r3, [r7, #0]
 8003afc:	4613      	mov	r3, r2
 8003afe:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8003b00:	88fb      	ldrh	r3, [r7, #6]
 8003b02:	009b      	lsls	r3, r3, #2
 8003b04:	4618      	mov	r0, r3
 8003b06:	f001 fc79 	bl	80053fc <pvPortMalloc>
 8003b0a:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8003b0c:	697b      	ldr	r3, [r7, #20]
 8003b0e:	2b00      	cmp	r3, #0
 8003b10:	d00e      	beq.n	8003b30 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8003b12:	20a0      	movs	r0, #160	@ 0xa0
 8003b14:	f001 fc72 	bl	80053fc <pvPortMalloc>
 8003b18:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8003b1a:	69fb      	ldr	r3, [r7, #28]
 8003b1c:	2b00      	cmp	r3, #0
 8003b1e:	d003      	beq.n	8003b28 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8003b20:	69fb      	ldr	r3, [r7, #28]
 8003b22:	697a      	ldr	r2, [r7, #20]
 8003b24:	631a      	str	r2, [r3, #48]	@ 0x30
 8003b26:	e005      	b.n	8003b34 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8003b28:	6978      	ldr	r0, [r7, #20]
 8003b2a:	f001 fd35 	bl	8005598 <vPortFree>
 8003b2e:	e001      	b.n	8003b34 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8003b30:	2300      	movs	r3, #0
 8003b32:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8003b34:	69fb      	ldr	r3, [r7, #28]
 8003b36:	2b00      	cmp	r3, #0
 8003b38:	d017      	beq.n	8003b6a <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8003b3a:	69fb      	ldr	r3, [r7, #28]
 8003b3c:	2200      	movs	r2, #0
 8003b3e:	f883 209d 	strb.w	r2, [r3, #157]	@ 0x9d
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8003b42:	88fa      	ldrh	r2, [r7, #6]
 8003b44:	2300      	movs	r3, #0
 8003b46:	9303      	str	r3, [sp, #12]
 8003b48:	69fb      	ldr	r3, [r7, #28]
 8003b4a:	9302      	str	r3, [sp, #8]
 8003b4c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003b4e:	9301      	str	r3, [sp, #4]
 8003b50:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003b52:	9300      	str	r3, [sp, #0]
 8003b54:	683b      	ldr	r3, [r7, #0]
 8003b56:	68b9      	ldr	r1, [r7, #8]
 8003b58:	68f8      	ldr	r0, [r7, #12]
 8003b5a:	f000 f80f 	bl	8003b7c <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8003b5e:	69f8      	ldr	r0, [r7, #28]
 8003b60:	f000 f8ac 	bl	8003cbc <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8003b64:	2301      	movs	r3, #1
 8003b66:	61bb      	str	r3, [r7, #24]
 8003b68:	e002      	b.n	8003b70 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8003b6a:	f04f 33ff 	mov.w	r3, #4294967295
 8003b6e:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8003b70:	69bb      	ldr	r3, [r7, #24]
	}
 8003b72:	4618      	mov	r0, r3
 8003b74:	3720      	adds	r7, #32
 8003b76:	46bd      	mov	sp, r7
 8003b78:	bd80      	pop	{r7, pc}
	...

08003b7c <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8003b7c:	b580      	push	{r7, lr}
 8003b7e:	b088      	sub	sp, #32
 8003b80:	af00      	add	r7, sp, #0
 8003b82:	60f8      	str	r0, [r7, #12]
 8003b84:	60b9      	str	r1, [r7, #8]
 8003b86:	607a      	str	r2, [r7, #4]
 8003b88:	603b      	str	r3, [r7, #0]
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8003b8a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003b8c:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8003b8e:	687b      	ldr	r3, [r7, #4]
 8003b90:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8003b94:	3b01      	subs	r3, #1
 8003b96:	009b      	lsls	r3, r3, #2
 8003b98:	4413      	add	r3, r2
 8003b9a:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8003b9c:	69bb      	ldr	r3, [r7, #24]
 8003b9e:	f023 0307 	bic.w	r3, r3, #7
 8003ba2:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8003ba4:	69bb      	ldr	r3, [r7, #24]
 8003ba6:	f003 0307 	and.w	r3, r3, #7
 8003baa:	2b00      	cmp	r3, #0
 8003bac:	d00b      	beq.n	8003bc6 <prvInitialiseNewTask+0x4a>
	__asm volatile
 8003bae:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003bb2:	f383 8811 	msr	BASEPRI, r3
 8003bb6:	f3bf 8f6f 	isb	sy
 8003bba:	f3bf 8f4f 	dsb	sy
 8003bbe:	617b      	str	r3, [r7, #20]
}
 8003bc0:	bf00      	nop
 8003bc2:	bf00      	nop
 8003bc4:	e7fd      	b.n	8003bc2 <prvInitialiseNewTask+0x46>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 8003bc6:	68bb      	ldr	r3, [r7, #8]
 8003bc8:	2b00      	cmp	r3, #0
 8003bca:	d01f      	beq.n	8003c0c <prvInitialiseNewTask+0x90>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8003bcc:	2300      	movs	r3, #0
 8003bce:	61fb      	str	r3, [r7, #28]
 8003bd0:	e012      	b.n	8003bf8 <prvInitialiseNewTask+0x7c>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8003bd2:	68ba      	ldr	r2, [r7, #8]
 8003bd4:	69fb      	ldr	r3, [r7, #28]
 8003bd6:	4413      	add	r3, r2
 8003bd8:	7819      	ldrb	r1, [r3, #0]
 8003bda:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8003bdc:	69fb      	ldr	r3, [r7, #28]
 8003bde:	4413      	add	r3, r2
 8003be0:	3334      	adds	r3, #52	@ 0x34
 8003be2:	460a      	mov	r2, r1
 8003be4:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 8003be6:	68ba      	ldr	r2, [r7, #8]
 8003be8:	69fb      	ldr	r3, [r7, #28]
 8003bea:	4413      	add	r3, r2
 8003bec:	781b      	ldrb	r3, [r3, #0]
 8003bee:	2b00      	cmp	r3, #0
 8003bf0:	d006      	beq.n	8003c00 <prvInitialiseNewTask+0x84>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8003bf2:	69fb      	ldr	r3, [r7, #28]
 8003bf4:	3301      	adds	r3, #1
 8003bf6:	61fb      	str	r3, [r7, #28]
 8003bf8:	69fb      	ldr	r3, [r7, #28]
 8003bfa:	2b0f      	cmp	r3, #15
 8003bfc:	d9e9      	bls.n	8003bd2 <prvInitialiseNewTask+0x56>
 8003bfe:	e000      	b.n	8003c02 <prvInitialiseNewTask+0x86>
			{
				break;
 8003c00:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8003c02:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003c04:	2200      	movs	r2, #0
 8003c06:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8003c0a:	e003      	b.n	8003c14 <prvInitialiseNewTask+0x98>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8003c0c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003c0e:	2200      	movs	r2, #0
 8003c10:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8003c14:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003c16:	2b06      	cmp	r3, #6
 8003c18:	d901      	bls.n	8003c1e <prvInitialiseNewTask+0xa2>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8003c1a:	2306      	movs	r3, #6
 8003c1c:	62bb      	str	r3, [r7, #40]	@ 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8003c1e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003c20:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8003c22:	62da      	str	r2, [r3, #44]	@ 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8003c24:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003c26:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8003c28:	645a      	str	r2, [r3, #68]	@ 0x44
		pxNewTCB->uxMutexesHeld = 0;
 8003c2a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003c2c:	2200      	movs	r2, #0
 8003c2e:	649a      	str	r2, [r3, #72]	@ 0x48
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8003c30:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003c32:	3304      	adds	r3, #4
 8003c34:	4618      	mov	r0, r3
 8003c36:	f7ff f934 	bl	8002ea2 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8003c3a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003c3c:	3318      	adds	r3, #24
 8003c3e:	4618      	mov	r0, r3
 8003c40:	f7ff f92f 	bl	8002ea2 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8003c44:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003c46:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8003c48:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8003c4a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003c4c:	f1c3 0207 	rsb	r2, r3, #7
 8003c50:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003c52:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8003c54:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003c56:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8003c58:	625a      	str	r2, [r3, #36]	@ 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8003c5a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003c5c:	2200      	movs	r2, #0
 8003c5e:	f8c3 2098 	str.w	r2, [r3, #152]	@ 0x98
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8003c62:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003c64:	2200      	movs	r2, #0
 8003c66:	f883 209c 	strb.w	r2, [r3, #156]	@ 0x9c
	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 8003c6a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003c6c:	334c      	adds	r3, #76	@ 0x4c
 8003c6e:	224c      	movs	r2, #76	@ 0x4c
 8003c70:	2100      	movs	r1, #0
 8003c72:	4618      	mov	r0, r3
 8003c74:	f002 ff7b 	bl	8006b6e <memset>
 8003c78:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003c7a:	4a0d      	ldr	r2, [pc, #52]	@ (8003cb0 <prvInitialiseNewTask+0x134>)
 8003c7c:	651a      	str	r2, [r3, #80]	@ 0x50
 8003c7e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003c80:	4a0c      	ldr	r2, [pc, #48]	@ (8003cb4 <prvInitialiseNewTask+0x138>)
 8003c82:	655a      	str	r2, [r3, #84]	@ 0x54
 8003c84:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003c86:	4a0c      	ldr	r2, [pc, #48]	@ (8003cb8 <prvInitialiseNewTask+0x13c>)
 8003c88:	659a      	str	r2, [r3, #88]	@ 0x58
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8003c8a:	683a      	ldr	r2, [r7, #0]
 8003c8c:	68f9      	ldr	r1, [r7, #12]
 8003c8e:	69b8      	ldr	r0, [r7, #24]
 8003c90:	f001 f960 	bl	8004f54 <pxPortInitialiseStack>
 8003c94:	4602      	mov	r2, r0
 8003c96:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003c98:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 8003c9a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003c9c:	2b00      	cmp	r3, #0
 8003c9e:	d002      	beq.n	8003ca6 <prvInitialiseNewTask+0x12a>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8003ca0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003ca2:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8003ca4:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8003ca6:	bf00      	nop
 8003ca8:	3720      	adds	r7, #32
 8003caa:	46bd      	mov	sp, r7
 8003cac:	bd80      	pop	{r7, pc}
 8003cae:	bf00      	nop
 8003cb0:	20004860 	.word	0x20004860
 8003cb4:	200048c8 	.word	0x200048c8
 8003cb8:	20004930 	.word	0x20004930

08003cbc <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8003cbc:	b580      	push	{r7, lr}
 8003cbe:	b082      	sub	sp, #8
 8003cc0:	af00      	add	r7, sp, #0
 8003cc2:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8003cc4:	f001 fa78 	bl	80051b8 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8003cc8:	4b2a      	ldr	r3, [pc, #168]	@ (8003d74 <prvAddNewTaskToReadyList+0xb8>)
 8003cca:	681b      	ldr	r3, [r3, #0]
 8003ccc:	3301      	adds	r3, #1
 8003cce:	4a29      	ldr	r2, [pc, #164]	@ (8003d74 <prvAddNewTaskToReadyList+0xb8>)
 8003cd0:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8003cd2:	4b29      	ldr	r3, [pc, #164]	@ (8003d78 <prvAddNewTaskToReadyList+0xbc>)
 8003cd4:	681b      	ldr	r3, [r3, #0]
 8003cd6:	2b00      	cmp	r3, #0
 8003cd8:	d109      	bne.n	8003cee <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8003cda:	4a27      	ldr	r2, [pc, #156]	@ (8003d78 <prvAddNewTaskToReadyList+0xbc>)
 8003cdc:	687b      	ldr	r3, [r7, #4]
 8003cde:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8003ce0:	4b24      	ldr	r3, [pc, #144]	@ (8003d74 <prvAddNewTaskToReadyList+0xb8>)
 8003ce2:	681b      	ldr	r3, [r3, #0]
 8003ce4:	2b01      	cmp	r3, #1
 8003ce6:	d110      	bne.n	8003d0a <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8003ce8:	f000 fc26 	bl	8004538 <prvInitialiseTaskLists>
 8003cec:	e00d      	b.n	8003d0a <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8003cee:	4b23      	ldr	r3, [pc, #140]	@ (8003d7c <prvAddNewTaskToReadyList+0xc0>)
 8003cf0:	681b      	ldr	r3, [r3, #0]
 8003cf2:	2b00      	cmp	r3, #0
 8003cf4:	d109      	bne.n	8003d0a <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8003cf6:	4b20      	ldr	r3, [pc, #128]	@ (8003d78 <prvAddNewTaskToReadyList+0xbc>)
 8003cf8:	681b      	ldr	r3, [r3, #0]
 8003cfa:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003cfc:	687b      	ldr	r3, [r7, #4]
 8003cfe:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003d00:	429a      	cmp	r2, r3
 8003d02:	d802      	bhi.n	8003d0a <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8003d04:	4a1c      	ldr	r2, [pc, #112]	@ (8003d78 <prvAddNewTaskToReadyList+0xbc>)
 8003d06:	687b      	ldr	r3, [r7, #4]
 8003d08:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8003d0a:	4b1d      	ldr	r3, [pc, #116]	@ (8003d80 <prvAddNewTaskToReadyList+0xc4>)
 8003d0c:	681b      	ldr	r3, [r3, #0]
 8003d0e:	3301      	adds	r3, #1
 8003d10:	4a1b      	ldr	r2, [pc, #108]	@ (8003d80 <prvAddNewTaskToReadyList+0xc4>)
 8003d12:	6013      	str	r3, [r2, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8003d14:	687b      	ldr	r3, [r7, #4]
 8003d16:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003d18:	2201      	movs	r2, #1
 8003d1a:	409a      	lsls	r2, r3
 8003d1c:	4b19      	ldr	r3, [pc, #100]	@ (8003d84 <prvAddNewTaskToReadyList+0xc8>)
 8003d1e:	681b      	ldr	r3, [r3, #0]
 8003d20:	4313      	orrs	r3, r2
 8003d22:	4a18      	ldr	r2, [pc, #96]	@ (8003d84 <prvAddNewTaskToReadyList+0xc8>)
 8003d24:	6013      	str	r3, [r2, #0]
 8003d26:	687b      	ldr	r3, [r7, #4]
 8003d28:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003d2a:	4613      	mov	r3, r2
 8003d2c:	009b      	lsls	r3, r3, #2
 8003d2e:	4413      	add	r3, r2
 8003d30:	009b      	lsls	r3, r3, #2
 8003d32:	4a15      	ldr	r2, [pc, #84]	@ (8003d88 <prvAddNewTaskToReadyList+0xcc>)
 8003d34:	441a      	add	r2, r3
 8003d36:	687b      	ldr	r3, [r7, #4]
 8003d38:	3304      	adds	r3, #4
 8003d3a:	4619      	mov	r1, r3
 8003d3c:	4610      	mov	r0, r2
 8003d3e:	f7ff f8bd 	bl	8002ebc <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8003d42:	f001 fa6b 	bl	800521c <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8003d46:	4b0d      	ldr	r3, [pc, #52]	@ (8003d7c <prvAddNewTaskToReadyList+0xc0>)
 8003d48:	681b      	ldr	r3, [r3, #0]
 8003d4a:	2b00      	cmp	r3, #0
 8003d4c:	d00e      	beq.n	8003d6c <prvAddNewTaskToReadyList+0xb0>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8003d4e:	4b0a      	ldr	r3, [pc, #40]	@ (8003d78 <prvAddNewTaskToReadyList+0xbc>)
 8003d50:	681b      	ldr	r3, [r3, #0]
 8003d52:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003d54:	687b      	ldr	r3, [r7, #4]
 8003d56:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003d58:	429a      	cmp	r2, r3
 8003d5a:	d207      	bcs.n	8003d6c <prvAddNewTaskToReadyList+0xb0>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8003d5c:	4b0b      	ldr	r3, [pc, #44]	@ (8003d8c <prvAddNewTaskToReadyList+0xd0>)
 8003d5e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8003d62:	601a      	str	r2, [r3, #0]
 8003d64:	f3bf 8f4f 	dsb	sy
 8003d68:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8003d6c:	bf00      	nop
 8003d6e:	3708      	adds	r7, #8
 8003d70:	46bd      	mov	sp, r7
 8003d72:	bd80      	pop	{r7, pc}
 8003d74:	20000a00 	.word	0x20000a00
 8003d78:	20000900 	.word	0x20000900
 8003d7c:	20000a0c 	.word	0x20000a0c
 8003d80:	20000a1c 	.word	0x20000a1c
 8003d84:	20000a08 	.word	0x20000a08
 8003d88:	20000904 	.word	0x20000904
 8003d8c:	e000ed04 	.word	0xe000ed04

08003d90 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8003d90:	b580      	push	{r7, lr}
 8003d92:	b084      	sub	sp, #16
 8003d94:	af00      	add	r7, sp, #0
 8003d96:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8003d98:	2300      	movs	r3, #0
 8003d9a:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8003d9c:	687b      	ldr	r3, [r7, #4]
 8003d9e:	2b00      	cmp	r3, #0
 8003da0:	d018      	beq.n	8003dd4 <vTaskDelay+0x44>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 8003da2:	4b14      	ldr	r3, [pc, #80]	@ (8003df4 <vTaskDelay+0x64>)
 8003da4:	681b      	ldr	r3, [r3, #0]
 8003da6:	2b00      	cmp	r3, #0
 8003da8:	d00b      	beq.n	8003dc2 <vTaskDelay+0x32>
	__asm volatile
 8003daa:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003dae:	f383 8811 	msr	BASEPRI, r3
 8003db2:	f3bf 8f6f 	isb	sy
 8003db6:	f3bf 8f4f 	dsb	sy
 8003dba:	60bb      	str	r3, [r7, #8]
}
 8003dbc:	bf00      	nop
 8003dbe:	bf00      	nop
 8003dc0:	e7fd      	b.n	8003dbe <vTaskDelay+0x2e>
			vTaskSuspendAll();
 8003dc2:	f000 f88b 	bl	8003edc <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8003dc6:	2100      	movs	r1, #0
 8003dc8:	6878      	ldr	r0, [r7, #4]
 8003dca:	f000 fd1f 	bl	800480c <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8003dce:	f000 f893 	bl	8003ef8 <xTaskResumeAll>
 8003dd2:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8003dd4:	68fb      	ldr	r3, [r7, #12]
 8003dd6:	2b00      	cmp	r3, #0
 8003dd8:	d107      	bne.n	8003dea <vTaskDelay+0x5a>
		{
			portYIELD_WITHIN_API();
 8003dda:	4b07      	ldr	r3, [pc, #28]	@ (8003df8 <vTaskDelay+0x68>)
 8003ddc:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8003de0:	601a      	str	r2, [r3, #0]
 8003de2:	f3bf 8f4f 	dsb	sy
 8003de6:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8003dea:	bf00      	nop
 8003dec:	3710      	adds	r7, #16
 8003dee:	46bd      	mov	sp, r7
 8003df0:	bd80      	pop	{r7, pc}
 8003df2:	bf00      	nop
 8003df4:	20000a28 	.word	0x20000a28
 8003df8:	e000ed04 	.word	0xe000ed04

08003dfc <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8003dfc:	b580      	push	{r7, lr}
 8003dfe:	b08a      	sub	sp, #40	@ 0x28
 8003e00:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8003e02:	2300      	movs	r3, #0
 8003e04:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8003e06:	2300      	movs	r3, #0
 8003e08:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8003e0a:	463a      	mov	r2, r7
 8003e0c:	1d39      	adds	r1, r7, #4
 8003e0e:	f107 0308 	add.w	r3, r7, #8
 8003e12:	4618      	mov	r0, r3
 8003e14:	f7fc fbea 	bl	80005ec <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8003e18:	6839      	ldr	r1, [r7, #0]
 8003e1a:	687b      	ldr	r3, [r7, #4]
 8003e1c:	68ba      	ldr	r2, [r7, #8]
 8003e1e:	9202      	str	r2, [sp, #8]
 8003e20:	9301      	str	r3, [sp, #4]
 8003e22:	2300      	movs	r3, #0
 8003e24:	9300      	str	r3, [sp, #0]
 8003e26:	2300      	movs	r3, #0
 8003e28:	460a      	mov	r2, r1
 8003e2a:	4924      	ldr	r1, [pc, #144]	@ (8003ebc <vTaskStartScheduler+0xc0>)
 8003e2c:	4824      	ldr	r0, [pc, #144]	@ (8003ec0 <vTaskStartScheduler+0xc4>)
 8003e2e:	f7ff fdff 	bl	8003a30 <xTaskCreateStatic>
 8003e32:	4603      	mov	r3, r0
 8003e34:	4a23      	ldr	r2, [pc, #140]	@ (8003ec4 <vTaskStartScheduler+0xc8>)
 8003e36:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8003e38:	4b22      	ldr	r3, [pc, #136]	@ (8003ec4 <vTaskStartScheduler+0xc8>)
 8003e3a:	681b      	ldr	r3, [r3, #0]
 8003e3c:	2b00      	cmp	r3, #0
 8003e3e:	d002      	beq.n	8003e46 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8003e40:	2301      	movs	r3, #1
 8003e42:	617b      	str	r3, [r7, #20]
 8003e44:	e001      	b.n	8003e4a <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8003e46:	2300      	movs	r3, #0
 8003e48:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 8003e4a:	697b      	ldr	r3, [r7, #20]
 8003e4c:	2b01      	cmp	r3, #1
 8003e4e:	d102      	bne.n	8003e56 <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 8003e50:	f000 fd42 	bl	80048d8 <xTimerCreateTimerTask>
 8003e54:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8003e56:	697b      	ldr	r3, [r7, #20]
 8003e58:	2b01      	cmp	r3, #1
 8003e5a:	d11b      	bne.n	8003e94 <vTaskStartScheduler+0x98>
	__asm volatile
 8003e5c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003e60:	f383 8811 	msr	BASEPRI, r3
 8003e64:	f3bf 8f6f 	isb	sy
 8003e68:	f3bf 8f4f 	dsb	sy
 8003e6c:	613b      	str	r3, [r7, #16]
}
 8003e6e:	bf00      	nop
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first.
			See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8003e70:	4b15      	ldr	r3, [pc, #84]	@ (8003ec8 <vTaskStartScheduler+0xcc>)
 8003e72:	681b      	ldr	r3, [r3, #0]
 8003e74:	334c      	adds	r3, #76	@ 0x4c
 8003e76:	4a15      	ldr	r2, [pc, #84]	@ (8003ecc <vTaskStartScheduler+0xd0>)
 8003e78:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8003e7a:	4b15      	ldr	r3, [pc, #84]	@ (8003ed0 <vTaskStartScheduler+0xd4>)
 8003e7c:	f04f 32ff 	mov.w	r2, #4294967295
 8003e80:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8003e82:	4b14      	ldr	r3, [pc, #80]	@ (8003ed4 <vTaskStartScheduler+0xd8>)
 8003e84:	2201      	movs	r2, #1
 8003e86:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8003e88:	4b13      	ldr	r3, [pc, #76]	@ (8003ed8 <vTaskStartScheduler+0xdc>)
 8003e8a:	2200      	movs	r2, #0
 8003e8c:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8003e8e:	f001 f8ef 	bl	8005070 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8003e92:	e00f      	b.n	8003eb4 <vTaskStartScheduler+0xb8>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8003e94:	697b      	ldr	r3, [r7, #20]
 8003e96:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003e9a:	d10b      	bne.n	8003eb4 <vTaskStartScheduler+0xb8>
	__asm volatile
 8003e9c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003ea0:	f383 8811 	msr	BASEPRI, r3
 8003ea4:	f3bf 8f6f 	isb	sy
 8003ea8:	f3bf 8f4f 	dsb	sy
 8003eac:	60fb      	str	r3, [r7, #12]
}
 8003eae:	bf00      	nop
 8003eb0:	bf00      	nop
 8003eb2:	e7fd      	b.n	8003eb0 <vTaskStartScheduler+0xb4>
}
 8003eb4:	bf00      	nop
 8003eb6:	3718      	adds	r7, #24
 8003eb8:	46bd      	mov	sp, r7
 8003eba:	bd80      	pop	{r7, pc}
 8003ebc:	08007aac 	.word	0x08007aac
 8003ec0:	08004509 	.word	0x08004509
 8003ec4:	20000a24 	.word	0x20000a24
 8003ec8:	20000900 	.word	0x20000900
 8003ecc:	20000030 	.word	0x20000030
 8003ed0:	20000a20 	.word	0x20000a20
 8003ed4:	20000a0c 	.word	0x20000a0c
 8003ed8:	20000a04 	.word	0x20000a04

08003edc <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8003edc:	b480      	push	{r7}
 8003ede:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 8003ee0:	4b04      	ldr	r3, [pc, #16]	@ (8003ef4 <vTaskSuspendAll+0x18>)
 8003ee2:	681b      	ldr	r3, [r3, #0]
 8003ee4:	3301      	adds	r3, #1
 8003ee6:	4a03      	ldr	r2, [pc, #12]	@ (8003ef4 <vTaskSuspendAll+0x18>)
 8003ee8:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 8003eea:	bf00      	nop
 8003eec:	46bd      	mov	sp, r7
 8003eee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ef2:	4770      	bx	lr
 8003ef4:	20000a28 	.word	0x20000a28

08003ef8 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8003ef8:	b580      	push	{r7, lr}
 8003efa:	b084      	sub	sp, #16
 8003efc:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8003efe:	2300      	movs	r3, #0
 8003f00:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8003f02:	2300      	movs	r3, #0
 8003f04:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8003f06:	4b42      	ldr	r3, [pc, #264]	@ (8004010 <xTaskResumeAll+0x118>)
 8003f08:	681b      	ldr	r3, [r3, #0]
 8003f0a:	2b00      	cmp	r3, #0
 8003f0c:	d10b      	bne.n	8003f26 <xTaskResumeAll+0x2e>
	__asm volatile
 8003f0e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003f12:	f383 8811 	msr	BASEPRI, r3
 8003f16:	f3bf 8f6f 	isb	sy
 8003f1a:	f3bf 8f4f 	dsb	sy
 8003f1e:	603b      	str	r3, [r7, #0]
}
 8003f20:	bf00      	nop
 8003f22:	bf00      	nop
 8003f24:	e7fd      	b.n	8003f22 <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8003f26:	f001 f947 	bl	80051b8 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8003f2a:	4b39      	ldr	r3, [pc, #228]	@ (8004010 <xTaskResumeAll+0x118>)
 8003f2c:	681b      	ldr	r3, [r3, #0]
 8003f2e:	3b01      	subs	r3, #1
 8003f30:	4a37      	ldr	r2, [pc, #220]	@ (8004010 <xTaskResumeAll+0x118>)
 8003f32:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8003f34:	4b36      	ldr	r3, [pc, #216]	@ (8004010 <xTaskResumeAll+0x118>)
 8003f36:	681b      	ldr	r3, [r3, #0]
 8003f38:	2b00      	cmp	r3, #0
 8003f3a:	d161      	bne.n	8004000 <xTaskResumeAll+0x108>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8003f3c:	4b35      	ldr	r3, [pc, #212]	@ (8004014 <xTaskResumeAll+0x11c>)
 8003f3e:	681b      	ldr	r3, [r3, #0]
 8003f40:	2b00      	cmp	r3, #0
 8003f42:	d05d      	beq.n	8004000 <xTaskResumeAll+0x108>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8003f44:	e02e      	b.n	8003fa4 <xTaskResumeAll+0xac>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8003f46:	4b34      	ldr	r3, [pc, #208]	@ (8004018 <xTaskResumeAll+0x120>)
 8003f48:	68db      	ldr	r3, [r3, #12]
 8003f4a:	68db      	ldr	r3, [r3, #12]
 8003f4c:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8003f4e:	68fb      	ldr	r3, [r7, #12]
 8003f50:	3318      	adds	r3, #24
 8003f52:	4618      	mov	r0, r3
 8003f54:	f7ff f80f 	bl	8002f76 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8003f58:	68fb      	ldr	r3, [r7, #12]
 8003f5a:	3304      	adds	r3, #4
 8003f5c:	4618      	mov	r0, r3
 8003f5e:	f7ff f80a 	bl	8002f76 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8003f62:	68fb      	ldr	r3, [r7, #12]
 8003f64:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003f66:	2201      	movs	r2, #1
 8003f68:	409a      	lsls	r2, r3
 8003f6a:	4b2c      	ldr	r3, [pc, #176]	@ (800401c <xTaskResumeAll+0x124>)
 8003f6c:	681b      	ldr	r3, [r3, #0]
 8003f6e:	4313      	orrs	r3, r2
 8003f70:	4a2a      	ldr	r2, [pc, #168]	@ (800401c <xTaskResumeAll+0x124>)
 8003f72:	6013      	str	r3, [r2, #0]
 8003f74:	68fb      	ldr	r3, [r7, #12]
 8003f76:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003f78:	4613      	mov	r3, r2
 8003f7a:	009b      	lsls	r3, r3, #2
 8003f7c:	4413      	add	r3, r2
 8003f7e:	009b      	lsls	r3, r3, #2
 8003f80:	4a27      	ldr	r2, [pc, #156]	@ (8004020 <xTaskResumeAll+0x128>)
 8003f82:	441a      	add	r2, r3
 8003f84:	68fb      	ldr	r3, [r7, #12]
 8003f86:	3304      	adds	r3, #4
 8003f88:	4619      	mov	r1, r3
 8003f8a:	4610      	mov	r0, r2
 8003f8c:	f7fe ff96 	bl	8002ebc <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8003f90:	68fb      	ldr	r3, [r7, #12]
 8003f92:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003f94:	4b23      	ldr	r3, [pc, #140]	@ (8004024 <xTaskResumeAll+0x12c>)
 8003f96:	681b      	ldr	r3, [r3, #0]
 8003f98:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003f9a:	429a      	cmp	r2, r3
 8003f9c:	d302      	bcc.n	8003fa4 <xTaskResumeAll+0xac>
					{
						xYieldPending = pdTRUE;
 8003f9e:	4b22      	ldr	r3, [pc, #136]	@ (8004028 <xTaskResumeAll+0x130>)
 8003fa0:	2201      	movs	r2, #1
 8003fa2:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8003fa4:	4b1c      	ldr	r3, [pc, #112]	@ (8004018 <xTaskResumeAll+0x120>)
 8003fa6:	681b      	ldr	r3, [r3, #0]
 8003fa8:	2b00      	cmp	r3, #0
 8003faa:	d1cc      	bne.n	8003f46 <xTaskResumeAll+0x4e>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8003fac:	68fb      	ldr	r3, [r7, #12]
 8003fae:	2b00      	cmp	r3, #0
 8003fb0:	d001      	beq.n	8003fb6 <xTaskResumeAll+0xbe>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8003fb2:	f000 fb65 	bl	8004680 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 8003fb6:	4b1d      	ldr	r3, [pc, #116]	@ (800402c <xTaskResumeAll+0x134>)
 8003fb8:	681b      	ldr	r3, [r3, #0]
 8003fba:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 8003fbc:	687b      	ldr	r3, [r7, #4]
 8003fbe:	2b00      	cmp	r3, #0
 8003fc0:	d010      	beq.n	8003fe4 <xTaskResumeAll+0xec>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8003fc2:	f000 f847 	bl	8004054 <xTaskIncrementTick>
 8003fc6:	4603      	mov	r3, r0
 8003fc8:	2b00      	cmp	r3, #0
 8003fca:	d002      	beq.n	8003fd2 <xTaskResumeAll+0xda>
							{
								xYieldPending = pdTRUE;
 8003fcc:	4b16      	ldr	r3, [pc, #88]	@ (8004028 <xTaskResumeAll+0x130>)
 8003fce:	2201      	movs	r2, #1
 8003fd0:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 8003fd2:	687b      	ldr	r3, [r7, #4]
 8003fd4:	3b01      	subs	r3, #1
 8003fd6:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 8003fd8:	687b      	ldr	r3, [r7, #4]
 8003fda:	2b00      	cmp	r3, #0
 8003fdc:	d1f1      	bne.n	8003fc2 <xTaskResumeAll+0xca>

						xPendedTicks = 0;
 8003fde:	4b13      	ldr	r3, [pc, #76]	@ (800402c <xTaskResumeAll+0x134>)
 8003fe0:	2200      	movs	r2, #0
 8003fe2:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8003fe4:	4b10      	ldr	r3, [pc, #64]	@ (8004028 <xTaskResumeAll+0x130>)
 8003fe6:	681b      	ldr	r3, [r3, #0]
 8003fe8:	2b00      	cmp	r3, #0
 8003fea:	d009      	beq.n	8004000 <xTaskResumeAll+0x108>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8003fec:	2301      	movs	r3, #1
 8003fee:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8003ff0:	4b0f      	ldr	r3, [pc, #60]	@ (8004030 <xTaskResumeAll+0x138>)
 8003ff2:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8003ff6:	601a      	str	r2, [r3, #0]
 8003ff8:	f3bf 8f4f 	dsb	sy
 8003ffc:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8004000:	f001 f90c 	bl	800521c <vPortExitCritical>

	return xAlreadyYielded;
 8004004:	68bb      	ldr	r3, [r7, #8]
}
 8004006:	4618      	mov	r0, r3
 8004008:	3710      	adds	r7, #16
 800400a:	46bd      	mov	sp, r7
 800400c:	bd80      	pop	{r7, pc}
 800400e:	bf00      	nop
 8004010:	20000a28 	.word	0x20000a28
 8004014:	20000a00 	.word	0x20000a00
 8004018:	200009c0 	.word	0x200009c0
 800401c:	20000a08 	.word	0x20000a08
 8004020:	20000904 	.word	0x20000904
 8004024:	20000900 	.word	0x20000900
 8004028:	20000a14 	.word	0x20000a14
 800402c:	20000a10 	.word	0x20000a10
 8004030:	e000ed04 	.word	0xe000ed04

08004034 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8004034:	b480      	push	{r7}
 8004036:	b083      	sub	sp, #12
 8004038:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 800403a:	4b05      	ldr	r3, [pc, #20]	@ (8004050 <xTaskGetTickCount+0x1c>)
 800403c:	681b      	ldr	r3, [r3, #0]
 800403e:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 8004040:	687b      	ldr	r3, [r7, #4]
}
 8004042:	4618      	mov	r0, r3
 8004044:	370c      	adds	r7, #12
 8004046:	46bd      	mov	sp, r7
 8004048:	f85d 7b04 	ldr.w	r7, [sp], #4
 800404c:	4770      	bx	lr
 800404e:	bf00      	nop
 8004050:	20000a04 	.word	0x20000a04

08004054 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8004054:	b580      	push	{r7, lr}
 8004056:	b086      	sub	sp, #24
 8004058:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 800405a:	2300      	movs	r3, #0
 800405c:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800405e:	4b4f      	ldr	r3, [pc, #316]	@ (800419c <xTaskIncrementTick+0x148>)
 8004060:	681b      	ldr	r3, [r3, #0]
 8004062:	2b00      	cmp	r3, #0
 8004064:	f040 808f 	bne.w	8004186 <xTaskIncrementTick+0x132>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8004068:	4b4d      	ldr	r3, [pc, #308]	@ (80041a0 <xTaskIncrementTick+0x14c>)
 800406a:	681b      	ldr	r3, [r3, #0]
 800406c:	3301      	adds	r3, #1
 800406e:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8004070:	4a4b      	ldr	r2, [pc, #300]	@ (80041a0 <xTaskIncrementTick+0x14c>)
 8004072:	693b      	ldr	r3, [r7, #16]
 8004074:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8004076:	693b      	ldr	r3, [r7, #16]
 8004078:	2b00      	cmp	r3, #0
 800407a:	d121      	bne.n	80040c0 <xTaskIncrementTick+0x6c>
		{
			taskSWITCH_DELAYED_LISTS();
 800407c:	4b49      	ldr	r3, [pc, #292]	@ (80041a4 <xTaskIncrementTick+0x150>)
 800407e:	681b      	ldr	r3, [r3, #0]
 8004080:	681b      	ldr	r3, [r3, #0]
 8004082:	2b00      	cmp	r3, #0
 8004084:	d00b      	beq.n	800409e <xTaskIncrementTick+0x4a>
	__asm volatile
 8004086:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800408a:	f383 8811 	msr	BASEPRI, r3
 800408e:	f3bf 8f6f 	isb	sy
 8004092:	f3bf 8f4f 	dsb	sy
 8004096:	603b      	str	r3, [r7, #0]
}
 8004098:	bf00      	nop
 800409a:	bf00      	nop
 800409c:	e7fd      	b.n	800409a <xTaskIncrementTick+0x46>
 800409e:	4b41      	ldr	r3, [pc, #260]	@ (80041a4 <xTaskIncrementTick+0x150>)
 80040a0:	681b      	ldr	r3, [r3, #0]
 80040a2:	60fb      	str	r3, [r7, #12]
 80040a4:	4b40      	ldr	r3, [pc, #256]	@ (80041a8 <xTaskIncrementTick+0x154>)
 80040a6:	681b      	ldr	r3, [r3, #0]
 80040a8:	4a3e      	ldr	r2, [pc, #248]	@ (80041a4 <xTaskIncrementTick+0x150>)
 80040aa:	6013      	str	r3, [r2, #0]
 80040ac:	4a3e      	ldr	r2, [pc, #248]	@ (80041a8 <xTaskIncrementTick+0x154>)
 80040ae:	68fb      	ldr	r3, [r7, #12]
 80040b0:	6013      	str	r3, [r2, #0]
 80040b2:	4b3e      	ldr	r3, [pc, #248]	@ (80041ac <xTaskIncrementTick+0x158>)
 80040b4:	681b      	ldr	r3, [r3, #0]
 80040b6:	3301      	adds	r3, #1
 80040b8:	4a3c      	ldr	r2, [pc, #240]	@ (80041ac <xTaskIncrementTick+0x158>)
 80040ba:	6013      	str	r3, [r2, #0]
 80040bc:	f000 fae0 	bl	8004680 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 80040c0:	4b3b      	ldr	r3, [pc, #236]	@ (80041b0 <xTaskIncrementTick+0x15c>)
 80040c2:	681b      	ldr	r3, [r3, #0]
 80040c4:	693a      	ldr	r2, [r7, #16]
 80040c6:	429a      	cmp	r2, r3
 80040c8:	d348      	bcc.n	800415c <xTaskIncrementTick+0x108>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80040ca:	4b36      	ldr	r3, [pc, #216]	@ (80041a4 <xTaskIncrementTick+0x150>)
 80040cc:	681b      	ldr	r3, [r3, #0]
 80040ce:	681b      	ldr	r3, [r3, #0]
 80040d0:	2b00      	cmp	r3, #0
 80040d2:	d104      	bne.n	80040de <xTaskIncrementTick+0x8a>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80040d4:	4b36      	ldr	r3, [pc, #216]	@ (80041b0 <xTaskIncrementTick+0x15c>)
 80040d6:	f04f 32ff 	mov.w	r2, #4294967295
 80040da:	601a      	str	r2, [r3, #0]
					break;
 80040dc:	e03e      	b.n	800415c <xTaskIncrementTick+0x108>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80040de:	4b31      	ldr	r3, [pc, #196]	@ (80041a4 <xTaskIncrementTick+0x150>)
 80040e0:	681b      	ldr	r3, [r3, #0]
 80040e2:	68db      	ldr	r3, [r3, #12]
 80040e4:	68db      	ldr	r3, [r3, #12]
 80040e6:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 80040e8:	68bb      	ldr	r3, [r7, #8]
 80040ea:	685b      	ldr	r3, [r3, #4]
 80040ec:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 80040ee:	693a      	ldr	r2, [r7, #16]
 80040f0:	687b      	ldr	r3, [r7, #4]
 80040f2:	429a      	cmp	r2, r3
 80040f4:	d203      	bcs.n	80040fe <xTaskIncrementTick+0xaa>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 80040f6:	4a2e      	ldr	r2, [pc, #184]	@ (80041b0 <xTaskIncrementTick+0x15c>)
 80040f8:	687b      	ldr	r3, [r7, #4]
 80040fa:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 80040fc:	e02e      	b.n	800415c <xTaskIncrementTick+0x108>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80040fe:	68bb      	ldr	r3, [r7, #8]
 8004100:	3304      	adds	r3, #4
 8004102:	4618      	mov	r0, r3
 8004104:	f7fe ff37 	bl	8002f76 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8004108:	68bb      	ldr	r3, [r7, #8]
 800410a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800410c:	2b00      	cmp	r3, #0
 800410e:	d004      	beq.n	800411a <xTaskIncrementTick+0xc6>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8004110:	68bb      	ldr	r3, [r7, #8]
 8004112:	3318      	adds	r3, #24
 8004114:	4618      	mov	r0, r3
 8004116:	f7fe ff2e 	bl	8002f76 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 800411a:	68bb      	ldr	r3, [r7, #8]
 800411c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800411e:	2201      	movs	r2, #1
 8004120:	409a      	lsls	r2, r3
 8004122:	4b24      	ldr	r3, [pc, #144]	@ (80041b4 <xTaskIncrementTick+0x160>)
 8004124:	681b      	ldr	r3, [r3, #0]
 8004126:	4313      	orrs	r3, r2
 8004128:	4a22      	ldr	r2, [pc, #136]	@ (80041b4 <xTaskIncrementTick+0x160>)
 800412a:	6013      	str	r3, [r2, #0]
 800412c:	68bb      	ldr	r3, [r7, #8]
 800412e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004130:	4613      	mov	r3, r2
 8004132:	009b      	lsls	r3, r3, #2
 8004134:	4413      	add	r3, r2
 8004136:	009b      	lsls	r3, r3, #2
 8004138:	4a1f      	ldr	r2, [pc, #124]	@ (80041b8 <xTaskIncrementTick+0x164>)
 800413a:	441a      	add	r2, r3
 800413c:	68bb      	ldr	r3, [r7, #8]
 800413e:	3304      	adds	r3, #4
 8004140:	4619      	mov	r1, r3
 8004142:	4610      	mov	r0, r2
 8004144:	f7fe feba 	bl	8002ebc <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8004148:	68bb      	ldr	r3, [r7, #8]
 800414a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800414c:	4b1b      	ldr	r3, [pc, #108]	@ (80041bc <xTaskIncrementTick+0x168>)
 800414e:	681b      	ldr	r3, [r3, #0]
 8004150:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004152:	429a      	cmp	r2, r3
 8004154:	d3b9      	bcc.n	80040ca <xTaskIncrementTick+0x76>
						{
							xSwitchRequired = pdTRUE;
 8004156:	2301      	movs	r3, #1
 8004158:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800415a:	e7b6      	b.n	80040ca <xTaskIncrementTick+0x76>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 800415c:	4b17      	ldr	r3, [pc, #92]	@ (80041bc <xTaskIncrementTick+0x168>)
 800415e:	681b      	ldr	r3, [r3, #0]
 8004160:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004162:	4915      	ldr	r1, [pc, #84]	@ (80041b8 <xTaskIncrementTick+0x164>)
 8004164:	4613      	mov	r3, r2
 8004166:	009b      	lsls	r3, r3, #2
 8004168:	4413      	add	r3, r2
 800416a:	009b      	lsls	r3, r3, #2
 800416c:	440b      	add	r3, r1
 800416e:	681b      	ldr	r3, [r3, #0]
 8004170:	2b01      	cmp	r3, #1
 8004172:	d901      	bls.n	8004178 <xTaskIncrementTick+0x124>
			{
				xSwitchRequired = pdTRUE;
 8004174:	2301      	movs	r3, #1
 8004176:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 8004178:	4b11      	ldr	r3, [pc, #68]	@ (80041c0 <xTaskIncrementTick+0x16c>)
 800417a:	681b      	ldr	r3, [r3, #0]
 800417c:	2b00      	cmp	r3, #0
 800417e:	d007      	beq.n	8004190 <xTaskIncrementTick+0x13c>
			{
				xSwitchRequired = pdTRUE;
 8004180:	2301      	movs	r3, #1
 8004182:	617b      	str	r3, [r7, #20]
 8004184:	e004      	b.n	8004190 <xTaskIncrementTick+0x13c>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 8004186:	4b0f      	ldr	r3, [pc, #60]	@ (80041c4 <xTaskIncrementTick+0x170>)
 8004188:	681b      	ldr	r3, [r3, #0]
 800418a:	3301      	adds	r3, #1
 800418c:	4a0d      	ldr	r2, [pc, #52]	@ (80041c4 <xTaskIncrementTick+0x170>)
 800418e:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 8004190:	697b      	ldr	r3, [r7, #20]
}
 8004192:	4618      	mov	r0, r3
 8004194:	3718      	adds	r7, #24
 8004196:	46bd      	mov	sp, r7
 8004198:	bd80      	pop	{r7, pc}
 800419a:	bf00      	nop
 800419c:	20000a28 	.word	0x20000a28
 80041a0:	20000a04 	.word	0x20000a04
 80041a4:	200009b8 	.word	0x200009b8
 80041a8:	200009bc 	.word	0x200009bc
 80041ac:	20000a18 	.word	0x20000a18
 80041b0:	20000a20 	.word	0x20000a20
 80041b4:	20000a08 	.word	0x20000a08
 80041b8:	20000904 	.word	0x20000904
 80041bc:	20000900 	.word	0x20000900
 80041c0:	20000a14 	.word	0x20000a14
 80041c4:	20000a10 	.word	0x20000a10

080041c8 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 80041c8:	b480      	push	{r7}
 80041ca:	b087      	sub	sp, #28
 80041cc:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 80041ce:	4b2a      	ldr	r3, [pc, #168]	@ (8004278 <vTaskSwitchContext+0xb0>)
 80041d0:	681b      	ldr	r3, [r3, #0]
 80041d2:	2b00      	cmp	r3, #0
 80041d4:	d003      	beq.n	80041de <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 80041d6:	4b29      	ldr	r3, [pc, #164]	@ (800427c <vTaskSwitchContext+0xb4>)
 80041d8:	2201      	movs	r2, #1
 80041da:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 80041dc:	e045      	b.n	800426a <vTaskSwitchContext+0xa2>
		xYieldPending = pdFALSE;
 80041de:	4b27      	ldr	r3, [pc, #156]	@ (800427c <vTaskSwitchContext+0xb4>)
 80041e0:	2200      	movs	r2, #0
 80041e2:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80041e4:	4b26      	ldr	r3, [pc, #152]	@ (8004280 <vTaskSwitchContext+0xb8>)
 80041e6:	681b      	ldr	r3, [r3, #0]
 80041e8:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 80041ea:	68fb      	ldr	r3, [r7, #12]
 80041ec:	fab3 f383 	clz	r3, r3
 80041f0:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 80041f2:	7afb      	ldrb	r3, [r7, #11]
 80041f4:	f1c3 031f 	rsb	r3, r3, #31
 80041f8:	617b      	str	r3, [r7, #20]
 80041fa:	4922      	ldr	r1, [pc, #136]	@ (8004284 <vTaskSwitchContext+0xbc>)
 80041fc:	697a      	ldr	r2, [r7, #20]
 80041fe:	4613      	mov	r3, r2
 8004200:	009b      	lsls	r3, r3, #2
 8004202:	4413      	add	r3, r2
 8004204:	009b      	lsls	r3, r3, #2
 8004206:	440b      	add	r3, r1
 8004208:	681b      	ldr	r3, [r3, #0]
 800420a:	2b00      	cmp	r3, #0
 800420c:	d10b      	bne.n	8004226 <vTaskSwitchContext+0x5e>
	__asm volatile
 800420e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004212:	f383 8811 	msr	BASEPRI, r3
 8004216:	f3bf 8f6f 	isb	sy
 800421a:	f3bf 8f4f 	dsb	sy
 800421e:	607b      	str	r3, [r7, #4]
}
 8004220:	bf00      	nop
 8004222:	bf00      	nop
 8004224:	e7fd      	b.n	8004222 <vTaskSwitchContext+0x5a>
 8004226:	697a      	ldr	r2, [r7, #20]
 8004228:	4613      	mov	r3, r2
 800422a:	009b      	lsls	r3, r3, #2
 800422c:	4413      	add	r3, r2
 800422e:	009b      	lsls	r3, r3, #2
 8004230:	4a14      	ldr	r2, [pc, #80]	@ (8004284 <vTaskSwitchContext+0xbc>)
 8004232:	4413      	add	r3, r2
 8004234:	613b      	str	r3, [r7, #16]
 8004236:	693b      	ldr	r3, [r7, #16]
 8004238:	685b      	ldr	r3, [r3, #4]
 800423a:	685a      	ldr	r2, [r3, #4]
 800423c:	693b      	ldr	r3, [r7, #16]
 800423e:	605a      	str	r2, [r3, #4]
 8004240:	693b      	ldr	r3, [r7, #16]
 8004242:	685a      	ldr	r2, [r3, #4]
 8004244:	693b      	ldr	r3, [r7, #16]
 8004246:	3308      	adds	r3, #8
 8004248:	429a      	cmp	r2, r3
 800424a:	d104      	bne.n	8004256 <vTaskSwitchContext+0x8e>
 800424c:	693b      	ldr	r3, [r7, #16]
 800424e:	685b      	ldr	r3, [r3, #4]
 8004250:	685a      	ldr	r2, [r3, #4]
 8004252:	693b      	ldr	r3, [r7, #16]
 8004254:	605a      	str	r2, [r3, #4]
 8004256:	693b      	ldr	r3, [r7, #16]
 8004258:	685b      	ldr	r3, [r3, #4]
 800425a:	68db      	ldr	r3, [r3, #12]
 800425c:	4a0a      	ldr	r2, [pc, #40]	@ (8004288 <vTaskSwitchContext+0xc0>)
 800425e:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8004260:	4b09      	ldr	r3, [pc, #36]	@ (8004288 <vTaskSwitchContext+0xc0>)
 8004262:	681b      	ldr	r3, [r3, #0]
 8004264:	334c      	adds	r3, #76	@ 0x4c
 8004266:	4a09      	ldr	r2, [pc, #36]	@ (800428c <vTaskSwitchContext+0xc4>)
 8004268:	6013      	str	r3, [r2, #0]
}
 800426a:	bf00      	nop
 800426c:	371c      	adds	r7, #28
 800426e:	46bd      	mov	sp, r7
 8004270:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004274:	4770      	bx	lr
 8004276:	bf00      	nop
 8004278:	20000a28 	.word	0x20000a28
 800427c:	20000a14 	.word	0x20000a14
 8004280:	20000a08 	.word	0x20000a08
 8004284:	20000904 	.word	0x20000904
 8004288:	20000900 	.word	0x20000900
 800428c:	20000030 	.word	0x20000030

08004290 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8004290:	b580      	push	{r7, lr}
 8004292:	b084      	sub	sp, #16
 8004294:	af00      	add	r7, sp, #0
 8004296:	6078      	str	r0, [r7, #4]
 8004298:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 800429a:	687b      	ldr	r3, [r7, #4]
 800429c:	2b00      	cmp	r3, #0
 800429e:	d10b      	bne.n	80042b8 <vTaskPlaceOnEventList+0x28>
	__asm volatile
 80042a0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80042a4:	f383 8811 	msr	BASEPRI, r3
 80042a8:	f3bf 8f6f 	isb	sy
 80042ac:	f3bf 8f4f 	dsb	sy
 80042b0:	60fb      	str	r3, [r7, #12]
}
 80042b2:	bf00      	nop
 80042b4:	bf00      	nop
 80042b6:	e7fd      	b.n	80042b4 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 80042b8:	4b07      	ldr	r3, [pc, #28]	@ (80042d8 <vTaskPlaceOnEventList+0x48>)
 80042ba:	681b      	ldr	r3, [r3, #0]
 80042bc:	3318      	adds	r3, #24
 80042be:	4619      	mov	r1, r3
 80042c0:	6878      	ldr	r0, [r7, #4]
 80042c2:	f7fe fe1f 	bl	8002f04 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 80042c6:	2101      	movs	r1, #1
 80042c8:	6838      	ldr	r0, [r7, #0]
 80042ca:	f000 fa9f 	bl	800480c <prvAddCurrentTaskToDelayedList>
}
 80042ce:	bf00      	nop
 80042d0:	3710      	adds	r7, #16
 80042d2:	46bd      	mov	sp, r7
 80042d4:	bd80      	pop	{r7, pc}
 80042d6:	bf00      	nop
 80042d8:	20000900 	.word	0x20000900

080042dc <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 80042dc:	b580      	push	{r7, lr}
 80042de:	b086      	sub	sp, #24
 80042e0:	af00      	add	r7, sp, #0
 80042e2:	60f8      	str	r0, [r7, #12]
 80042e4:	60b9      	str	r1, [r7, #8]
 80042e6:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 80042e8:	68fb      	ldr	r3, [r7, #12]
 80042ea:	2b00      	cmp	r3, #0
 80042ec:	d10b      	bne.n	8004306 <vTaskPlaceOnEventListRestricted+0x2a>
	__asm volatile
 80042ee:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80042f2:	f383 8811 	msr	BASEPRI, r3
 80042f6:	f3bf 8f6f 	isb	sy
 80042fa:	f3bf 8f4f 	dsb	sy
 80042fe:	617b      	str	r3, [r7, #20]
}
 8004300:	bf00      	nop
 8004302:	bf00      	nop
 8004304:	e7fd      	b.n	8004302 <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8004306:	4b0a      	ldr	r3, [pc, #40]	@ (8004330 <vTaskPlaceOnEventListRestricted+0x54>)
 8004308:	681b      	ldr	r3, [r3, #0]
 800430a:	3318      	adds	r3, #24
 800430c:	4619      	mov	r1, r3
 800430e:	68f8      	ldr	r0, [r7, #12]
 8004310:	f7fe fdd4 	bl	8002ebc <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 8004314:	687b      	ldr	r3, [r7, #4]
 8004316:	2b00      	cmp	r3, #0
 8004318:	d002      	beq.n	8004320 <vTaskPlaceOnEventListRestricted+0x44>
		{
			xTicksToWait = portMAX_DELAY;
 800431a:	f04f 33ff 	mov.w	r3, #4294967295
 800431e:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 8004320:	6879      	ldr	r1, [r7, #4]
 8004322:	68b8      	ldr	r0, [r7, #8]
 8004324:	f000 fa72 	bl	800480c <prvAddCurrentTaskToDelayedList>
	}
 8004328:	bf00      	nop
 800432a:	3718      	adds	r7, #24
 800432c:	46bd      	mov	sp, r7
 800432e:	bd80      	pop	{r7, pc}
 8004330:	20000900 	.word	0x20000900

08004334 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8004334:	b580      	push	{r7, lr}
 8004336:	b086      	sub	sp, #24
 8004338:	af00      	add	r7, sp, #0
 800433a:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800433c:	687b      	ldr	r3, [r7, #4]
 800433e:	68db      	ldr	r3, [r3, #12]
 8004340:	68db      	ldr	r3, [r3, #12]
 8004342:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8004344:	693b      	ldr	r3, [r7, #16]
 8004346:	2b00      	cmp	r3, #0
 8004348:	d10b      	bne.n	8004362 <xTaskRemoveFromEventList+0x2e>
	__asm volatile
 800434a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800434e:	f383 8811 	msr	BASEPRI, r3
 8004352:	f3bf 8f6f 	isb	sy
 8004356:	f3bf 8f4f 	dsb	sy
 800435a:	60fb      	str	r3, [r7, #12]
}
 800435c:	bf00      	nop
 800435e:	bf00      	nop
 8004360:	e7fd      	b.n	800435e <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8004362:	693b      	ldr	r3, [r7, #16]
 8004364:	3318      	adds	r3, #24
 8004366:	4618      	mov	r0, r3
 8004368:	f7fe fe05 	bl	8002f76 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800436c:	4b1d      	ldr	r3, [pc, #116]	@ (80043e4 <xTaskRemoveFromEventList+0xb0>)
 800436e:	681b      	ldr	r3, [r3, #0]
 8004370:	2b00      	cmp	r3, #0
 8004372:	d11c      	bne.n	80043ae <xTaskRemoveFromEventList+0x7a>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8004374:	693b      	ldr	r3, [r7, #16]
 8004376:	3304      	adds	r3, #4
 8004378:	4618      	mov	r0, r3
 800437a:	f7fe fdfc 	bl	8002f76 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 800437e:	693b      	ldr	r3, [r7, #16]
 8004380:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004382:	2201      	movs	r2, #1
 8004384:	409a      	lsls	r2, r3
 8004386:	4b18      	ldr	r3, [pc, #96]	@ (80043e8 <xTaskRemoveFromEventList+0xb4>)
 8004388:	681b      	ldr	r3, [r3, #0]
 800438a:	4313      	orrs	r3, r2
 800438c:	4a16      	ldr	r2, [pc, #88]	@ (80043e8 <xTaskRemoveFromEventList+0xb4>)
 800438e:	6013      	str	r3, [r2, #0]
 8004390:	693b      	ldr	r3, [r7, #16]
 8004392:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004394:	4613      	mov	r3, r2
 8004396:	009b      	lsls	r3, r3, #2
 8004398:	4413      	add	r3, r2
 800439a:	009b      	lsls	r3, r3, #2
 800439c:	4a13      	ldr	r2, [pc, #76]	@ (80043ec <xTaskRemoveFromEventList+0xb8>)
 800439e:	441a      	add	r2, r3
 80043a0:	693b      	ldr	r3, [r7, #16]
 80043a2:	3304      	adds	r3, #4
 80043a4:	4619      	mov	r1, r3
 80043a6:	4610      	mov	r0, r2
 80043a8:	f7fe fd88 	bl	8002ebc <vListInsertEnd>
 80043ac:	e005      	b.n	80043ba <xTaskRemoveFromEventList+0x86>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 80043ae:	693b      	ldr	r3, [r7, #16]
 80043b0:	3318      	adds	r3, #24
 80043b2:	4619      	mov	r1, r3
 80043b4:	480e      	ldr	r0, [pc, #56]	@ (80043f0 <xTaskRemoveFromEventList+0xbc>)
 80043b6:	f7fe fd81 	bl	8002ebc <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 80043ba:	693b      	ldr	r3, [r7, #16]
 80043bc:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80043be:	4b0d      	ldr	r3, [pc, #52]	@ (80043f4 <xTaskRemoveFromEventList+0xc0>)
 80043c0:	681b      	ldr	r3, [r3, #0]
 80043c2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80043c4:	429a      	cmp	r2, r3
 80043c6:	d905      	bls.n	80043d4 <xTaskRemoveFromEventList+0xa0>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 80043c8:	2301      	movs	r3, #1
 80043ca:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 80043cc:	4b0a      	ldr	r3, [pc, #40]	@ (80043f8 <xTaskRemoveFromEventList+0xc4>)
 80043ce:	2201      	movs	r2, #1
 80043d0:	601a      	str	r2, [r3, #0]
 80043d2:	e001      	b.n	80043d8 <xTaskRemoveFromEventList+0xa4>
	}
	else
	{
		xReturn = pdFALSE;
 80043d4:	2300      	movs	r3, #0
 80043d6:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 80043d8:	697b      	ldr	r3, [r7, #20]
}
 80043da:	4618      	mov	r0, r3
 80043dc:	3718      	adds	r7, #24
 80043de:	46bd      	mov	sp, r7
 80043e0:	bd80      	pop	{r7, pc}
 80043e2:	bf00      	nop
 80043e4:	20000a28 	.word	0x20000a28
 80043e8:	20000a08 	.word	0x20000a08
 80043ec:	20000904 	.word	0x20000904
 80043f0:	200009c0 	.word	0x200009c0
 80043f4:	20000900 	.word	0x20000900
 80043f8:	20000a14 	.word	0x20000a14

080043fc <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 80043fc:	b480      	push	{r7}
 80043fe:	b083      	sub	sp, #12
 8004400:	af00      	add	r7, sp, #0
 8004402:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8004404:	4b06      	ldr	r3, [pc, #24]	@ (8004420 <vTaskInternalSetTimeOutState+0x24>)
 8004406:	681a      	ldr	r2, [r3, #0]
 8004408:	687b      	ldr	r3, [r7, #4]
 800440a:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 800440c:	4b05      	ldr	r3, [pc, #20]	@ (8004424 <vTaskInternalSetTimeOutState+0x28>)
 800440e:	681a      	ldr	r2, [r3, #0]
 8004410:	687b      	ldr	r3, [r7, #4]
 8004412:	605a      	str	r2, [r3, #4]
}
 8004414:	bf00      	nop
 8004416:	370c      	adds	r7, #12
 8004418:	46bd      	mov	sp, r7
 800441a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800441e:	4770      	bx	lr
 8004420:	20000a18 	.word	0x20000a18
 8004424:	20000a04 	.word	0x20000a04

08004428 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8004428:	b580      	push	{r7, lr}
 800442a:	b088      	sub	sp, #32
 800442c:	af00      	add	r7, sp, #0
 800442e:	6078      	str	r0, [r7, #4]
 8004430:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 8004432:	687b      	ldr	r3, [r7, #4]
 8004434:	2b00      	cmp	r3, #0
 8004436:	d10b      	bne.n	8004450 <xTaskCheckForTimeOut+0x28>
	__asm volatile
 8004438:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800443c:	f383 8811 	msr	BASEPRI, r3
 8004440:	f3bf 8f6f 	isb	sy
 8004444:	f3bf 8f4f 	dsb	sy
 8004448:	613b      	str	r3, [r7, #16]
}
 800444a:	bf00      	nop
 800444c:	bf00      	nop
 800444e:	e7fd      	b.n	800444c <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 8004450:	683b      	ldr	r3, [r7, #0]
 8004452:	2b00      	cmp	r3, #0
 8004454:	d10b      	bne.n	800446e <xTaskCheckForTimeOut+0x46>
	__asm volatile
 8004456:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800445a:	f383 8811 	msr	BASEPRI, r3
 800445e:	f3bf 8f6f 	isb	sy
 8004462:	f3bf 8f4f 	dsb	sy
 8004466:	60fb      	str	r3, [r7, #12]
}
 8004468:	bf00      	nop
 800446a:	bf00      	nop
 800446c:	e7fd      	b.n	800446a <xTaskCheckForTimeOut+0x42>

	taskENTER_CRITICAL();
 800446e:	f000 fea3 	bl	80051b8 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 8004472:	4b1d      	ldr	r3, [pc, #116]	@ (80044e8 <xTaskCheckForTimeOut+0xc0>)
 8004474:	681b      	ldr	r3, [r3, #0]
 8004476:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8004478:	687b      	ldr	r3, [r7, #4]
 800447a:	685b      	ldr	r3, [r3, #4]
 800447c:	69ba      	ldr	r2, [r7, #24]
 800447e:	1ad3      	subs	r3, r2, r3
 8004480:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 8004482:	683b      	ldr	r3, [r7, #0]
 8004484:	681b      	ldr	r3, [r3, #0]
 8004486:	f1b3 3fff 	cmp.w	r3, #4294967295
 800448a:	d102      	bne.n	8004492 <xTaskCheckForTimeOut+0x6a>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 800448c:	2300      	movs	r3, #0
 800448e:	61fb      	str	r3, [r7, #28]
 8004490:	e023      	b.n	80044da <xTaskCheckForTimeOut+0xb2>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8004492:	687b      	ldr	r3, [r7, #4]
 8004494:	681a      	ldr	r2, [r3, #0]
 8004496:	4b15      	ldr	r3, [pc, #84]	@ (80044ec <xTaskCheckForTimeOut+0xc4>)
 8004498:	681b      	ldr	r3, [r3, #0]
 800449a:	429a      	cmp	r2, r3
 800449c:	d007      	beq.n	80044ae <xTaskCheckForTimeOut+0x86>
 800449e:	687b      	ldr	r3, [r7, #4]
 80044a0:	685b      	ldr	r3, [r3, #4]
 80044a2:	69ba      	ldr	r2, [r7, #24]
 80044a4:	429a      	cmp	r2, r3
 80044a6:	d302      	bcc.n	80044ae <xTaskCheckForTimeOut+0x86>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 80044a8:	2301      	movs	r3, #1
 80044aa:	61fb      	str	r3, [r7, #28]
 80044ac:	e015      	b.n	80044da <xTaskCheckForTimeOut+0xb2>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 80044ae:	683b      	ldr	r3, [r7, #0]
 80044b0:	681b      	ldr	r3, [r3, #0]
 80044b2:	697a      	ldr	r2, [r7, #20]
 80044b4:	429a      	cmp	r2, r3
 80044b6:	d20b      	bcs.n	80044d0 <xTaskCheckForTimeOut+0xa8>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 80044b8:	683b      	ldr	r3, [r7, #0]
 80044ba:	681a      	ldr	r2, [r3, #0]
 80044bc:	697b      	ldr	r3, [r7, #20]
 80044be:	1ad2      	subs	r2, r2, r3
 80044c0:	683b      	ldr	r3, [r7, #0]
 80044c2:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 80044c4:	6878      	ldr	r0, [r7, #4]
 80044c6:	f7ff ff99 	bl	80043fc <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 80044ca:	2300      	movs	r3, #0
 80044cc:	61fb      	str	r3, [r7, #28]
 80044ce:	e004      	b.n	80044da <xTaskCheckForTimeOut+0xb2>
		}
		else
		{
			*pxTicksToWait = 0;
 80044d0:	683b      	ldr	r3, [r7, #0]
 80044d2:	2200      	movs	r2, #0
 80044d4:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 80044d6:	2301      	movs	r3, #1
 80044d8:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 80044da:	f000 fe9f 	bl	800521c <vPortExitCritical>

	return xReturn;
 80044de:	69fb      	ldr	r3, [r7, #28]
}
 80044e0:	4618      	mov	r0, r3
 80044e2:	3720      	adds	r7, #32
 80044e4:	46bd      	mov	sp, r7
 80044e6:	bd80      	pop	{r7, pc}
 80044e8:	20000a04 	.word	0x20000a04
 80044ec:	20000a18 	.word	0x20000a18

080044f0 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 80044f0:	b480      	push	{r7}
 80044f2:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 80044f4:	4b03      	ldr	r3, [pc, #12]	@ (8004504 <vTaskMissedYield+0x14>)
 80044f6:	2201      	movs	r2, #1
 80044f8:	601a      	str	r2, [r3, #0]
}
 80044fa:	bf00      	nop
 80044fc:	46bd      	mov	sp, r7
 80044fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004502:	4770      	bx	lr
 8004504:	20000a14 	.word	0x20000a14

08004508 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8004508:	b580      	push	{r7, lr}
 800450a:	b082      	sub	sp, #8
 800450c:	af00      	add	r7, sp, #0
 800450e:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8004510:	f000 f852 	bl	80045b8 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8004514:	4b06      	ldr	r3, [pc, #24]	@ (8004530 <prvIdleTask+0x28>)
 8004516:	681b      	ldr	r3, [r3, #0]
 8004518:	2b01      	cmp	r3, #1
 800451a:	d9f9      	bls.n	8004510 <prvIdleTask+0x8>
			{
				taskYIELD();
 800451c:	4b05      	ldr	r3, [pc, #20]	@ (8004534 <prvIdleTask+0x2c>)
 800451e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8004522:	601a      	str	r2, [r3, #0]
 8004524:	f3bf 8f4f 	dsb	sy
 8004528:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 800452c:	e7f0      	b.n	8004510 <prvIdleTask+0x8>
 800452e:	bf00      	nop
 8004530:	20000904 	.word	0x20000904
 8004534:	e000ed04 	.word	0xe000ed04

08004538 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8004538:	b580      	push	{r7, lr}
 800453a:	b082      	sub	sp, #8
 800453c:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800453e:	2300      	movs	r3, #0
 8004540:	607b      	str	r3, [r7, #4]
 8004542:	e00c      	b.n	800455e <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8004544:	687a      	ldr	r2, [r7, #4]
 8004546:	4613      	mov	r3, r2
 8004548:	009b      	lsls	r3, r3, #2
 800454a:	4413      	add	r3, r2
 800454c:	009b      	lsls	r3, r3, #2
 800454e:	4a12      	ldr	r2, [pc, #72]	@ (8004598 <prvInitialiseTaskLists+0x60>)
 8004550:	4413      	add	r3, r2
 8004552:	4618      	mov	r0, r3
 8004554:	f7fe fc85 	bl	8002e62 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8004558:	687b      	ldr	r3, [r7, #4]
 800455a:	3301      	adds	r3, #1
 800455c:	607b      	str	r3, [r7, #4]
 800455e:	687b      	ldr	r3, [r7, #4]
 8004560:	2b06      	cmp	r3, #6
 8004562:	d9ef      	bls.n	8004544 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8004564:	480d      	ldr	r0, [pc, #52]	@ (800459c <prvInitialiseTaskLists+0x64>)
 8004566:	f7fe fc7c 	bl	8002e62 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 800456a:	480d      	ldr	r0, [pc, #52]	@ (80045a0 <prvInitialiseTaskLists+0x68>)
 800456c:	f7fe fc79 	bl	8002e62 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8004570:	480c      	ldr	r0, [pc, #48]	@ (80045a4 <prvInitialiseTaskLists+0x6c>)
 8004572:	f7fe fc76 	bl	8002e62 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8004576:	480c      	ldr	r0, [pc, #48]	@ (80045a8 <prvInitialiseTaskLists+0x70>)
 8004578:	f7fe fc73 	bl	8002e62 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 800457c:	480b      	ldr	r0, [pc, #44]	@ (80045ac <prvInitialiseTaskLists+0x74>)
 800457e:	f7fe fc70 	bl	8002e62 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8004582:	4b0b      	ldr	r3, [pc, #44]	@ (80045b0 <prvInitialiseTaskLists+0x78>)
 8004584:	4a05      	ldr	r2, [pc, #20]	@ (800459c <prvInitialiseTaskLists+0x64>)
 8004586:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8004588:	4b0a      	ldr	r3, [pc, #40]	@ (80045b4 <prvInitialiseTaskLists+0x7c>)
 800458a:	4a05      	ldr	r2, [pc, #20]	@ (80045a0 <prvInitialiseTaskLists+0x68>)
 800458c:	601a      	str	r2, [r3, #0]
}
 800458e:	bf00      	nop
 8004590:	3708      	adds	r7, #8
 8004592:	46bd      	mov	sp, r7
 8004594:	bd80      	pop	{r7, pc}
 8004596:	bf00      	nop
 8004598:	20000904 	.word	0x20000904
 800459c:	20000990 	.word	0x20000990
 80045a0:	200009a4 	.word	0x200009a4
 80045a4:	200009c0 	.word	0x200009c0
 80045a8:	200009d4 	.word	0x200009d4
 80045ac:	200009ec 	.word	0x200009ec
 80045b0:	200009b8 	.word	0x200009b8
 80045b4:	200009bc 	.word	0x200009bc

080045b8 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 80045b8:	b580      	push	{r7, lr}
 80045ba:	b082      	sub	sp, #8
 80045bc:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80045be:	e019      	b.n	80045f4 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 80045c0:	f000 fdfa 	bl	80051b8 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80045c4:	4b10      	ldr	r3, [pc, #64]	@ (8004608 <prvCheckTasksWaitingTermination+0x50>)
 80045c6:	68db      	ldr	r3, [r3, #12]
 80045c8:	68db      	ldr	r3, [r3, #12]
 80045ca:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80045cc:	687b      	ldr	r3, [r7, #4]
 80045ce:	3304      	adds	r3, #4
 80045d0:	4618      	mov	r0, r3
 80045d2:	f7fe fcd0 	bl	8002f76 <uxListRemove>
				--uxCurrentNumberOfTasks;
 80045d6:	4b0d      	ldr	r3, [pc, #52]	@ (800460c <prvCheckTasksWaitingTermination+0x54>)
 80045d8:	681b      	ldr	r3, [r3, #0]
 80045da:	3b01      	subs	r3, #1
 80045dc:	4a0b      	ldr	r2, [pc, #44]	@ (800460c <prvCheckTasksWaitingTermination+0x54>)
 80045de:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 80045e0:	4b0b      	ldr	r3, [pc, #44]	@ (8004610 <prvCheckTasksWaitingTermination+0x58>)
 80045e2:	681b      	ldr	r3, [r3, #0]
 80045e4:	3b01      	subs	r3, #1
 80045e6:	4a0a      	ldr	r2, [pc, #40]	@ (8004610 <prvCheckTasksWaitingTermination+0x58>)
 80045e8:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 80045ea:	f000 fe17 	bl	800521c <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 80045ee:	6878      	ldr	r0, [r7, #4]
 80045f0:	f000 f810 	bl	8004614 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80045f4:	4b06      	ldr	r3, [pc, #24]	@ (8004610 <prvCheckTasksWaitingTermination+0x58>)
 80045f6:	681b      	ldr	r3, [r3, #0]
 80045f8:	2b00      	cmp	r3, #0
 80045fa:	d1e1      	bne.n	80045c0 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 80045fc:	bf00      	nop
 80045fe:	bf00      	nop
 8004600:	3708      	adds	r7, #8
 8004602:	46bd      	mov	sp, r7
 8004604:	bd80      	pop	{r7, pc}
 8004606:	bf00      	nop
 8004608:	200009d4 	.word	0x200009d4
 800460c:	20000a00 	.word	0x20000a00
 8004610:	200009e8 	.word	0x200009e8

08004614 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8004614:	b580      	push	{r7, lr}
 8004616:	b084      	sub	sp, #16
 8004618:	af00      	add	r7, sp, #0
 800461a:	6078      	str	r0, [r7, #4]
		to the task to free any memory allocated at the application level.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 800461c:	687b      	ldr	r3, [r7, #4]
 800461e:	334c      	adds	r3, #76	@ 0x4c
 8004620:	4618      	mov	r0, r3
 8004622:	f002 fabd 	bl	8006ba0 <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8004626:	687b      	ldr	r3, [r7, #4]
 8004628:	f893 309d 	ldrb.w	r3, [r3, #157]	@ 0x9d
 800462c:	2b00      	cmp	r3, #0
 800462e:	d108      	bne.n	8004642 <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8004630:	687b      	ldr	r3, [r7, #4]
 8004632:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004634:	4618      	mov	r0, r3
 8004636:	f000 ffaf 	bl	8005598 <vPortFree>
				vPortFree( pxTCB );
 800463a:	6878      	ldr	r0, [r7, #4]
 800463c:	f000 ffac 	bl	8005598 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8004640:	e019      	b.n	8004676 <prvDeleteTCB+0x62>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8004642:	687b      	ldr	r3, [r7, #4]
 8004644:	f893 309d 	ldrb.w	r3, [r3, #157]	@ 0x9d
 8004648:	2b01      	cmp	r3, #1
 800464a:	d103      	bne.n	8004654 <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 800464c:	6878      	ldr	r0, [r7, #4]
 800464e:	f000 ffa3 	bl	8005598 <vPortFree>
	}
 8004652:	e010      	b.n	8004676 <prvDeleteTCB+0x62>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8004654:	687b      	ldr	r3, [r7, #4]
 8004656:	f893 309d 	ldrb.w	r3, [r3, #157]	@ 0x9d
 800465a:	2b02      	cmp	r3, #2
 800465c:	d00b      	beq.n	8004676 <prvDeleteTCB+0x62>
	__asm volatile
 800465e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004662:	f383 8811 	msr	BASEPRI, r3
 8004666:	f3bf 8f6f 	isb	sy
 800466a:	f3bf 8f4f 	dsb	sy
 800466e:	60fb      	str	r3, [r7, #12]
}
 8004670:	bf00      	nop
 8004672:	bf00      	nop
 8004674:	e7fd      	b.n	8004672 <prvDeleteTCB+0x5e>
	}
 8004676:	bf00      	nop
 8004678:	3710      	adds	r7, #16
 800467a:	46bd      	mov	sp, r7
 800467c:	bd80      	pop	{r7, pc}
	...

08004680 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8004680:	b480      	push	{r7}
 8004682:	b083      	sub	sp, #12
 8004684:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8004686:	4b0c      	ldr	r3, [pc, #48]	@ (80046b8 <prvResetNextTaskUnblockTime+0x38>)
 8004688:	681b      	ldr	r3, [r3, #0]
 800468a:	681b      	ldr	r3, [r3, #0]
 800468c:	2b00      	cmp	r3, #0
 800468e:	d104      	bne.n	800469a <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8004690:	4b0a      	ldr	r3, [pc, #40]	@ (80046bc <prvResetNextTaskUnblockTime+0x3c>)
 8004692:	f04f 32ff 	mov.w	r2, #4294967295
 8004696:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8004698:	e008      	b.n	80046ac <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800469a:	4b07      	ldr	r3, [pc, #28]	@ (80046b8 <prvResetNextTaskUnblockTime+0x38>)
 800469c:	681b      	ldr	r3, [r3, #0]
 800469e:	68db      	ldr	r3, [r3, #12]
 80046a0:	68db      	ldr	r3, [r3, #12]
 80046a2:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 80046a4:	687b      	ldr	r3, [r7, #4]
 80046a6:	685b      	ldr	r3, [r3, #4]
 80046a8:	4a04      	ldr	r2, [pc, #16]	@ (80046bc <prvResetNextTaskUnblockTime+0x3c>)
 80046aa:	6013      	str	r3, [r2, #0]
}
 80046ac:	bf00      	nop
 80046ae:	370c      	adds	r7, #12
 80046b0:	46bd      	mov	sp, r7
 80046b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046b6:	4770      	bx	lr
 80046b8:	200009b8 	.word	0x200009b8
 80046bc:	20000a20 	.word	0x20000a20

080046c0 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 80046c0:	b480      	push	{r7}
 80046c2:	b083      	sub	sp, #12
 80046c4:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 80046c6:	4b0b      	ldr	r3, [pc, #44]	@ (80046f4 <xTaskGetSchedulerState+0x34>)
 80046c8:	681b      	ldr	r3, [r3, #0]
 80046ca:	2b00      	cmp	r3, #0
 80046cc:	d102      	bne.n	80046d4 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 80046ce:	2301      	movs	r3, #1
 80046d0:	607b      	str	r3, [r7, #4]
 80046d2:	e008      	b.n	80046e6 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80046d4:	4b08      	ldr	r3, [pc, #32]	@ (80046f8 <xTaskGetSchedulerState+0x38>)
 80046d6:	681b      	ldr	r3, [r3, #0]
 80046d8:	2b00      	cmp	r3, #0
 80046da:	d102      	bne.n	80046e2 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 80046dc:	2302      	movs	r3, #2
 80046de:	607b      	str	r3, [r7, #4]
 80046e0:	e001      	b.n	80046e6 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 80046e2:	2300      	movs	r3, #0
 80046e4:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 80046e6:	687b      	ldr	r3, [r7, #4]
	}
 80046e8:	4618      	mov	r0, r3
 80046ea:	370c      	adds	r7, #12
 80046ec:	46bd      	mov	sp, r7
 80046ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046f2:	4770      	bx	lr
 80046f4:	20000a0c 	.word	0x20000a0c
 80046f8:	20000a28 	.word	0x20000a28

080046fc <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 80046fc:	b580      	push	{r7, lr}
 80046fe:	b086      	sub	sp, #24
 8004700:	af00      	add	r7, sp, #0
 8004702:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 8004704:	687b      	ldr	r3, [r7, #4]
 8004706:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 8004708:	2300      	movs	r3, #0
 800470a:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 800470c:	687b      	ldr	r3, [r7, #4]
 800470e:	2b00      	cmp	r3, #0
 8004710:	d070      	beq.n	80047f4 <xTaskPriorityDisinherit+0xf8>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 8004712:	4b3b      	ldr	r3, [pc, #236]	@ (8004800 <xTaskPriorityDisinherit+0x104>)
 8004714:	681b      	ldr	r3, [r3, #0]
 8004716:	693a      	ldr	r2, [r7, #16]
 8004718:	429a      	cmp	r2, r3
 800471a:	d00b      	beq.n	8004734 <xTaskPriorityDisinherit+0x38>
	__asm volatile
 800471c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004720:	f383 8811 	msr	BASEPRI, r3
 8004724:	f3bf 8f6f 	isb	sy
 8004728:	f3bf 8f4f 	dsb	sy
 800472c:	60fb      	str	r3, [r7, #12]
}
 800472e:	bf00      	nop
 8004730:	bf00      	nop
 8004732:	e7fd      	b.n	8004730 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 8004734:	693b      	ldr	r3, [r7, #16]
 8004736:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004738:	2b00      	cmp	r3, #0
 800473a:	d10b      	bne.n	8004754 <xTaskPriorityDisinherit+0x58>
	__asm volatile
 800473c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004740:	f383 8811 	msr	BASEPRI, r3
 8004744:	f3bf 8f6f 	isb	sy
 8004748:	f3bf 8f4f 	dsb	sy
 800474c:	60bb      	str	r3, [r7, #8]
}
 800474e:	bf00      	nop
 8004750:	bf00      	nop
 8004752:	e7fd      	b.n	8004750 <xTaskPriorityDisinherit+0x54>
			( pxTCB->uxMutexesHeld )--;
 8004754:	693b      	ldr	r3, [r7, #16]
 8004756:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004758:	1e5a      	subs	r2, r3, #1
 800475a:	693b      	ldr	r3, [r7, #16]
 800475c:	649a      	str	r2, [r3, #72]	@ 0x48

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 800475e:	693b      	ldr	r3, [r7, #16]
 8004760:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004762:	693b      	ldr	r3, [r7, #16]
 8004764:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004766:	429a      	cmp	r2, r3
 8004768:	d044      	beq.n	80047f4 <xTaskPriorityDisinherit+0xf8>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 800476a:	693b      	ldr	r3, [r7, #16]
 800476c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800476e:	2b00      	cmp	r3, #0
 8004770:	d140      	bne.n	80047f4 <xTaskPriorityDisinherit+0xf8>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8004772:	693b      	ldr	r3, [r7, #16]
 8004774:	3304      	adds	r3, #4
 8004776:	4618      	mov	r0, r3
 8004778:	f7fe fbfd 	bl	8002f76 <uxListRemove>
 800477c:	4603      	mov	r3, r0
 800477e:	2b00      	cmp	r3, #0
 8004780:	d115      	bne.n	80047ae <xTaskPriorityDisinherit+0xb2>
					{
						taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 8004782:	693b      	ldr	r3, [r7, #16]
 8004784:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004786:	491f      	ldr	r1, [pc, #124]	@ (8004804 <xTaskPriorityDisinherit+0x108>)
 8004788:	4613      	mov	r3, r2
 800478a:	009b      	lsls	r3, r3, #2
 800478c:	4413      	add	r3, r2
 800478e:	009b      	lsls	r3, r3, #2
 8004790:	440b      	add	r3, r1
 8004792:	681b      	ldr	r3, [r3, #0]
 8004794:	2b00      	cmp	r3, #0
 8004796:	d10a      	bne.n	80047ae <xTaskPriorityDisinherit+0xb2>
 8004798:	693b      	ldr	r3, [r7, #16]
 800479a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800479c:	2201      	movs	r2, #1
 800479e:	fa02 f303 	lsl.w	r3, r2, r3
 80047a2:	43da      	mvns	r2, r3
 80047a4:	4b18      	ldr	r3, [pc, #96]	@ (8004808 <xTaskPriorityDisinherit+0x10c>)
 80047a6:	681b      	ldr	r3, [r3, #0]
 80047a8:	4013      	ands	r3, r2
 80047aa:	4a17      	ldr	r2, [pc, #92]	@ (8004808 <xTaskPriorityDisinherit+0x10c>)
 80047ac:	6013      	str	r3, [r2, #0]
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 80047ae:	693b      	ldr	r3, [r7, #16]
 80047b0:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80047b2:	693b      	ldr	r3, [r7, #16]
 80047b4:	62da      	str	r2, [r3, #44]	@ 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80047b6:	693b      	ldr	r3, [r7, #16]
 80047b8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80047ba:	f1c3 0207 	rsb	r2, r3, #7
 80047be:	693b      	ldr	r3, [r7, #16]
 80047c0:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 80047c2:	693b      	ldr	r3, [r7, #16]
 80047c4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80047c6:	2201      	movs	r2, #1
 80047c8:	409a      	lsls	r2, r3
 80047ca:	4b0f      	ldr	r3, [pc, #60]	@ (8004808 <xTaskPriorityDisinherit+0x10c>)
 80047cc:	681b      	ldr	r3, [r3, #0]
 80047ce:	4313      	orrs	r3, r2
 80047d0:	4a0d      	ldr	r2, [pc, #52]	@ (8004808 <xTaskPriorityDisinherit+0x10c>)
 80047d2:	6013      	str	r3, [r2, #0]
 80047d4:	693b      	ldr	r3, [r7, #16]
 80047d6:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80047d8:	4613      	mov	r3, r2
 80047da:	009b      	lsls	r3, r3, #2
 80047dc:	4413      	add	r3, r2
 80047de:	009b      	lsls	r3, r3, #2
 80047e0:	4a08      	ldr	r2, [pc, #32]	@ (8004804 <xTaskPriorityDisinherit+0x108>)
 80047e2:	441a      	add	r2, r3
 80047e4:	693b      	ldr	r3, [r7, #16]
 80047e6:	3304      	adds	r3, #4
 80047e8:	4619      	mov	r1, r3
 80047ea:	4610      	mov	r0, r2
 80047ec:	f7fe fb66 	bl	8002ebc <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 80047f0:	2301      	movs	r3, #1
 80047f2:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 80047f4:	697b      	ldr	r3, [r7, #20]
	}
 80047f6:	4618      	mov	r0, r3
 80047f8:	3718      	adds	r7, #24
 80047fa:	46bd      	mov	sp, r7
 80047fc:	bd80      	pop	{r7, pc}
 80047fe:	bf00      	nop
 8004800:	20000900 	.word	0x20000900
 8004804:	20000904 	.word	0x20000904
 8004808:	20000a08 	.word	0x20000a08

0800480c <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 800480c:	b580      	push	{r7, lr}
 800480e:	b084      	sub	sp, #16
 8004810:	af00      	add	r7, sp, #0
 8004812:	6078      	str	r0, [r7, #4]
 8004814:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8004816:	4b29      	ldr	r3, [pc, #164]	@ (80048bc <prvAddCurrentTaskToDelayedList+0xb0>)
 8004818:	681b      	ldr	r3, [r3, #0]
 800481a:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800481c:	4b28      	ldr	r3, [pc, #160]	@ (80048c0 <prvAddCurrentTaskToDelayedList+0xb4>)
 800481e:	681b      	ldr	r3, [r3, #0]
 8004820:	3304      	adds	r3, #4
 8004822:	4618      	mov	r0, r3
 8004824:	f7fe fba7 	bl	8002f76 <uxListRemove>
 8004828:	4603      	mov	r3, r0
 800482a:	2b00      	cmp	r3, #0
 800482c:	d10b      	bne.n	8004846 <prvAddCurrentTaskToDelayedList+0x3a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 800482e:	4b24      	ldr	r3, [pc, #144]	@ (80048c0 <prvAddCurrentTaskToDelayedList+0xb4>)
 8004830:	681b      	ldr	r3, [r3, #0]
 8004832:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004834:	2201      	movs	r2, #1
 8004836:	fa02 f303 	lsl.w	r3, r2, r3
 800483a:	43da      	mvns	r2, r3
 800483c:	4b21      	ldr	r3, [pc, #132]	@ (80048c4 <prvAddCurrentTaskToDelayedList+0xb8>)
 800483e:	681b      	ldr	r3, [r3, #0]
 8004840:	4013      	ands	r3, r2
 8004842:	4a20      	ldr	r2, [pc, #128]	@ (80048c4 <prvAddCurrentTaskToDelayedList+0xb8>)
 8004844:	6013      	str	r3, [r2, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8004846:	687b      	ldr	r3, [r7, #4]
 8004848:	f1b3 3fff 	cmp.w	r3, #4294967295
 800484c:	d10a      	bne.n	8004864 <prvAddCurrentTaskToDelayedList+0x58>
 800484e:	683b      	ldr	r3, [r7, #0]
 8004850:	2b00      	cmp	r3, #0
 8004852:	d007      	beq.n	8004864 <prvAddCurrentTaskToDelayedList+0x58>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8004854:	4b1a      	ldr	r3, [pc, #104]	@ (80048c0 <prvAddCurrentTaskToDelayedList+0xb4>)
 8004856:	681b      	ldr	r3, [r3, #0]
 8004858:	3304      	adds	r3, #4
 800485a:	4619      	mov	r1, r3
 800485c:	481a      	ldr	r0, [pc, #104]	@ (80048c8 <prvAddCurrentTaskToDelayedList+0xbc>)
 800485e:	f7fe fb2d 	bl	8002ebc <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8004862:	e026      	b.n	80048b2 <prvAddCurrentTaskToDelayedList+0xa6>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8004864:	68fa      	ldr	r2, [r7, #12]
 8004866:	687b      	ldr	r3, [r7, #4]
 8004868:	4413      	add	r3, r2
 800486a:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 800486c:	4b14      	ldr	r3, [pc, #80]	@ (80048c0 <prvAddCurrentTaskToDelayedList+0xb4>)
 800486e:	681b      	ldr	r3, [r3, #0]
 8004870:	68ba      	ldr	r2, [r7, #8]
 8004872:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8004874:	68ba      	ldr	r2, [r7, #8]
 8004876:	68fb      	ldr	r3, [r7, #12]
 8004878:	429a      	cmp	r2, r3
 800487a:	d209      	bcs.n	8004890 <prvAddCurrentTaskToDelayedList+0x84>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800487c:	4b13      	ldr	r3, [pc, #76]	@ (80048cc <prvAddCurrentTaskToDelayedList+0xc0>)
 800487e:	681a      	ldr	r2, [r3, #0]
 8004880:	4b0f      	ldr	r3, [pc, #60]	@ (80048c0 <prvAddCurrentTaskToDelayedList+0xb4>)
 8004882:	681b      	ldr	r3, [r3, #0]
 8004884:	3304      	adds	r3, #4
 8004886:	4619      	mov	r1, r3
 8004888:	4610      	mov	r0, r2
 800488a:	f7fe fb3b 	bl	8002f04 <vListInsert>
}
 800488e:	e010      	b.n	80048b2 <prvAddCurrentTaskToDelayedList+0xa6>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8004890:	4b0f      	ldr	r3, [pc, #60]	@ (80048d0 <prvAddCurrentTaskToDelayedList+0xc4>)
 8004892:	681a      	ldr	r2, [r3, #0]
 8004894:	4b0a      	ldr	r3, [pc, #40]	@ (80048c0 <prvAddCurrentTaskToDelayedList+0xb4>)
 8004896:	681b      	ldr	r3, [r3, #0]
 8004898:	3304      	adds	r3, #4
 800489a:	4619      	mov	r1, r3
 800489c:	4610      	mov	r0, r2
 800489e:	f7fe fb31 	bl	8002f04 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 80048a2:	4b0c      	ldr	r3, [pc, #48]	@ (80048d4 <prvAddCurrentTaskToDelayedList+0xc8>)
 80048a4:	681b      	ldr	r3, [r3, #0]
 80048a6:	68ba      	ldr	r2, [r7, #8]
 80048a8:	429a      	cmp	r2, r3
 80048aa:	d202      	bcs.n	80048b2 <prvAddCurrentTaskToDelayedList+0xa6>
					xNextTaskUnblockTime = xTimeToWake;
 80048ac:	4a09      	ldr	r2, [pc, #36]	@ (80048d4 <prvAddCurrentTaskToDelayedList+0xc8>)
 80048ae:	68bb      	ldr	r3, [r7, #8]
 80048b0:	6013      	str	r3, [r2, #0]
}
 80048b2:	bf00      	nop
 80048b4:	3710      	adds	r7, #16
 80048b6:	46bd      	mov	sp, r7
 80048b8:	bd80      	pop	{r7, pc}
 80048ba:	bf00      	nop
 80048bc:	20000a04 	.word	0x20000a04
 80048c0:	20000900 	.word	0x20000900
 80048c4:	20000a08 	.word	0x20000a08
 80048c8:	200009ec 	.word	0x200009ec
 80048cc:	200009bc 	.word	0x200009bc
 80048d0:	200009b8 	.word	0x200009b8
 80048d4:	20000a20 	.word	0x20000a20

080048d8 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 80048d8:	b580      	push	{r7, lr}
 80048da:	b08a      	sub	sp, #40	@ 0x28
 80048dc:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 80048de:	2300      	movs	r3, #0
 80048e0:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 80048e2:	f000 faf7 	bl	8004ed4 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 80048e6:	4b1d      	ldr	r3, [pc, #116]	@ (800495c <xTimerCreateTimerTask+0x84>)
 80048e8:	681b      	ldr	r3, [r3, #0]
 80048ea:	2b00      	cmp	r3, #0
 80048ec:	d021      	beq.n	8004932 <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 80048ee:	2300      	movs	r3, #0
 80048f0:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 80048f2:	2300      	movs	r3, #0
 80048f4:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 80048f6:	1d3a      	adds	r2, r7, #4
 80048f8:	f107 0108 	add.w	r1, r7, #8
 80048fc:	f107 030c 	add.w	r3, r7, #12
 8004900:	4618      	mov	r0, r3
 8004902:	f7fb fe8d 	bl	8000620 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 8004906:	6879      	ldr	r1, [r7, #4]
 8004908:	68bb      	ldr	r3, [r7, #8]
 800490a:	68fa      	ldr	r2, [r7, #12]
 800490c:	9202      	str	r2, [sp, #8]
 800490e:	9301      	str	r3, [sp, #4]
 8004910:	2302      	movs	r3, #2
 8004912:	9300      	str	r3, [sp, #0]
 8004914:	2300      	movs	r3, #0
 8004916:	460a      	mov	r2, r1
 8004918:	4911      	ldr	r1, [pc, #68]	@ (8004960 <xTimerCreateTimerTask+0x88>)
 800491a:	4812      	ldr	r0, [pc, #72]	@ (8004964 <xTimerCreateTimerTask+0x8c>)
 800491c:	f7ff f888 	bl	8003a30 <xTaskCreateStatic>
 8004920:	4603      	mov	r3, r0
 8004922:	4a11      	ldr	r2, [pc, #68]	@ (8004968 <xTimerCreateTimerTask+0x90>)
 8004924:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 8004926:	4b10      	ldr	r3, [pc, #64]	@ (8004968 <xTimerCreateTimerTask+0x90>)
 8004928:	681b      	ldr	r3, [r3, #0]
 800492a:	2b00      	cmp	r3, #0
 800492c:	d001      	beq.n	8004932 <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 800492e:	2301      	movs	r3, #1
 8004930:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 8004932:	697b      	ldr	r3, [r7, #20]
 8004934:	2b00      	cmp	r3, #0
 8004936:	d10b      	bne.n	8004950 <xTimerCreateTimerTask+0x78>
	__asm volatile
 8004938:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800493c:	f383 8811 	msr	BASEPRI, r3
 8004940:	f3bf 8f6f 	isb	sy
 8004944:	f3bf 8f4f 	dsb	sy
 8004948:	613b      	str	r3, [r7, #16]
}
 800494a:	bf00      	nop
 800494c:	bf00      	nop
 800494e:	e7fd      	b.n	800494c <xTimerCreateTimerTask+0x74>
	return xReturn;
 8004950:	697b      	ldr	r3, [r7, #20]
}
 8004952:	4618      	mov	r0, r3
 8004954:	3718      	adds	r7, #24
 8004956:	46bd      	mov	sp, r7
 8004958:	bd80      	pop	{r7, pc}
 800495a:	bf00      	nop
 800495c:	20000a5c 	.word	0x20000a5c
 8004960:	08007ab4 	.word	0x08007ab4
 8004964:	08004aa5 	.word	0x08004aa5
 8004968:	20000a60 	.word	0x20000a60

0800496c <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 800496c:	b580      	push	{r7, lr}
 800496e:	b08a      	sub	sp, #40	@ 0x28
 8004970:	af00      	add	r7, sp, #0
 8004972:	60f8      	str	r0, [r7, #12]
 8004974:	60b9      	str	r1, [r7, #8]
 8004976:	607a      	str	r2, [r7, #4]
 8004978:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 800497a:	2300      	movs	r3, #0
 800497c:	627b      	str	r3, [r7, #36]	@ 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 800497e:	68fb      	ldr	r3, [r7, #12]
 8004980:	2b00      	cmp	r3, #0
 8004982:	d10b      	bne.n	800499c <xTimerGenericCommand+0x30>
	__asm volatile
 8004984:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004988:	f383 8811 	msr	BASEPRI, r3
 800498c:	f3bf 8f6f 	isb	sy
 8004990:	f3bf 8f4f 	dsb	sy
 8004994:	623b      	str	r3, [r7, #32]
}
 8004996:	bf00      	nop
 8004998:	bf00      	nop
 800499a:	e7fd      	b.n	8004998 <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 800499c:	4b19      	ldr	r3, [pc, #100]	@ (8004a04 <xTimerGenericCommand+0x98>)
 800499e:	681b      	ldr	r3, [r3, #0]
 80049a0:	2b00      	cmp	r3, #0
 80049a2:	d02a      	beq.n	80049fa <xTimerGenericCommand+0x8e>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 80049a4:	68bb      	ldr	r3, [r7, #8]
 80049a6:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 80049a8:	687b      	ldr	r3, [r7, #4]
 80049aa:	61bb      	str	r3, [r7, #24]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 80049ac:	68fb      	ldr	r3, [r7, #12]
 80049ae:	61fb      	str	r3, [r7, #28]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 80049b0:	68bb      	ldr	r3, [r7, #8]
 80049b2:	2b05      	cmp	r3, #5
 80049b4:	dc18      	bgt.n	80049e8 <xTimerGenericCommand+0x7c>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 80049b6:	f7ff fe83 	bl	80046c0 <xTaskGetSchedulerState>
 80049ba:	4603      	mov	r3, r0
 80049bc:	2b02      	cmp	r3, #2
 80049be:	d109      	bne.n	80049d4 <xTimerGenericCommand+0x68>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 80049c0:	4b10      	ldr	r3, [pc, #64]	@ (8004a04 <xTimerGenericCommand+0x98>)
 80049c2:	6818      	ldr	r0, [r3, #0]
 80049c4:	f107 0114 	add.w	r1, r7, #20
 80049c8:	2300      	movs	r3, #0
 80049ca:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80049cc:	f7fe fc40 	bl	8003250 <xQueueGenericSend>
 80049d0:	6278      	str	r0, [r7, #36]	@ 0x24
 80049d2:	e012      	b.n	80049fa <xTimerGenericCommand+0x8e>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 80049d4:	4b0b      	ldr	r3, [pc, #44]	@ (8004a04 <xTimerGenericCommand+0x98>)
 80049d6:	6818      	ldr	r0, [r3, #0]
 80049d8:	f107 0114 	add.w	r1, r7, #20
 80049dc:	2300      	movs	r3, #0
 80049de:	2200      	movs	r2, #0
 80049e0:	f7fe fc36 	bl	8003250 <xQueueGenericSend>
 80049e4:	6278      	str	r0, [r7, #36]	@ 0x24
 80049e6:	e008      	b.n	80049fa <xTimerGenericCommand+0x8e>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 80049e8:	4b06      	ldr	r3, [pc, #24]	@ (8004a04 <xTimerGenericCommand+0x98>)
 80049ea:	6818      	ldr	r0, [r3, #0]
 80049ec:	f107 0114 	add.w	r1, r7, #20
 80049f0:	2300      	movs	r3, #0
 80049f2:	683a      	ldr	r2, [r7, #0]
 80049f4:	f7fe fd2e 	bl	8003454 <xQueueGenericSendFromISR>
 80049f8:	6278      	str	r0, [r7, #36]	@ 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 80049fa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 80049fc:	4618      	mov	r0, r3
 80049fe:	3728      	adds	r7, #40	@ 0x28
 8004a00:	46bd      	mov	sp, r7
 8004a02:	bd80      	pop	{r7, pc}
 8004a04:	20000a5c 	.word	0x20000a5c

08004a08 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 8004a08:	b580      	push	{r7, lr}
 8004a0a:	b088      	sub	sp, #32
 8004a0c:	af02      	add	r7, sp, #8
 8004a0e:	6078      	str	r0, [r7, #4]
 8004a10:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8004a12:	4b23      	ldr	r3, [pc, #140]	@ (8004aa0 <prvProcessExpiredTimer+0x98>)
 8004a14:	681b      	ldr	r3, [r3, #0]
 8004a16:	68db      	ldr	r3, [r3, #12]
 8004a18:	68db      	ldr	r3, [r3, #12]
 8004a1a:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8004a1c:	697b      	ldr	r3, [r7, #20]
 8004a1e:	3304      	adds	r3, #4
 8004a20:	4618      	mov	r0, r3
 8004a22:	f7fe faa8 	bl	8002f76 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8004a26:	697b      	ldr	r3, [r7, #20]
 8004a28:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8004a2c:	f003 0304 	and.w	r3, r3, #4
 8004a30:	2b00      	cmp	r3, #0
 8004a32:	d023      	beq.n	8004a7c <prvProcessExpiredTimer+0x74>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 8004a34:	697b      	ldr	r3, [r7, #20]
 8004a36:	699a      	ldr	r2, [r3, #24]
 8004a38:	687b      	ldr	r3, [r7, #4]
 8004a3a:	18d1      	adds	r1, r2, r3
 8004a3c:	687b      	ldr	r3, [r7, #4]
 8004a3e:	683a      	ldr	r2, [r7, #0]
 8004a40:	6978      	ldr	r0, [r7, #20]
 8004a42:	f000 f8d5 	bl	8004bf0 <prvInsertTimerInActiveList>
 8004a46:	4603      	mov	r3, r0
 8004a48:	2b00      	cmp	r3, #0
 8004a4a:	d020      	beq.n	8004a8e <prvProcessExpiredTimer+0x86>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8004a4c:	2300      	movs	r3, #0
 8004a4e:	9300      	str	r3, [sp, #0]
 8004a50:	2300      	movs	r3, #0
 8004a52:	687a      	ldr	r2, [r7, #4]
 8004a54:	2100      	movs	r1, #0
 8004a56:	6978      	ldr	r0, [r7, #20]
 8004a58:	f7ff ff88 	bl	800496c <xTimerGenericCommand>
 8004a5c:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 8004a5e:	693b      	ldr	r3, [r7, #16]
 8004a60:	2b00      	cmp	r3, #0
 8004a62:	d114      	bne.n	8004a8e <prvProcessExpiredTimer+0x86>
	__asm volatile
 8004a64:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004a68:	f383 8811 	msr	BASEPRI, r3
 8004a6c:	f3bf 8f6f 	isb	sy
 8004a70:	f3bf 8f4f 	dsb	sy
 8004a74:	60fb      	str	r3, [r7, #12]
}
 8004a76:	bf00      	nop
 8004a78:	bf00      	nop
 8004a7a:	e7fd      	b.n	8004a78 <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8004a7c:	697b      	ldr	r3, [r7, #20]
 8004a7e:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8004a82:	f023 0301 	bic.w	r3, r3, #1
 8004a86:	b2da      	uxtb	r2, r3
 8004a88:	697b      	ldr	r3, [r7, #20]
 8004a8a:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8004a8e:	697b      	ldr	r3, [r7, #20]
 8004a90:	6a1b      	ldr	r3, [r3, #32]
 8004a92:	6978      	ldr	r0, [r7, #20]
 8004a94:	4798      	blx	r3
}
 8004a96:	bf00      	nop
 8004a98:	3718      	adds	r7, #24
 8004a9a:	46bd      	mov	sp, r7
 8004a9c:	bd80      	pop	{r7, pc}
 8004a9e:	bf00      	nop
 8004aa0:	20000a54 	.word	0x20000a54

08004aa4 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 8004aa4:	b580      	push	{r7, lr}
 8004aa6:	b084      	sub	sp, #16
 8004aa8:	af00      	add	r7, sp, #0
 8004aaa:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8004aac:	f107 0308 	add.w	r3, r7, #8
 8004ab0:	4618      	mov	r0, r3
 8004ab2:	f000 f859 	bl	8004b68 <prvGetNextExpireTime>
 8004ab6:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 8004ab8:	68bb      	ldr	r3, [r7, #8]
 8004aba:	4619      	mov	r1, r3
 8004abc:	68f8      	ldr	r0, [r7, #12]
 8004abe:	f000 f805 	bl	8004acc <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 8004ac2:	f000 f8d7 	bl	8004c74 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8004ac6:	bf00      	nop
 8004ac8:	e7f0      	b.n	8004aac <prvTimerTask+0x8>
	...

08004acc <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 8004acc:	b580      	push	{r7, lr}
 8004ace:	b084      	sub	sp, #16
 8004ad0:	af00      	add	r7, sp, #0
 8004ad2:	6078      	str	r0, [r7, #4]
 8004ad4:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 8004ad6:	f7ff fa01 	bl	8003edc <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8004ada:	f107 0308 	add.w	r3, r7, #8
 8004ade:	4618      	mov	r0, r3
 8004ae0:	f000 f866 	bl	8004bb0 <prvSampleTimeNow>
 8004ae4:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 8004ae6:	68bb      	ldr	r3, [r7, #8]
 8004ae8:	2b00      	cmp	r3, #0
 8004aea:	d130      	bne.n	8004b4e <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 8004aec:	683b      	ldr	r3, [r7, #0]
 8004aee:	2b00      	cmp	r3, #0
 8004af0:	d10a      	bne.n	8004b08 <prvProcessTimerOrBlockTask+0x3c>
 8004af2:	687a      	ldr	r2, [r7, #4]
 8004af4:	68fb      	ldr	r3, [r7, #12]
 8004af6:	429a      	cmp	r2, r3
 8004af8:	d806      	bhi.n	8004b08 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 8004afa:	f7ff f9fd 	bl	8003ef8 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 8004afe:	68f9      	ldr	r1, [r7, #12]
 8004b00:	6878      	ldr	r0, [r7, #4]
 8004b02:	f7ff ff81 	bl	8004a08 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 8004b06:	e024      	b.n	8004b52 <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 8004b08:	683b      	ldr	r3, [r7, #0]
 8004b0a:	2b00      	cmp	r3, #0
 8004b0c:	d008      	beq.n	8004b20 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 8004b0e:	4b13      	ldr	r3, [pc, #76]	@ (8004b5c <prvProcessTimerOrBlockTask+0x90>)
 8004b10:	681b      	ldr	r3, [r3, #0]
 8004b12:	681b      	ldr	r3, [r3, #0]
 8004b14:	2b00      	cmp	r3, #0
 8004b16:	d101      	bne.n	8004b1c <prvProcessTimerOrBlockTask+0x50>
 8004b18:	2301      	movs	r3, #1
 8004b1a:	e000      	b.n	8004b1e <prvProcessTimerOrBlockTask+0x52>
 8004b1c:	2300      	movs	r3, #0
 8004b1e:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 8004b20:	4b0f      	ldr	r3, [pc, #60]	@ (8004b60 <prvProcessTimerOrBlockTask+0x94>)
 8004b22:	6818      	ldr	r0, [r3, #0]
 8004b24:	687a      	ldr	r2, [r7, #4]
 8004b26:	68fb      	ldr	r3, [r7, #12]
 8004b28:	1ad3      	subs	r3, r2, r3
 8004b2a:	683a      	ldr	r2, [r7, #0]
 8004b2c:	4619      	mov	r1, r3
 8004b2e:	f7fe ff4b 	bl	80039c8 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 8004b32:	f7ff f9e1 	bl	8003ef8 <xTaskResumeAll>
 8004b36:	4603      	mov	r3, r0
 8004b38:	2b00      	cmp	r3, #0
 8004b3a:	d10a      	bne.n	8004b52 <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 8004b3c:	4b09      	ldr	r3, [pc, #36]	@ (8004b64 <prvProcessTimerOrBlockTask+0x98>)
 8004b3e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8004b42:	601a      	str	r2, [r3, #0]
 8004b44:	f3bf 8f4f 	dsb	sy
 8004b48:	f3bf 8f6f 	isb	sy
}
 8004b4c:	e001      	b.n	8004b52 <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 8004b4e:	f7ff f9d3 	bl	8003ef8 <xTaskResumeAll>
}
 8004b52:	bf00      	nop
 8004b54:	3710      	adds	r7, #16
 8004b56:	46bd      	mov	sp, r7
 8004b58:	bd80      	pop	{r7, pc}
 8004b5a:	bf00      	nop
 8004b5c:	20000a58 	.word	0x20000a58
 8004b60:	20000a5c 	.word	0x20000a5c
 8004b64:	e000ed04 	.word	0xe000ed04

08004b68 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 8004b68:	b480      	push	{r7}
 8004b6a:	b085      	sub	sp, #20
 8004b6c:	af00      	add	r7, sp, #0
 8004b6e:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8004b70:	4b0e      	ldr	r3, [pc, #56]	@ (8004bac <prvGetNextExpireTime+0x44>)
 8004b72:	681b      	ldr	r3, [r3, #0]
 8004b74:	681b      	ldr	r3, [r3, #0]
 8004b76:	2b00      	cmp	r3, #0
 8004b78:	d101      	bne.n	8004b7e <prvGetNextExpireTime+0x16>
 8004b7a:	2201      	movs	r2, #1
 8004b7c:	e000      	b.n	8004b80 <prvGetNextExpireTime+0x18>
 8004b7e:	2200      	movs	r2, #0
 8004b80:	687b      	ldr	r3, [r7, #4]
 8004b82:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 8004b84:	687b      	ldr	r3, [r7, #4]
 8004b86:	681b      	ldr	r3, [r3, #0]
 8004b88:	2b00      	cmp	r3, #0
 8004b8a:	d105      	bne.n	8004b98 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8004b8c:	4b07      	ldr	r3, [pc, #28]	@ (8004bac <prvGetNextExpireTime+0x44>)
 8004b8e:	681b      	ldr	r3, [r3, #0]
 8004b90:	68db      	ldr	r3, [r3, #12]
 8004b92:	681b      	ldr	r3, [r3, #0]
 8004b94:	60fb      	str	r3, [r7, #12]
 8004b96:	e001      	b.n	8004b9c <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 8004b98:	2300      	movs	r3, #0
 8004b9a:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 8004b9c:	68fb      	ldr	r3, [r7, #12]
}
 8004b9e:	4618      	mov	r0, r3
 8004ba0:	3714      	adds	r7, #20
 8004ba2:	46bd      	mov	sp, r7
 8004ba4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ba8:	4770      	bx	lr
 8004baa:	bf00      	nop
 8004bac:	20000a54 	.word	0x20000a54

08004bb0 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 8004bb0:	b580      	push	{r7, lr}
 8004bb2:	b084      	sub	sp, #16
 8004bb4:	af00      	add	r7, sp, #0
 8004bb6:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 8004bb8:	f7ff fa3c 	bl	8004034 <xTaskGetTickCount>
 8004bbc:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 8004bbe:	4b0b      	ldr	r3, [pc, #44]	@ (8004bec <prvSampleTimeNow+0x3c>)
 8004bc0:	681b      	ldr	r3, [r3, #0]
 8004bc2:	68fa      	ldr	r2, [r7, #12]
 8004bc4:	429a      	cmp	r2, r3
 8004bc6:	d205      	bcs.n	8004bd4 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 8004bc8:	f000 f91e 	bl	8004e08 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 8004bcc:	687b      	ldr	r3, [r7, #4]
 8004bce:	2201      	movs	r2, #1
 8004bd0:	601a      	str	r2, [r3, #0]
 8004bd2:	e002      	b.n	8004bda <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 8004bd4:	687b      	ldr	r3, [r7, #4]
 8004bd6:	2200      	movs	r2, #0
 8004bd8:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 8004bda:	4a04      	ldr	r2, [pc, #16]	@ (8004bec <prvSampleTimeNow+0x3c>)
 8004bdc:	68fb      	ldr	r3, [r7, #12]
 8004bde:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 8004be0:	68fb      	ldr	r3, [r7, #12]
}
 8004be2:	4618      	mov	r0, r3
 8004be4:	3710      	adds	r7, #16
 8004be6:	46bd      	mov	sp, r7
 8004be8:	bd80      	pop	{r7, pc}
 8004bea:	bf00      	nop
 8004bec:	20000a64 	.word	0x20000a64

08004bf0 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 8004bf0:	b580      	push	{r7, lr}
 8004bf2:	b086      	sub	sp, #24
 8004bf4:	af00      	add	r7, sp, #0
 8004bf6:	60f8      	str	r0, [r7, #12]
 8004bf8:	60b9      	str	r1, [r7, #8]
 8004bfa:	607a      	str	r2, [r7, #4]
 8004bfc:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 8004bfe:	2300      	movs	r3, #0
 8004c00:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 8004c02:	68fb      	ldr	r3, [r7, #12]
 8004c04:	68ba      	ldr	r2, [r7, #8]
 8004c06:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8004c08:	68fb      	ldr	r3, [r7, #12]
 8004c0a:	68fa      	ldr	r2, [r7, #12]
 8004c0c:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 8004c0e:	68ba      	ldr	r2, [r7, #8]
 8004c10:	687b      	ldr	r3, [r7, #4]
 8004c12:	429a      	cmp	r2, r3
 8004c14:	d812      	bhi.n	8004c3c <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8004c16:	687a      	ldr	r2, [r7, #4]
 8004c18:	683b      	ldr	r3, [r7, #0]
 8004c1a:	1ad2      	subs	r2, r2, r3
 8004c1c:	68fb      	ldr	r3, [r7, #12]
 8004c1e:	699b      	ldr	r3, [r3, #24]
 8004c20:	429a      	cmp	r2, r3
 8004c22:	d302      	bcc.n	8004c2a <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 8004c24:	2301      	movs	r3, #1
 8004c26:	617b      	str	r3, [r7, #20]
 8004c28:	e01b      	b.n	8004c62 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 8004c2a:	4b10      	ldr	r3, [pc, #64]	@ (8004c6c <prvInsertTimerInActiveList+0x7c>)
 8004c2c:	681a      	ldr	r2, [r3, #0]
 8004c2e:	68fb      	ldr	r3, [r7, #12]
 8004c30:	3304      	adds	r3, #4
 8004c32:	4619      	mov	r1, r3
 8004c34:	4610      	mov	r0, r2
 8004c36:	f7fe f965 	bl	8002f04 <vListInsert>
 8004c3a:	e012      	b.n	8004c62 <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 8004c3c:	687a      	ldr	r2, [r7, #4]
 8004c3e:	683b      	ldr	r3, [r7, #0]
 8004c40:	429a      	cmp	r2, r3
 8004c42:	d206      	bcs.n	8004c52 <prvInsertTimerInActiveList+0x62>
 8004c44:	68ba      	ldr	r2, [r7, #8]
 8004c46:	683b      	ldr	r3, [r7, #0]
 8004c48:	429a      	cmp	r2, r3
 8004c4a:	d302      	bcc.n	8004c52 <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 8004c4c:	2301      	movs	r3, #1
 8004c4e:	617b      	str	r3, [r7, #20]
 8004c50:	e007      	b.n	8004c62 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8004c52:	4b07      	ldr	r3, [pc, #28]	@ (8004c70 <prvInsertTimerInActiveList+0x80>)
 8004c54:	681a      	ldr	r2, [r3, #0]
 8004c56:	68fb      	ldr	r3, [r7, #12]
 8004c58:	3304      	adds	r3, #4
 8004c5a:	4619      	mov	r1, r3
 8004c5c:	4610      	mov	r0, r2
 8004c5e:	f7fe f951 	bl	8002f04 <vListInsert>
		}
	}

	return xProcessTimerNow;
 8004c62:	697b      	ldr	r3, [r7, #20]
}
 8004c64:	4618      	mov	r0, r3
 8004c66:	3718      	adds	r7, #24
 8004c68:	46bd      	mov	sp, r7
 8004c6a:	bd80      	pop	{r7, pc}
 8004c6c:	20000a58 	.word	0x20000a58
 8004c70:	20000a54 	.word	0x20000a54

08004c74 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 8004c74:	b580      	push	{r7, lr}
 8004c76:	b08c      	sub	sp, #48	@ 0x30
 8004c78:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8004c7a:	e0b2      	b.n	8004de2 <prvProcessReceivedCommands+0x16e>
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 8004c7c:	68bb      	ldr	r3, [r7, #8]
 8004c7e:	2b00      	cmp	r3, #0
 8004c80:	f2c0 80af 	blt.w	8004de2 <prvProcessReceivedCommands+0x16e>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 8004c84:	693b      	ldr	r3, [r7, #16]
 8004c86:	627b      	str	r3, [r7, #36]	@ 0x24

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 8004c88:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004c8a:	695b      	ldr	r3, [r3, #20]
 8004c8c:	2b00      	cmp	r3, #0
 8004c8e:	d004      	beq.n	8004c9a <prvProcessReceivedCommands+0x26>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8004c90:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004c92:	3304      	adds	r3, #4
 8004c94:	4618      	mov	r0, r3
 8004c96:	f7fe f96e 	bl	8002f76 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8004c9a:	1d3b      	adds	r3, r7, #4
 8004c9c:	4618      	mov	r0, r3
 8004c9e:	f7ff ff87 	bl	8004bb0 <prvSampleTimeNow>
 8004ca2:	6238      	str	r0, [r7, #32]

			switch( xMessage.xMessageID )
 8004ca4:	68bb      	ldr	r3, [r7, #8]
 8004ca6:	2b09      	cmp	r3, #9
 8004ca8:	f200 8098 	bhi.w	8004ddc <prvProcessReceivedCommands+0x168>
 8004cac:	a201      	add	r2, pc, #4	@ (adr r2, 8004cb4 <prvProcessReceivedCommands+0x40>)
 8004cae:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004cb2:	bf00      	nop
 8004cb4:	08004cdd 	.word	0x08004cdd
 8004cb8:	08004cdd 	.word	0x08004cdd
 8004cbc:	08004cdd 	.word	0x08004cdd
 8004cc0:	08004d53 	.word	0x08004d53
 8004cc4:	08004d67 	.word	0x08004d67
 8004cc8:	08004db3 	.word	0x08004db3
 8004ccc:	08004cdd 	.word	0x08004cdd
 8004cd0:	08004cdd 	.word	0x08004cdd
 8004cd4:	08004d53 	.word	0x08004d53
 8004cd8:	08004d67 	.word	0x08004d67
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8004cdc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004cde:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8004ce2:	f043 0301 	orr.w	r3, r3, #1
 8004ce6:	b2da      	uxtb	r2, r3
 8004ce8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004cea:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 8004cee:	68fa      	ldr	r2, [r7, #12]
 8004cf0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004cf2:	699b      	ldr	r3, [r3, #24]
 8004cf4:	18d1      	adds	r1, r2, r3
 8004cf6:	68fb      	ldr	r3, [r7, #12]
 8004cf8:	6a3a      	ldr	r2, [r7, #32]
 8004cfa:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8004cfc:	f7ff ff78 	bl	8004bf0 <prvInsertTimerInActiveList>
 8004d00:	4603      	mov	r3, r0
 8004d02:	2b00      	cmp	r3, #0
 8004d04:	d06c      	beq.n	8004de0 <prvProcessReceivedCommands+0x16c>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8004d06:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004d08:	6a1b      	ldr	r3, [r3, #32]
 8004d0a:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8004d0c:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8004d0e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004d10:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8004d14:	f003 0304 	and.w	r3, r3, #4
 8004d18:	2b00      	cmp	r3, #0
 8004d1a:	d061      	beq.n	8004de0 <prvProcessReceivedCommands+0x16c>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 8004d1c:	68fa      	ldr	r2, [r7, #12]
 8004d1e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004d20:	699b      	ldr	r3, [r3, #24]
 8004d22:	441a      	add	r2, r3
 8004d24:	2300      	movs	r3, #0
 8004d26:	9300      	str	r3, [sp, #0]
 8004d28:	2300      	movs	r3, #0
 8004d2a:	2100      	movs	r1, #0
 8004d2c:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8004d2e:	f7ff fe1d 	bl	800496c <xTimerGenericCommand>
 8004d32:	61f8      	str	r0, [r7, #28]
							configASSERT( xResult );
 8004d34:	69fb      	ldr	r3, [r7, #28]
 8004d36:	2b00      	cmp	r3, #0
 8004d38:	d152      	bne.n	8004de0 <prvProcessReceivedCommands+0x16c>
	__asm volatile
 8004d3a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004d3e:	f383 8811 	msr	BASEPRI, r3
 8004d42:	f3bf 8f6f 	isb	sy
 8004d46:	f3bf 8f4f 	dsb	sy
 8004d4a:	61bb      	str	r3, [r7, #24]
}
 8004d4c:	bf00      	nop
 8004d4e:	bf00      	nop
 8004d50:	e7fd      	b.n	8004d4e <prvProcessReceivedCommands+0xda>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8004d52:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004d54:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8004d58:	f023 0301 	bic.w	r3, r3, #1
 8004d5c:	b2da      	uxtb	r2, r3
 8004d5e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004d60:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
					break;
 8004d64:	e03d      	b.n	8004de2 <prvProcessReceivedCommands+0x16e>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8004d66:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004d68:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8004d6c:	f043 0301 	orr.w	r3, r3, #1
 8004d70:	b2da      	uxtb	r2, r3
 8004d72:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004d74:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 8004d78:	68fa      	ldr	r2, [r7, #12]
 8004d7a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004d7c:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 8004d7e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004d80:	699b      	ldr	r3, [r3, #24]
 8004d82:	2b00      	cmp	r3, #0
 8004d84:	d10b      	bne.n	8004d9e <prvProcessReceivedCommands+0x12a>
	__asm volatile
 8004d86:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004d8a:	f383 8811 	msr	BASEPRI, r3
 8004d8e:	f3bf 8f6f 	isb	sy
 8004d92:	f3bf 8f4f 	dsb	sy
 8004d96:	617b      	str	r3, [r7, #20]
}
 8004d98:	bf00      	nop
 8004d9a:	bf00      	nop
 8004d9c:	e7fd      	b.n	8004d9a <prvProcessReceivedCommands+0x126>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 8004d9e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004da0:	699a      	ldr	r2, [r3, #24]
 8004da2:	6a3b      	ldr	r3, [r7, #32]
 8004da4:	18d1      	adds	r1, r2, r3
 8004da6:	6a3b      	ldr	r3, [r7, #32]
 8004da8:	6a3a      	ldr	r2, [r7, #32]
 8004daa:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8004dac:	f7ff ff20 	bl	8004bf0 <prvInsertTimerInActiveList>
					break;
 8004db0:	e017      	b.n	8004de2 <prvProcessReceivedCommands+0x16e>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 8004db2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004db4:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8004db8:	f003 0302 	and.w	r3, r3, #2
 8004dbc:	2b00      	cmp	r3, #0
 8004dbe:	d103      	bne.n	8004dc8 <prvProcessReceivedCommands+0x154>
						{
							vPortFree( pxTimer );
 8004dc0:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8004dc2:	f000 fbe9 	bl	8005598 <vPortFree>
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 8004dc6:	e00c      	b.n	8004de2 <prvProcessReceivedCommands+0x16e>
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8004dc8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004dca:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8004dce:	f023 0301 	bic.w	r3, r3, #1
 8004dd2:	b2da      	uxtb	r2, r3
 8004dd4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004dd6:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
					break;
 8004dda:	e002      	b.n	8004de2 <prvProcessReceivedCommands+0x16e>

				default	:
					/* Don't expect to get here. */
					break;
 8004ddc:	bf00      	nop
 8004dde:	e000      	b.n	8004de2 <prvProcessReceivedCommands+0x16e>
					break;
 8004de0:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8004de2:	4b08      	ldr	r3, [pc, #32]	@ (8004e04 <prvProcessReceivedCommands+0x190>)
 8004de4:	681b      	ldr	r3, [r3, #0]
 8004de6:	f107 0108 	add.w	r1, r7, #8
 8004dea:	2200      	movs	r2, #0
 8004dec:	4618      	mov	r0, r3
 8004dee:	f7fe fbcf 	bl	8003590 <xQueueReceive>
 8004df2:	4603      	mov	r3, r0
 8004df4:	2b00      	cmp	r3, #0
 8004df6:	f47f af41 	bne.w	8004c7c <prvProcessReceivedCommands+0x8>
			}
		}
	}
}
 8004dfa:	bf00      	nop
 8004dfc:	bf00      	nop
 8004dfe:	3728      	adds	r7, #40	@ 0x28
 8004e00:	46bd      	mov	sp, r7
 8004e02:	bd80      	pop	{r7, pc}
 8004e04:	20000a5c 	.word	0x20000a5c

08004e08 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 8004e08:	b580      	push	{r7, lr}
 8004e0a:	b088      	sub	sp, #32
 8004e0c:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8004e0e:	e049      	b.n	8004ea4 <prvSwitchTimerLists+0x9c>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8004e10:	4b2e      	ldr	r3, [pc, #184]	@ (8004ecc <prvSwitchTimerLists+0xc4>)
 8004e12:	681b      	ldr	r3, [r3, #0]
 8004e14:	68db      	ldr	r3, [r3, #12]
 8004e16:	681b      	ldr	r3, [r3, #0]
 8004e18:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8004e1a:	4b2c      	ldr	r3, [pc, #176]	@ (8004ecc <prvSwitchTimerLists+0xc4>)
 8004e1c:	681b      	ldr	r3, [r3, #0]
 8004e1e:	68db      	ldr	r3, [r3, #12]
 8004e20:	68db      	ldr	r3, [r3, #12]
 8004e22:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8004e24:	68fb      	ldr	r3, [r7, #12]
 8004e26:	3304      	adds	r3, #4
 8004e28:	4618      	mov	r0, r3
 8004e2a:	f7fe f8a4 	bl	8002f76 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8004e2e:	68fb      	ldr	r3, [r7, #12]
 8004e30:	6a1b      	ldr	r3, [r3, #32]
 8004e32:	68f8      	ldr	r0, [r7, #12]
 8004e34:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8004e36:	68fb      	ldr	r3, [r7, #12]
 8004e38:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8004e3c:	f003 0304 	and.w	r3, r3, #4
 8004e40:	2b00      	cmp	r3, #0
 8004e42:	d02f      	beq.n	8004ea4 <prvSwitchTimerLists+0x9c>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 8004e44:	68fb      	ldr	r3, [r7, #12]
 8004e46:	699b      	ldr	r3, [r3, #24]
 8004e48:	693a      	ldr	r2, [r7, #16]
 8004e4a:	4413      	add	r3, r2
 8004e4c:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 8004e4e:	68ba      	ldr	r2, [r7, #8]
 8004e50:	693b      	ldr	r3, [r7, #16]
 8004e52:	429a      	cmp	r2, r3
 8004e54:	d90e      	bls.n	8004e74 <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 8004e56:	68fb      	ldr	r3, [r7, #12]
 8004e58:	68ba      	ldr	r2, [r7, #8]
 8004e5a:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8004e5c:	68fb      	ldr	r3, [r7, #12]
 8004e5e:	68fa      	ldr	r2, [r7, #12]
 8004e60:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8004e62:	4b1a      	ldr	r3, [pc, #104]	@ (8004ecc <prvSwitchTimerLists+0xc4>)
 8004e64:	681a      	ldr	r2, [r3, #0]
 8004e66:	68fb      	ldr	r3, [r7, #12]
 8004e68:	3304      	adds	r3, #4
 8004e6a:	4619      	mov	r1, r3
 8004e6c:	4610      	mov	r0, r2
 8004e6e:	f7fe f849 	bl	8002f04 <vListInsert>
 8004e72:	e017      	b.n	8004ea4 <prvSwitchTimerLists+0x9c>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8004e74:	2300      	movs	r3, #0
 8004e76:	9300      	str	r3, [sp, #0]
 8004e78:	2300      	movs	r3, #0
 8004e7a:	693a      	ldr	r2, [r7, #16]
 8004e7c:	2100      	movs	r1, #0
 8004e7e:	68f8      	ldr	r0, [r7, #12]
 8004e80:	f7ff fd74 	bl	800496c <xTimerGenericCommand>
 8004e84:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 8004e86:	687b      	ldr	r3, [r7, #4]
 8004e88:	2b00      	cmp	r3, #0
 8004e8a:	d10b      	bne.n	8004ea4 <prvSwitchTimerLists+0x9c>
	__asm volatile
 8004e8c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004e90:	f383 8811 	msr	BASEPRI, r3
 8004e94:	f3bf 8f6f 	isb	sy
 8004e98:	f3bf 8f4f 	dsb	sy
 8004e9c:	603b      	str	r3, [r7, #0]
}
 8004e9e:	bf00      	nop
 8004ea0:	bf00      	nop
 8004ea2:	e7fd      	b.n	8004ea0 <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8004ea4:	4b09      	ldr	r3, [pc, #36]	@ (8004ecc <prvSwitchTimerLists+0xc4>)
 8004ea6:	681b      	ldr	r3, [r3, #0]
 8004ea8:	681b      	ldr	r3, [r3, #0]
 8004eaa:	2b00      	cmp	r3, #0
 8004eac:	d1b0      	bne.n	8004e10 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 8004eae:	4b07      	ldr	r3, [pc, #28]	@ (8004ecc <prvSwitchTimerLists+0xc4>)
 8004eb0:	681b      	ldr	r3, [r3, #0]
 8004eb2:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 8004eb4:	4b06      	ldr	r3, [pc, #24]	@ (8004ed0 <prvSwitchTimerLists+0xc8>)
 8004eb6:	681b      	ldr	r3, [r3, #0]
 8004eb8:	4a04      	ldr	r2, [pc, #16]	@ (8004ecc <prvSwitchTimerLists+0xc4>)
 8004eba:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 8004ebc:	4a04      	ldr	r2, [pc, #16]	@ (8004ed0 <prvSwitchTimerLists+0xc8>)
 8004ebe:	697b      	ldr	r3, [r7, #20]
 8004ec0:	6013      	str	r3, [r2, #0]
}
 8004ec2:	bf00      	nop
 8004ec4:	3718      	adds	r7, #24
 8004ec6:	46bd      	mov	sp, r7
 8004ec8:	bd80      	pop	{r7, pc}
 8004eca:	bf00      	nop
 8004ecc:	20000a54 	.word	0x20000a54
 8004ed0:	20000a58 	.word	0x20000a58

08004ed4 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 8004ed4:	b580      	push	{r7, lr}
 8004ed6:	b082      	sub	sp, #8
 8004ed8:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 8004eda:	f000 f96d 	bl	80051b8 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 8004ede:	4b15      	ldr	r3, [pc, #84]	@ (8004f34 <prvCheckForValidListAndQueue+0x60>)
 8004ee0:	681b      	ldr	r3, [r3, #0]
 8004ee2:	2b00      	cmp	r3, #0
 8004ee4:	d120      	bne.n	8004f28 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 8004ee6:	4814      	ldr	r0, [pc, #80]	@ (8004f38 <prvCheckForValidListAndQueue+0x64>)
 8004ee8:	f7fd ffbb 	bl	8002e62 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 8004eec:	4813      	ldr	r0, [pc, #76]	@ (8004f3c <prvCheckForValidListAndQueue+0x68>)
 8004eee:	f7fd ffb8 	bl	8002e62 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 8004ef2:	4b13      	ldr	r3, [pc, #76]	@ (8004f40 <prvCheckForValidListAndQueue+0x6c>)
 8004ef4:	4a10      	ldr	r2, [pc, #64]	@ (8004f38 <prvCheckForValidListAndQueue+0x64>)
 8004ef6:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 8004ef8:	4b12      	ldr	r3, [pc, #72]	@ (8004f44 <prvCheckForValidListAndQueue+0x70>)
 8004efa:	4a10      	ldr	r2, [pc, #64]	@ (8004f3c <prvCheckForValidListAndQueue+0x68>)
 8004efc:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 8004efe:	2300      	movs	r3, #0
 8004f00:	9300      	str	r3, [sp, #0]
 8004f02:	4b11      	ldr	r3, [pc, #68]	@ (8004f48 <prvCheckForValidListAndQueue+0x74>)
 8004f04:	4a11      	ldr	r2, [pc, #68]	@ (8004f4c <prvCheckForValidListAndQueue+0x78>)
 8004f06:	210c      	movs	r1, #12
 8004f08:	200a      	movs	r0, #10
 8004f0a:	f7fe f8c9 	bl	80030a0 <xQueueGenericCreateStatic>
 8004f0e:	4603      	mov	r3, r0
 8004f10:	4a08      	ldr	r2, [pc, #32]	@ (8004f34 <prvCheckForValidListAndQueue+0x60>)
 8004f12:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 8004f14:	4b07      	ldr	r3, [pc, #28]	@ (8004f34 <prvCheckForValidListAndQueue+0x60>)
 8004f16:	681b      	ldr	r3, [r3, #0]
 8004f18:	2b00      	cmp	r3, #0
 8004f1a:	d005      	beq.n	8004f28 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 8004f1c:	4b05      	ldr	r3, [pc, #20]	@ (8004f34 <prvCheckForValidListAndQueue+0x60>)
 8004f1e:	681b      	ldr	r3, [r3, #0]
 8004f20:	490b      	ldr	r1, [pc, #44]	@ (8004f50 <prvCheckForValidListAndQueue+0x7c>)
 8004f22:	4618      	mov	r0, r3
 8004f24:	f7fe fd26 	bl	8003974 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8004f28:	f000 f978 	bl	800521c <vPortExitCritical>
}
 8004f2c:	bf00      	nop
 8004f2e:	46bd      	mov	sp, r7
 8004f30:	bd80      	pop	{r7, pc}
 8004f32:	bf00      	nop
 8004f34:	20000a5c 	.word	0x20000a5c
 8004f38:	20000a2c 	.word	0x20000a2c
 8004f3c:	20000a40 	.word	0x20000a40
 8004f40:	20000a54 	.word	0x20000a54
 8004f44:	20000a58 	.word	0x20000a58
 8004f48:	20000ae0 	.word	0x20000ae0
 8004f4c:	20000a68 	.word	0x20000a68
 8004f50:	08007abc 	.word	0x08007abc

08004f54 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8004f54:	b480      	push	{r7}
 8004f56:	b085      	sub	sp, #20
 8004f58:	af00      	add	r7, sp, #0
 8004f5a:	60f8      	str	r0, [r7, #12]
 8004f5c:	60b9      	str	r1, [r7, #8]
 8004f5e:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 8004f60:	68fb      	ldr	r3, [r7, #12]
 8004f62:	3b04      	subs	r3, #4
 8004f64:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8004f66:	68fb      	ldr	r3, [r7, #12]
 8004f68:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8004f6c:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8004f6e:	68fb      	ldr	r3, [r7, #12]
 8004f70:	3b04      	subs	r3, #4
 8004f72:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8004f74:	68bb      	ldr	r3, [r7, #8]
 8004f76:	f023 0201 	bic.w	r2, r3, #1
 8004f7a:	68fb      	ldr	r3, [r7, #12]
 8004f7c:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8004f7e:	68fb      	ldr	r3, [r7, #12]
 8004f80:	3b04      	subs	r3, #4
 8004f82:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8004f84:	4a0c      	ldr	r2, [pc, #48]	@ (8004fb8 <pxPortInitialiseStack+0x64>)
 8004f86:	68fb      	ldr	r3, [r7, #12]
 8004f88:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8004f8a:	68fb      	ldr	r3, [r7, #12]
 8004f8c:	3b14      	subs	r3, #20
 8004f8e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8004f90:	687a      	ldr	r2, [r7, #4]
 8004f92:	68fb      	ldr	r3, [r7, #12]
 8004f94:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 8004f96:	68fb      	ldr	r3, [r7, #12]
 8004f98:	3b04      	subs	r3, #4
 8004f9a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8004f9c:	68fb      	ldr	r3, [r7, #12]
 8004f9e:	f06f 0202 	mvn.w	r2, #2
 8004fa2:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8004fa4:	68fb      	ldr	r3, [r7, #12]
 8004fa6:	3b20      	subs	r3, #32
 8004fa8:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8004faa:	68fb      	ldr	r3, [r7, #12]
}
 8004fac:	4618      	mov	r0, r3
 8004fae:	3714      	adds	r7, #20
 8004fb0:	46bd      	mov	sp, r7
 8004fb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fb6:	4770      	bx	lr
 8004fb8:	08004fbd 	.word	0x08004fbd

08004fbc <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8004fbc:	b480      	push	{r7}
 8004fbe:	b085      	sub	sp, #20
 8004fc0:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 8004fc2:	2300      	movs	r3, #0
 8004fc4:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8004fc6:	4b13      	ldr	r3, [pc, #76]	@ (8005014 <prvTaskExitError+0x58>)
 8004fc8:	681b      	ldr	r3, [r3, #0]
 8004fca:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004fce:	d00b      	beq.n	8004fe8 <prvTaskExitError+0x2c>
	__asm volatile
 8004fd0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004fd4:	f383 8811 	msr	BASEPRI, r3
 8004fd8:	f3bf 8f6f 	isb	sy
 8004fdc:	f3bf 8f4f 	dsb	sy
 8004fe0:	60fb      	str	r3, [r7, #12]
}
 8004fe2:	bf00      	nop
 8004fe4:	bf00      	nop
 8004fe6:	e7fd      	b.n	8004fe4 <prvTaskExitError+0x28>
	__asm volatile
 8004fe8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004fec:	f383 8811 	msr	BASEPRI, r3
 8004ff0:	f3bf 8f6f 	isb	sy
 8004ff4:	f3bf 8f4f 	dsb	sy
 8004ff8:	60bb      	str	r3, [r7, #8]
}
 8004ffa:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8004ffc:	bf00      	nop
 8004ffe:	687b      	ldr	r3, [r7, #4]
 8005000:	2b00      	cmp	r3, #0
 8005002:	d0fc      	beq.n	8004ffe <prvTaskExitError+0x42>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8005004:	bf00      	nop
 8005006:	bf00      	nop
 8005008:	3714      	adds	r7, #20
 800500a:	46bd      	mov	sp, r7
 800500c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005010:	4770      	bx	lr
 8005012:	bf00      	nop
 8005014:	2000000c 	.word	0x2000000c
	...

08005020 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8005020:	4b07      	ldr	r3, [pc, #28]	@ (8005040 <pxCurrentTCBConst2>)
 8005022:	6819      	ldr	r1, [r3, #0]
 8005024:	6808      	ldr	r0, [r1, #0]
 8005026:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800502a:	f380 8809 	msr	PSP, r0
 800502e:	f3bf 8f6f 	isb	sy
 8005032:	f04f 0000 	mov.w	r0, #0
 8005036:	f380 8811 	msr	BASEPRI, r0
 800503a:	4770      	bx	lr
 800503c:	f3af 8000 	nop.w

08005040 <pxCurrentTCBConst2>:
 8005040:	20000900 	.word	0x20000900
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8005044:	bf00      	nop
 8005046:	bf00      	nop

08005048 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8005048:	4808      	ldr	r0, [pc, #32]	@ (800506c <prvPortStartFirstTask+0x24>)
 800504a:	6800      	ldr	r0, [r0, #0]
 800504c:	6800      	ldr	r0, [r0, #0]
 800504e:	f380 8808 	msr	MSP, r0
 8005052:	f04f 0000 	mov.w	r0, #0
 8005056:	f380 8814 	msr	CONTROL, r0
 800505a:	b662      	cpsie	i
 800505c:	b661      	cpsie	f
 800505e:	f3bf 8f4f 	dsb	sy
 8005062:	f3bf 8f6f 	isb	sy
 8005066:	df00      	svc	0
 8005068:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800506a:	bf00      	nop
 800506c:	e000ed08 	.word	0xe000ed08

08005070 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8005070:	b580      	push	{r7, lr}
 8005072:	b086      	sub	sp, #24
 8005074:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8005076:	4b47      	ldr	r3, [pc, #284]	@ (8005194 <xPortStartScheduler+0x124>)
 8005078:	681b      	ldr	r3, [r3, #0]
 800507a:	4a47      	ldr	r2, [pc, #284]	@ (8005198 <xPortStartScheduler+0x128>)
 800507c:	4293      	cmp	r3, r2
 800507e:	d10b      	bne.n	8005098 <xPortStartScheduler+0x28>
	__asm volatile
 8005080:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005084:	f383 8811 	msr	BASEPRI, r3
 8005088:	f3bf 8f6f 	isb	sy
 800508c:	f3bf 8f4f 	dsb	sy
 8005090:	60fb      	str	r3, [r7, #12]
}
 8005092:	bf00      	nop
 8005094:	bf00      	nop
 8005096:	e7fd      	b.n	8005094 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8005098:	4b3e      	ldr	r3, [pc, #248]	@ (8005194 <xPortStartScheduler+0x124>)
 800509a:	681b      	ldr	r3, [r3, #0]
 800509c:	4a3f      	ldr	r2, [pc, #252]	@ (800519c <xPortStartScheduler+0x12c>)
 800509e:	4293      	cmp	r3, r2
 80050a0:	d10b      	bne.n	80050ba <xPortStartScheduler+0x4a>
	__asm volatile
 80050a2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80050a6:	f383 8811 	msr	BASEPRI, r3
 80050aa:	f3bf 8f6f 	isb	sy
 80050ae:	f3bf 8f4f 	dsb	sy
 80050b2:	613b      	str	r3, [r7, #16]
}
 80050b4:	bf00      	nop
 80050b6:	bf00      	nop
 80050b8:	e7fd      	b.n	80050b6 <xPortStartScheduler+0x46>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 80050ba:	4b39      	ldr	r3, [pc, #228]	@ (80051a0 <xPortStartScheduler+0x130>)
 80050bc:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 80050be:	697b      	ldr	r3, [r7, #20]
 80050c0:	781b      	ldrb	r3, [r3, #0]
 80050c2:	b2db      	uxtb	r3, r3
 80050c4:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 80050c6:	697b      	ldr	r3, [r7, #20]
 80050c8:	22ff      	movs	r2, #255	@ 0xff
 80050ca:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 80050cc:	697b      	ldr	r3, [r7, #20]
 80050ce:	781b      	ldrb	r3, [r3, #0]
 80050d0:	b2db      	uxtb	r3, r3
 80050d2:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 80050d4:	78fb      	ldrb	r3, [r7, #3]
 80050d6:	b2db      	uxtb	r3, r3
 80050d8:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 80050dc:	b2da      	uxtb	r2, r3
 80050de:	4b31      	ldr	r3, [pc, #196]	@ (80051a4 <xPortStartScheduler+0x134>)
 80050e0:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 80050e2:	4b31      	ldr	r3, [pc, #196]	@ (80051a8 <xPortStartScheduler+0x138>)
 80050e4:	2207      	movs	r2, #7
 80050e6:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80050e8:	e009      	b.n	80050fe <xPortStartScheduler+0x8e>
		{
			ulMaxPRIGROUPValue--;
 80050ea:	4b2f      	ldr	r3, [pc, #188]	@ (80051a8 <xPortStartScheduler+0x138>)
 80050ec:	681b      	ldr	r3, [r3, #0]
 80050ee:	3b01      	subs	r3, #1
 80050f0:	4a2d      	ldr	r2, [pc, #180]	@ (80051a8 <xPortStartScheduler+0x138>)
 80050f2:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 80050f4:	78fb      	ldrb	r3, [r7, #3]
 80050f6:	b2db      	uxtb	r3, r3
 80050f8:	005b      	lsls	r3, r3, #1
 80050fa:	b2db      	uxtb	r3, r3
 80050fc:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80050fe:	78fb      	ldrb	r3, [r7, #3]
 8005100:	b2db      	uxtb	r3, r3
 8005102:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005106:	2b80      	cmp	r3, #128	@ 0x80
 8005108:	d0ef      	beq.n	80050ea <xPortStartScheduler+0x7a>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800510a:	4b27      	ldr	r3, [pc, #156]	@ (80051a8 <xPortStartScheduler+0x138>)
 800510c:	681b      	ldr	r3, [r3, #0]
 800510e:	f1c3 0307 	rsb	r3, r3, #7
 8005112:	2b04      	cmp	r3, #4
 8005114:	d00b      	beq.n	800512e <xPortStartScheduler+0xbe>
	__asm volatile
 8005116:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800511a:	f383 8811 	msr	BASEPRI, r3
 800511e:	f3bf 8f6f 	isb	sy
 8005122:	f3bf 8f4f 	dsb	sy
 8005126:	60bb      	str	r3, [r7, #8]
}
 8005128:	bf00      	nop
 800512a:	bf00      	nop
 800512c:	e7fd      	b.n	800512a <xPortStartScheduler+0xba>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 800512e:	4b1e      	ldr	r3, [pc, #120]	@ (80051a8 <xPortStartScheduler+0x138>)
 8005130:	681b      	ldr	r3, [r3, #0]
 8005132:	021b      	lsls	r3, r3, #8
 8005134:	4a1c      	ldr	r2, [pc, #112]	@ (80051a8 <xPortStartScheduler+0x138>)
 8005136:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8005138:	4b1b      	ldr	r3, [pc, #108]	@ (80051a8 <xPortStartScheduler+0x138>)
 800513a:	681b      	ldr	r3, [r3, #0]
 800513c:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8005140:	4a19      	ldr	r2, [pc, #100]	@ (80051a8 <xPortStartScheduler+0x138>)
 8005142:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8005144:	687b      	ldr	r3, [r7, #4]
 8005146:	b2da      	uxtb	r2, r3
 8005148:	697b      	ldr	r3, [r7, #20]
 800514a:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 800514c:	4b17      	ldr	r3, [pc, #92]	@ (80051ac <xPortStartScheduler+0x13c>)
 800514e:	681b      	ldr	r3, [r3, #0]
 8005150:	4a16      	ldr	r2, [pc, #88]	@ (80051ac <xPortStartScheduler+0x13c>)
 8005152:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8005156:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8005158:	4b14      	ldr	r3, [pc, #80]	@ (80051ac <xPortStartScheduler+0x13c>)
 800515a:	681b      	ldr	r3, [r3, #0]
 800515c:	4a13      	ldr	r2, [pc, #76]	@ (80051ac <xPortStartScheduler+0x13c>)
 800515e:	f043 4370 	orr.w	r3, r3, #4026531840	@ 0xf0000000
 8005162:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8005164:	f000 f8da 	bl	800531c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8005168:	4b11      	ldr	r3, [pc, #68]	@ (80051b0 <xPortStartScheduler+0x140>)
 800516a:	2200      	movs	r2, #0
 800516c:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 800516e:	f000 f8f9 	bl	8005364 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8005172:	4b10      	ldr	r3, [pc, #64]	@ (80051b4 <xPortStartScheduler+0x144>)
 8005174:	681b      	ldr	r3, [r3, #0]
 8005176:	4a0f      	ldr	r2, [pc, #60]	@ (80051b4 <xPortStartScheduler+0x144>)
 8005178:	f043 4340 	orr.w	r3, r3, #3221225472	@ 0xc0000000
 800517c:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 800517e:	f7ff ff63 	bl	8005048 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8005182:	f7ff f821 	bl	80041c8 <vTaskSwitchContext>
	prvTaskExitError();
 8005186:	f7ff ff19 	bl	8004fbc <prvTaskExitError>

	/* Should not get here! */
	return 0;
 800518a:	2300      	movs	r3, #0
}
 800518c:	4618      	mov	r0, r3
 800518e:	3718      	adds	r7, #24
 8005190:	46bd      	mov	sp, r7
 8005192:	bd80      	pop	{r7, pc}
 8005194:	e000ed00 	.word	0xe000ed00
 8005198:	410fc271 	.word	0x410fc271
 800519c:	410fc270 	.word	0x410fc270
 80051a0:	e000e400 	.word	0xe000e400
 80051a4:	20000b28 	.word	0x20000b28
 80051a8:	20000b2c 	.word	0x20000b2c
 80051ac:	e000ed20 	.word	0xe000ed20
 80051b0:	2000000c 	.word	0x2000000c
 80051b4:	e000ef34 	.word	0xe000ef34

080051b8 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 80051b8:	b480      	push	{r7}
 80051ba:	b083      	sub	sp, #12
 80051bc:	af00      	add	r7, sp, #0
	__asm volatile
 80051be:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80051c2:	f383 8811 	msr	BASEPRI, r3
 80051c6:	f3bf 8f6f 	isb	sy
 80051ca:	f3bf 8f4f 	dsb	sy
 80051ce:	607b      	str	r3, [r7, #4]
}
 80051d0:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 80051d2:	4b10      	ldr	r3, [pc, #64]	@ (8005214 <vPortEnterCritical+0x5c>)
 80051d4:	681b      	ldr	r3, [r3, #0]
 80051d6:	3301      	adds	r3, #1
 80051d8:	4a0e      	ldr	r2, [pc, #56]	@ (8005214 <vPortEnterCritical+0x5c>)
 80051da:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 80051dc:	4b0d      	ldr	r3, [pc, #52]	@ (8005214 <vPortEnterCritical+0x5c>)
 80051de:	681b      	ldr	r3, [r3, #0]
 80051e0:	2b01      	cmp	r3, #1
 80051e2:	d110      	bne.n	8005206 <vPortEnterCritical+0x4e>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 80051e4:	4b0c      	ldr	r3, [pc, #48]	@ (8005218 <vPortEnterCritical+0x60>)
 80051e6:	681b      	ldr	r3, [r3, #0]
 80051e8:	b2db      	uxtb	r3, r3
 80051ea:	2b00      	cmp	r3, #0
 80051ec:	d00b      	beq.n	8005206 <vPortEnterCritical+0x4e>
	__asm volatile
 80051ee:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80051f2:	f383 8811 	msr	BASEPRI, r3
 80051f6:	f3bf 8f6f 	isb	sy
 80051fa:	f3bf 8f4f 	dsb	sy
 80051fe:	603b      	str	r3, [r7, #0]
}
 8005200:	bf00      	nop
 8005202:	bf00      	nop
 8005204:	e7fd      	b.n	8005202 <vPortEnterCritical+0x4a>
	}
}
 8005206:	bf00      	nop
 8005208:	370c      	adds	r7, #12
 800520a:	46bd      	mov	sp, r7
 800520c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005210:	4770      	bx	lr
 8005212:	bf00      	nop
 8005214:	2000000c 	.word	0x2000000c
 8005218:	e000ed04 	.word	0xe000ed04

0800521c <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 800521c:	b480      	push	{r7}
 800521e:	b083      	sub	sp, #12
 8005220:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 8005222:	4b12      	ldr	r3, [pc, #72]	@ (800526c <vPortExitCritical+0x50>)
 8005224:	681b      	ldr	r3, [r3, #0]
 8005226:	2b00      	cmp	r3, #0
 8005228:	d10b      	bne.n	8005242 <vPortExitCritical+0x26>
	__asm volatile
 800522a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800522e:	f383 8811 	msr	BASEPRI, r3
 8005232:	f3bf 8f6f 	isb	sy
 8005236:	f3bf 8f4f 	dsb	sy
 800523a:	607b      	str	r3, [r7, #4]
}
 800523c:	bf00      	nop
 800523e:	bf00      	nop
 8005240:	e7fd      	b.n	800523e <vPortExitCritical+0x22>
	uxCriticalNesting--;
 8005242:	4b0a      	ldr	r3, [pc, #40]	@ (800526c <vPortExitCritical+0x50>)
 8005244:	681b      	ldr	r3, [r3, #0]
 8005246:	3b01      	subs	r3, #1
 8005248:	4a08      	ldr	r2, [pc, #32]	@ (800526c <vPortExitCritical+0x50>)
 800524a:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 800524c:	4b07      	ldr	r3, [pc, #28]	@ (800526c <vPortExitCritical+0x50>)
 800524e:	681b      	ldr	r3, [r3, #0]
 8005250:	2b00      	cmp	r3, #0
 8005252:	d105      	bne.n	8005260 <vPortExitCritical+0x44>
 8005254:	2300      	movs	r3, #0
 8005256:	603b      	str	r3, [r7, #0]
	__asm volatile
 8005258:	683b      	ldr	r3, [r7, #0]
 800525a:	f383 8811 	msr	BASEPRI, r3
}
 800525e:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 8005260:	bf00      	nop
 8005262:	370c      	adds	r7, #12
 8005264:	46bd      	mov	sp, r7
 8005266:	f85d 7b04 	ldr.w	r7, [sp], #4
 800526a:	4770      	bx	lr
 800526c:	2000000c 	.word	0x2000000c

08005270 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8005270:	f3ef 8009 	mrs	r0, PSP
 8005274:	f3bf 8f6f 	isb	sy
 8005278:	4b15      	ldr	r3, [pc, #84]	@ (80052d0 <pxCurrentTCBConst>)
 800527a:	681a      	ldr	r2, [r3, #0]
 800527c:	f01e 0f10 	tst.w	lr, #16
 8005280:	bf08      	it	eq
 8005282:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8005286:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800528a:	6010      	str	r0, [r2, #0]
 800528c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8005290:	f04f 0050 	mov.w	r0, #80	@ 0x50
 8005294:	f380 8811 	msr	BASEPRI, r0
 8005298:	f3bf 8f4f 	dsb	sy
 800529c:	f3bf 8f6f 	isb	sy
 80052a0:	f7fe ff92 	bl	80041c8 <vTaskSwitchContext>
 80052a4:	f04f 0000 	mov.w	r0, #0
 80052a8:	f380 8811 	msr	BASEPRI, r0
 80052ac:	bc09      	pop	{r0, r3}
 80052ae:	6819      	ldr	r1, [r3, #0]
 80052b0:	6808      	ldr	r0, [r1, #0]
 80052b2:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80052b6:	f01e 0f10 	tst.w	lr, #16
 80052ba:	bf08      	it	eq
 80052bc:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 80052c0:	f380 8809 	msr	PSP, r0
 80052c4:	f3bf 8f6f 	isb	sy
 80052c8:	4770      	bx	lr
 80052ca:	bf00      	nop
 80052cc:	f3af 8000 	nop.w

080052d0 <pxCurrentTCBConst>:
 80052d0:	20000900 	.word	0x20000900
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 80052d4:	bf00      	nop
 80052d6:	bf00      	nop

080052d8 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 80052d8:	b580      	push	{r7, lr}
 80052da:	b082      	sub	sp, #8
 80052dc:	af00      	add	r7, sp, #0
	__asm volatile
 80052de:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80052e2:	f383 8811 	msr	BASEPRI, r3
 80052e6:	f3bf 8f6f 	isb	sy
 80052ea:	f3bf 8f4f 	dsb	sy
 80052ee:	607b      	str	r3, [r7, #4]
}
 80052f0:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 80052f2:	f7fe feaf 	bl	8004054 <xTaskIncrementTick>
 80052f6:	4603      	mov	r3, r0
 80052f8:	2b00      	cmp	r3, #0
 80052fa:	d003      	beq.n	8005304 <SysTick_Handler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 80052fc:	4b06      	ldr	r3, [pc, #24]	@ (8005318 <SysTick_Handler+0x40>)
 80052fe:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8005302:	601a      	str	r2, [r3, #0]
 8005304:	2300      	movs	r3, #0
 8005306:	603b      	str	r3, [r7, #0]
	__asm volatile
 8005308:	683b      	ldr	r3, [r7, #0]
 800530a:	f383 8811 	msr	BASEPRI, r3
}
 800530e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8005310:	bf00      	nop
 8005312:	3708      	adds	r7, #8
 8005314:	46bd      	mov	sp, r7
 8005316:	bd80      	pop	{r7, pc}
 8005318:	e000ed04 	.word	0xe000ed04

0800531c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800531c:	b480      	push	{r7}
 800531e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8005320:	4b0b      	ldr	r3, [pc, #44]	@ (8005350 <vPortSetupTimerInterrupt+0x34>)
 8005322:	2200      	movs	r2, #0
 8005324:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8005326:	4b0b      	ldr	r3, [pc, #44]	@ (8005354 <vPortSetupTimerInterrupt+0x38>)
 8005328:	2200      	movs	r2, #0
 800532a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800532c:	4b0a      	ldr	r3, [pc, #40]	@ (8005358 <vPortSetupTimerInterrupt+0x3c>)
 800532e:	681b      	ldr	r3, [r3, #0]
 8005330:	4a0a      	ldr	r2, [pc, #40]	@ (800535c <vPortSetupTimerInterrupt+0x40>)
 8005332:	fba2 2303 	umull	r2, r3, r2, r3
 8005336:	099b      	lsrs	r3, r3, #6
 8005338:	4a09      	ldr	r2, [pc, #36]	@ (8005360 <vPortSetupTimerInterrupt+0x44>)
 800533a:	3b01      	subs	r3, #1
 800533c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800533e:	4b04      	ldr	r3, [pc, #16]	@ (8005350 <vPortSetupTimerInterrupt+0x34>)
 8005340:	2207      	movs	r2, #7
 8005342:	601a      	str	r2, [r3, #0]
}
 8005344:	bf00      	nop
 8005346:	46bd      	mov	sp, r7
 8005348:	f85d 7b04 	ldr.w	r7, [sp], #4
 800534c:	4770      	bx	lr
 800534e:	bf00      	nop
 8005350:	e000e010 	.word	0xe000e010
 8005354:	e000e018 	.word	0xe000e018
 8005358:	20000000 	.word	0x20000000
 800535c:	10624dd3 	.word	0x10624dd3
 8005360:	e000e014 	.word	0xe000e014

08005364 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8005364:	f8df 000c 	ldr.w	r0, [pc, #12]	@ 8005374 <vPortEnableVFP+0x10>
 8005368:	6801      	ldr	r1, [r0, #0]
 800536a:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800536e:	6001      	str	r1, [r0, #0]
 8005370:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8005372:	bf00      	nop
 8005374:	e000ed88 	.word	0xe000ed88

08005378 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 8005378:	b480      	push	{r7}
 800537a:	b085      	sub	sp, #20
 800537c:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 800537e:	f3ef 8305 	mrs	r3, IPSR
 8005382:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8005384:	68fb      	ldr	r3, [r7, #12]
 8005386:	2b0f      	cmp	r3, #15
 8005388:	d915      	bls.n	80053b6 <vPortValidateInterruptPriority+0x3e>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800538a:	4a18      	ldr	r2, [pc, #96]	@ (80053ec <vPortValidateInterruptPriority+0x74>)
 800538c:	68fb      	ldr	r3, [r7, #12]
 800538e:	4413      	add	r3, r2
 8005390:	781b      	ldrb	r3, [r3, #0]
 8005392:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8005394:	4b16      	ldr	r3, [pc, #88]	@ (80053f0 <vPortValidateInterruptPriority+0x78>)
 8005396:	781b      	ldrb	r3, [r3, #0]
 8005398:	7afa      	ldrb	r2, [r7, #11]
 800539a:	429a      	cmp	r2, r3
 800539c:	d20b      	bcs.n	80053b6 <vPortValidateInterruptPriority+0x3e>
	__asm volatile
 800539e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80053a2:	f383 8811 	msr	BASEPRI, r3
 80053a6:	f3bf 8f6f 	isb	sy
 80053aa:	f3bf 8f4f 	dsb	sy
 80053ae:	607b      	str	r3, [r7, #4]
}
 80053b0:	bf00      	nop
 80053b2:	bf00      	nop
 80053b4:	e7fd      	b.n	80053b2 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 80053b6:	4b0f      	ldr	r3, [pc, #60]	@ (80053f4 <vPortValidateInterruptPriority+0x7c>)
 80053b8:	681b      	ldr	r3, [r3, #0]
 80053ba:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 80053be:	4b0e      	ldr	r3, [pc, #56]	@ (80053f8 <vPortValidateInterruptPriority+0x80>)
 80053c0:	681b      	ldr	r3, [r3, #0]
 80053c2:	429a      	cmp	r2, r3
 80053c4:	d90b      	bls.n	80053de <vPortValidateInterruptPriority+0x66>
	__asm volatile
 80053c6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80053ca:	f383 8811 	msr	BASEPRI, r3
 80053ce:	f3bf 8f6f 	isb	sy
 80053d2:	f3bf 8f4f 	dsb	sy
 80053d6:	603b      	str	r3, [r7, #0]
}
 80053d8:	bf00      	nop
 80053da:	bf00      	nop
 80053dc:	e7fd      	b.n	80053da <vPortValidateInterruptPriority+0x62>
	}
 80053de:	bf00      	nop
 80053e0:	3714      	adds	r7, #20
 80053e2:	46bd      	mov	sp, r7
 80053e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053e8:	4770      	bx	lr
 80053ea:	bf00      	nop
 80053ec:	e000e3f0 	.word	0xe000e3f0
 80053f0:	20000b28 	.word	0x20000b28
 80053f4:	e000ed0c 	.word	0xe000ed0c
 80053f8:	20000b2c 	.word	0x20000b2c

080053fc <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 80053fc:	b580      	push	{r7, lr}
 80053fe:	b08a      	sub	sp, #40	@ 0x28
 8005400:	af00      	add	r7, sp, #0
 8005402:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8005404:	2300      	movs	r3, #0
 8005406:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8005408:	f7fe fd68 	bl	8003edc <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 800540c:	4b5c      	ldr	r3, [pc, #368]	@ (8005580 <pvPortMalloc+0x184>)
 800540e:	681b      	ldr	r3, [r3, #0]
 8005410:	2b00      	cmp	r3, #0
 8005412:	d101      	bne.n	8005418 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8005414:	f000 f924 	bl	8005660 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8005418:	4b5a      	ldr	r3, [pc, #360]	@ (8005584 <pvPortMalloc+0x188>)
 800541a:	681a      	ldr	r2, [r3, #0]
 800541c:	687b      	ldr	r3, [r7, #4]
 800541e:	4013      	ands	r3, r2
 8005420:	2b00      	cmp	r3, #0
 8005422:	f040 8095 	bne.w	8005550 <pvPortMalloc+0x154>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8005426:	687b      	ldr	r3, [r7, #4]
 8005428:	2b00      	cmp	r3, #0
 800542a:	d01e      	beq.n	800546a <pvPortMalloc+0x6e>
			{
				xWantedSize += xHeapStructSize;
 800542c:	2208      	movs	r2, #8
 800542e:	687b      	ldr	r3, [r7, #4]
 8005430:	4413      	add	r3, r2
 8005432:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8005434:	687b      	ldr	r3, [r7, #4]
 8005436:	f003 0307 	and.w	r3, r3, #7
 800543a:	2b00      	cmp	r3, #0
 800543c:	d015      	beq.n	800546a <pvPortMalloc+0x6e>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800543e:	687b      	ldr	r3, [r7, #4]
 8005440:	f023 0307 	bic.w	r3, r3, #7
 8005444:	3308      	adds	r3, #8
 8005446:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8005448:	687b      	ldr	r3, [r7, #4]
 800544a:	f003 0307 	and.w	r3, r3, #7
 800544e:	2b00      	cmp	r3, #0
 8005450:	d00b      	beq.n	800546a <pvPortMalloc+0x6e>
	__asm volatile
 8005452:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005456:	f383 8811 	msr	BASEPRI, r3
 800545a:	f3bf 8f6f 	isb	sy
 800545e:	f3bf 8f4f 	dsb	sy
 8005462:	617b      	str	r3, [r7, #20]
}
 8005464:	bf00      	nop
 8005466:	bf00      	nop
 8005468:	e7fd      	b.n	8005466 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 800546a:	687b      	ldr	r3, [r7, #4]
 800546c:	2b00      	cmp	r3, #0
 800546e:	d06f      	beq.n	8005550 <pvPortMalloc+0x154>
 8005470:	4b45      	ldr	r3, [pc, #276]	@ (8005588 <pvPortMalloc+0x18c>)
 8005472:	681b      	ldr	r3, [r3, #0]
 8005474:	687a      	ldr	r2, [r7, #4]
 8005476:	429a      	cmp	r2, r3
 8005478:	d86a      	bhi.n	8005550 <pvPortMalloc+0x154>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 800547a:	4b44      	ldr	r3, [pc, #272]	@ (800558c <pvPortMalloc+0x190>)
 800547c:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 800547e:	4b43      	ldr	r3, [pc, #268]	@ (800558c <pvPortMalloc+0x190>)
 8005480:	681b      	ldr	r3, [r3, #0]
 8005482:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8005484:	e004      	b.n	8005490 <pvPortMalloc+0x94>
				{
					pxPreviousBlock = pxBlock;
 8005486:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005488:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 800548a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800548c:	681b      	ldr	r3, [r3, #0]
 800548e:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8005490:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005492:	685b      	ldr	r3, [r3, #4]
 8005494:	687a      	ldr	r2, [r7, #4]
 8005496:	429a      	cmp	r2, r3
 8005498:	d903      	bls.n	80054a2 <pvPortMalloc+0xa6>
 800549a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800549c:	681b      	ldr	r3, [r3, #0]
 800549e:	2b00      	cmp	r3, #0
 80054a0:	d1f1      	bne.n	8005486 <pvPortMalloc+0x8a>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 80054a2:	4b37      	ldr	r3, [pc, #220]	@ (8005580 <pvPortMalloc+0x184>)
 80054a4:	681b      	ldr	r3, [r3, #0]
 80054a6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80054a8:	429a      	cmp	r2, r3
 80054aa:	d051      	beq.n	8005550 <pvPortMalloc+0x154>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 80054ac:	6a3b      	ldr	r3, [r7, #32]
 80054ae:	681b      	ldr	r3, [r3, #0]
 80054b0:	2208      	movs	r2, #8
 80054b2:	4413      	add	r3, r2
 80054b4:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 80054b6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80054b8:	681a      	ldr	r2, [r3, #0]
 80054ba:	6a3b      	ldr	r3, [r7, #32]
 80054bc:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 80054be:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80054c0:	685a      	ldr	r2, [r3, #4]
 80054c2:	687b      	ldr	r3, [r7, #4]
 80054c4:	1ad2      	subs	r2, r2, r3
 80054c6:	2308      	movs	r3, #8
 80054c8:	005b      	lsls	r3, r3, #1
 80054ca:	429a      	cmp	r2, r3
 80054cc:	d920      	bls.n	8005510 <pvPortMalloc+0x114>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 80054ce:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80054d0:	687b      	ldr	r3, [r7, #4]
 80054d2:	4413      	add	r3, r2
 80054d4:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 80054d6:	69bb      	ldr	r3, [r7, #24]
 80054d8:	f003 0307 	and.w	r3, r3, #7
 80054dc:	2b00      	cmp	r3, #0
 80054de:	d00b      	beq.n	80054f8 <pvPortMalloc+0xfc>
	__asm volatile
 80054e0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80054e4:	f383 8811 	msr	BASEPRI, r3
 80054e8:	f3bf 8f6f 	isb	sy
 80054ec:	f3bf 8f4f 	dsb	sy
 80054f0:	613b      	str	r3, [r7, #16]
}
 80054f2:	bf00      	nop
 80054f4:	bf00      	nop
 80054f6:	e7fd      	b.n	80054f4 <pvPortMalloc+0xf8>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 80054f8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80054fa:	685a      	ldr	r2, [r3, #4]
 80054fc:	687b      	ldr	r3, [r7, #4]
 80054fe:	1ad2      	subs	r2, r2, r3
 8005500:	69bb      	ldr	r3, [r7, #24]
 8005502:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8005504:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005506:	687a      	ldr	r2, [r7, #4]
 8005508:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 800550a:	69b8      	ldr	r0, [r7, #24]
 800550c:	f000 f90a 	bl	8005724 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8005510:	4b1d      	ldr	r3, [pc, #116]	@ (8005588 <pvPortMalloc+0x18c>)
 8005512:	681a      	ldr	r2, [r3, #0]
 8005514:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005516:	685b      	ldr	r3, [r3, #4]
 8005518:	1ad3      	subs	r3, r2, r3
 800551a:	4a1b      	ldr	r2, [pc, #108]	@ (8005588 <pvPortMalloc+0x18c>)
 800551c:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800551e:	4b1a      	ldr	r3, [pc, #104]	@ (8005588 <pvPortMalloc+0x18c>)
 8005520:	681a      	ldr	r2, [r3, #0]
 8005522:	4b1b      	ldr	r3, [pc, #108]	@ (8005590 <pvPortMalloc+0x194>)
 8005524:	681b      	ldr	r3, [r3, #0]
 8005526:	429a      	cmp	r2, r3
 8005528:	d203      	bcs.n	8005532 <pvPortMalloc+0x136>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 800552a:	4b17      	ldr	r3, [pc, #92]	@ (8005588 <pvPortMalloc+0x18c>)
 800552c:	681b      	ldr	r3, [r3, #0]
 800552e:	4a18      	ldr	r2, [pc, #96]	@ (8005590 <pvPortMalloc+0x194>)
 8005530:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8005532:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005534:	685a      	ldr	r2, [r3, #4]
 8005536:	4b13      	ldr	r3, [pc, #76]	@ (8005584 <pvPortMalloc+0x188>)
 8005538:	681b      	ldr	r3, [r3, #0]
 800553a:	431a      	orrs	r2, r3
 800553c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800553e:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8005540:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005542:	2200      	movs	r2, #0
 8005544:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 8005546:	4b13      	ldr	r3, [pc, #76]	@ (8005594 <pvPortMalloc+0x198>)
 8005548:	681b      	ldr	r3, [r3, #0]
 800554a:	3301      	adds	r3, #1
 800554c:	4a11      	ldr	r2, [pc, #68]	@ (8005594 <pvPortMalloc+0x198>)
 800554e:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8005550:	f7fe fcd2 	bl	8003ef8 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8005554:	69fb      	ldr	r3, [r7, #28]
 8005556:	f003 0307 	and.w	r3, r3, #7
 800555a:	2b00      	cmp	r3, #0
 800555c:	d00b      	beq.n	8005576 <pvPortMalloc+0x17a>
	__asm volatile
 800555e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005562:	f383 8811 	msr	BASEPRI, r3
 8005566:	f3bf 8f6f 	isb	sy
 800556a:	f3bf 8f4f 	dsb	sy
 800556e:	60fb      	str	r3, [r7, #12]
}
 8005570:	bf00      	nop
 8005572:	bf00      	nop
 8005574:	e7fd      	b.n	8005572 <pvPortMalloc+0x176>
	return pvReturn;
 8005576:	69fb      	ldr	r3, [r7, #28]
}
 8005578:	4618      	mov	r0, r3
 800557a:	3728      	adds	r7, #40	@ 0x28
 800557c:	46bd      	mov	sp, r7
 800557e:	bd80      	pop	{r7, pc}
 8005580:	20004738 	.word	0x20004738
 8005584:	2000474c 	.word	0x2000474c
 8005588:	2000473c 	.word	0x2000473c
 800558c:	20004730 	.word	0x20004730
 8005590:	20004740 	.word	0x20004740
 8005594:	20004744 	.word	0x20004744

08005598 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8005598:	b580      	push	{r7, lr}
 800559a:	b086      	sub	sp, #24
 800559c:	af00      	add	r7, sp, #0
 800559e:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 80055a0:	687b      	ldr	r3, [r7, #4]
 80055a2:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 80055a4:	687b      	ldr	r3, [r7, #4]
 80055a6:	2b00      	cmp	r3, #0
 80055a8:	d04f      	beq.n	800564a <vPortFree+0xb2>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 80055aa:	2308      	movs	r3, #8
 80055ac:	425b      	negs	r3, r3
 80055ae:	697a      	ldr	r2, [r7, #20]
 80055b0:	4413      	add	r3, r2
 80055b2:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 80055b4:	697b      	ldr	r3, [r7, #20]
 80055b6:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 80055b8:	693b      	ldr	r3, [r7, #16]
 80055ba:	685a      	ldr	r2, [r3, #4]
 80055bc:	4b25      	ldr	r3, [pc, #148]	@ (8005654 <vPortFree+0xbc>)
 80055be:	681b      	ldr	r3, [r3, #0]
 80055c0:	4013      	ands	r3, r2
 80055c2:	2b00      	cmp	r3, #0
 80055c4:	d10b      	bne.n	80055de <vPortFree+0x46>
	__asm volatile
 80055c6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80055ca:	f383 8811 	msr	BASEPRI, r3
 80055ce:	f3bf 8f6f 	isb	sy
 80055d2:	f3bf 8f4f 	dsb	sy
 80055d6:	60fb      	str	r3, [r7, #12]
}
 80055d8:	bf00      	nop
 80055da:	bf00      	nop
 80055dc:	e7fd      	b.n	80055da <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 80055de:	693b      	ldr	r3, [r7, #16]
 80055e0:	681b      	ldr	r3, [r3, #0]
 80055e2:	2b00      	cmp	r3, #0
 80055e4:	d00b      	beq.n	80055fe <vPortFree+0x66>
	__asm volatile
 80055e6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80055ea:	f383 8811 	msr	BASEPRI, r3
 80055ee:	f3bf 8f6f 	isb	sy
 80055f2:	f3bf 8f4f 	dsb	sy
 80055f6:	60bb      	str	r3, [r7, #8]
}
 80055f8:	bf00      	nop
 80055fa:	bf00      	nop
 80055fc:	e7fd      	b.n	80055fa <vPortFree+0x62>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 80055fe:	693b      	ldr	r3, [r7, #16]
 8005600:	685a      	ldr	r2, [r3, #4]
 8005602:	4b14      	ldr	r3, [pc, #80]	@ (8005654 <vPortFree+0xbc>)
 8005604:	681b      	ldr	r3, [r3, #0]
 8005606:	4013      	ands	r3, r2
 8005608:	2b00      	cmp	r3, #0
 800560a:	d01e      	beq.n	800564a <vPortFree+0xb2>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 800560c:	693b      	ldr	r3, [r7, #16]
 800560e:	681b      	ldr	r3, [r3, #0]
 8005610:	2b00      	cmp	r3, #0
 8005612:	d11a      	bne.n	800564a <vPortFree+0xb2>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8005614:	693b      	ldr	r3, [r7, #16]
 8005616:	685a      	ldr	r2, [r3, #4]
 8005618:	4b0e      	ldr	r3, [pc, #56]	@ (8005654 <vPortFree+0xbc>)
 800561a:	681b      	ldr	r3, [r3, #0]
 800561c:	43db      	mvns	r3, r3
 800561e:	401a      	ands	r2, r3
 8005620:	693b      	ldr	r3, [r7, #16]
 8005622:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8005624:	f7fe fc5a 	bl	8003edc <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8005628:	693b      	ldr	r3, [r7, #16]
 800562a:	685a      	ldr	r2, [r3, #4]
 800562c:	4b0a      	ldr	r3, [pc, #40]	@ (8005658 <vPortFree+0xc0>)
 800562e:	681b      	ldr	r3, [r3, #0]
 8005630:	4413      	add	r3, r2
 8005632:	4a09      	ldr	r2, [pc, #36]	@ (8005658 <vPortFree+0xc0>)
 8005634:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8005636:	6938      	ldr	r0, [r7, #16]
 8005638:	f000 f874 	bl	8005724 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 800563c:	4b07      	ldr	r3, [pc, #28]	@ (800565c <vPortFree+0xc4>)
 800563e:	681b      	ldr	r3, [r3, #0]
 8005640:	3301      	adds	r3, #1
 8005642:	4a06      	ldr	r2, [pc, #24]	@ (800565c <vPortFree+0xc4>)
 8005644:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 8005646:	f7fe fc57 	bl	8003ef8 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 800564a:	bf00      	nop
 800564c:	3718      	adds	r7, #24
 800564e:	46bd      	mov	sp, r7
 8005650:	bd80      	pop	{r7, pc}
 8005652:	bf00      	nop
 8005654:	2000474c 	.word	0x2000474c
 8005658:	2000473c 	.word	0x2000473c
 800565c:	20004748 	.word	0x20004748

08005660 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8005660:	b480      	push	{r7}
 8005662:	b085      	sub	sp, #20
 8005664:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8005666:	f44f 5370 	mov.w	r3, #15360	@ 0x3c00
 800566a:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 800566c:	4b27      	ldr	r3, [pc, #156]	@ (800570c <prvHeapInit+0xac>)
 800566e:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8005670:	68fb      	ldr	r3, [r7, #12]
 8005672:	f003 0307 	and.w	r3, r3, #7
 8005676:	2b00      	cmp	r3, #0
 8005678:	d00c      	beq.n	8005694 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800567a:	68fb      	ldr	r3, [r7, #12]
 800567c:	3307      	adds	r3, #7
 800567e:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8005680:	68fb      	ldr	r3, [r7, #12]
 8005682:	f023 0307 	bic.w	r3, r3, #7
 8005686:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8005688:	68ba      	ldr	r2, [r7, #8]
 800568a:	68fb      	ldr	r3, [r7, #12]
 800568c:	1ad3      	subs	r3, r2, r3
 800568e:	4a1f      	ldr	r2, [pc, #124]	@ (800570c <prvHeapInit+0xac>)
 8005690:	4413      	add	r3, r2
 8005692:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8005694:	68fb      	ldr	r3, [r7, #12]
 8005696:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8005698:	4a1d      	ldr	r2, [pc, #116]	@ (8005710 <prvHeapInit+0xb0>)
 800569a:	687b      	ldr	r3, [r7, #4]
 800569c:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 800569e:	4b1c      	ldr	r3, [pc, #112]	@ (8005710 <prvHeapInit+0xb0>)
 80056a0:	2200      	movs	r2, #0
 80056a2:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 80056a4:	687b      	ldr	r3, [r7, #4]
 80056a6:	68ba      	ldr	r2, [r7, #8]
 80056a8:	4413      	add	r3, r2
 80056aa:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 80056ac:	2208      	movs	r2, #8
 80056ae:	68fb      	ldr	r3, [r7, #12]
 80056b0:	1a9b      	subs	r3, r3, r2
 80056b2:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 80056b4:	68fb      	ldr	r3, [r7, #12]
 80056b6:	f023 0307 	bic.w	r3, r3, #7
 80056ba:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 80056bc:	68fb      	ldr	r3, [r7, #12]
 80056be:	4a15      	ldr	r2, [pc, #84]	@ (8005714 <prvHeapInit+0xb4>)
 80056c0:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 80056c2:	4b14      	ldr	r3, [pc, #80]	@ (8005714 <prvHeapInit+0xb4>)
 80056c4:	681b      	ldr	r3, [r3, #0]
 80056c6:	2200      	movs	r2, #0
 80056c8:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 80056ca:	4b12      	ldr	r3, [pc, #72]	@ (8005714 <prvHeapInit+0xb4>)
 80056cc:	681b      	ldr	r3, [r3, #0]
 80056ce:	2200      	movs	r2, #0
 80056d0:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 80056d2:	687b      	ldr	r3, [r7, #4]
 80056d4:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 80056d6:	683b      	ldr	r3, [r7, #0]
 80056d8:	68fa      	ldr	r2, [r7, #12]
 80056da:	1ad2      	subs	r2, r2, r3
 80056dc:	683b      	ldr	r3, [r7, #0]
 80056de:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 80056e0:	4b0c      	ldr	r3, [pc, #48]	@ (8005714 <prvHeapInit+0xb4>)
 80056e2:	681a      	ldr	r2, [r3, #0]
 80056e4:	683b      	ldr	r3, [r7, #0]
 80056e6:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80056e8:	683b      	ldr	r3, [r7, #0]
 80056ea:	685b      	ldr	r3, [r3, #4]
 80056ec:	4a0a      	ldr	r2, [pc, #40]	@ (8005718 <prvHeapInit+0xb8>)
 80056ee:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80056f0:	683b      	ldr	r3, [r7, #0]
 80056f2:	685b      	ldr	r3, [r3, #4]
 80056f4:	4a09      	ldr	r2, [pc, #36]	@ (800571c <prvHeapInit+0xbc>)
 80056f6:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 80056f8:	4b09      	ldr	r3, [pc, #36]	@ (8005720 <prvHeapInit+0xc0>)
 80056fa:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 80056fe:	601a      	str	r2, [r3, #0]
}
 8005700:	bf00      	nop
 8005702:	3714      	adds	r7, #20
 8005704:	46bd      	mov	sp, r7
 8005706:	f85d 7b04 	ldr.w	r7, [sp], #4
 800570a:	4770      	bx	lr
 800570c:	20000b30 	.word	0x20000b30
 8005710:	20004730 	.word	0x20004730
 8005714:	20004738 	.word	0x20004738
 8005718:	20004740 	.word	0x20004740
 800571c:	2000473c 	.word	0x2000473c
 8005720:	2000474c 	.word	0x2000474c

08005724 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8005724:	b480      	push	{r7}
 8005726:	b085      	sub	sp, #20
 8005728:	af00      	add	r7, sp, #0
 800572a:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 800572c:	4b28      	ldr	r3, [pc, #160]	@ (80057d0 <prvInsertBlockIntoFreeList+0xac>)
 800572e:	60fb      	str	r3, [r7, #12]
 8005730:	e002      	b.n	8005738 <prvInsertBlockIntoFreeList+0x14>
 8005732:	68fb      	ldr	r3, [r7, #12]
 8005734:	681b      	ldr	r3, [r3, #0]
 8005736:	60fb      	str	r3, [r7, #12]
 8005738:	68fb      	ldr	r3, [r7, #12]
 800573a:	681b      	ldr	r3, [r3, #0]
 800573c:	687a      	ldr	r2, [r7, #4]
 800573e:	429a      	cmp	r2, r3
 8005740:	d8f7      	bhi.n	8005732 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8005742:	68fb      	ldr	r3, [r7, #12]
 8005744:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8005746:	68fb      	ldr	r3, [r7, #12]
 8005748:	685b      	ldr	r3, [r3, #4]
 800574a:	68ba      	ldr	r2, [r7, #8]
 800574c:	4413      	add	r3, r2
 800574e:	687a      	ldr	r2, [r7, #4]
 8005750:	429a      	cmp	r2, r3
 8005752:	d108      	bne.n	8005766 <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8005754:	68fb      	ldr	r3, [r7, #12]
 8005756:	685a      	ldr	r2, [r3, #4]
 8005758:	687b      	ldr	r3, [r7, #4]
 800575a:	685b      	ldr	r3, [r3, #4]
 800575c:	441a      	add	r2, r3
 800575e:	68fb      	ldr	r3, [r7, #12]
 8005760:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8005762:	68fb      	ldr	r3, [r7, #12]
 8005764:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 8005766:	687b      	ldr	r3, [r7, #4]
 8005768:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800576a:	687b      	ldr	r3, [r7, #4]
 800576c:	685b      	ldr	r3, [r3, #4]
 800576e:	68ba      	ldr	r2, [r7, #8]
 8005770:	441a      	add	r2, r3
 8005772:	68fb      	ldr	r3, [r7, #12]
 8005774:	681b      	ldr	r3, [r3, #0]
 8005776:	429a      	cmp	r2, r3
 8005778:	d118      	bne.n	80057ac <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800577a:	68fb      	ldr	r3, [r7, #12]
 800577c:	681a      	ldr	r2, [r3, #0]
 800577e:	4b15      	ldr	r3, [pc, #84]	@ (80057d4 <prvInsertBlockIntoFreeList+0xb0>)
 8005780:	681b      	ldr	r3, [r3, #0]
 8005782:	429a      	cmp	r2, r3
 8005784:	d00d      	beq.n	80057a2 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8005786:	687b      	ldr	r3, [r7, #4]
 8005788:	685a      	ldr	r2, [r3, #4]
 800578a:	68fb      	ldr	r3, [r7, #12]
 800578c:	681b      	ldr	r3, [r3, #0]
 800578e:	685b      	ldr	r3, [r3, #4]
 8005790:	441a      	add	r2, r3
 8005792:	687b      	ldr	r3, [r7, #4]
 8005794:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8005796:	68fb      	ldr	r3, [r7, #12]
 8005798:	681b      	ldr	r3, [r3, #0]
 800579a:	681a      	ldr	r2, [r3, #0]
 800579c:	687b      	ldr	r3, [r7, #4]
 800579e:	601a      	str	r2, [r3, #0]
 80057a0:	e008      	b.n	80057b4 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 80057a2:	4b0c      	ldr	r3, [pc, #48]	@ (80057d4 <prvInsertBlockIntoFreeList+0xb0>)
 80057a4:	681a      	ldr	r2, [r3, #0]
 80057a6:	687b      	ldr	r3, [r7, #4]
 80057a8:	601a      	str	r2, [r3, #0]
 80057aa:	e003      	b.n	80057b4 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 80057ac:	68fb      	ldr	r3, [r7, #12]
 80057ae:	681a      	ldr	r2, [r3, #0]
 80057b0:	687b      	ldr	r3, [r7, #4]
 80057b2:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 80057b4:	68fa      	ldr	r2, [r7, #12]
 80057b6:	687b      	ldr	r3, [r7, #4]
 80057b8:	429a      	cmp	r2, r3
 80057ba:	d002      	beq.n	80057c2 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 80057bc:	68fb      	ldr	r3, [r7, #12]
 80057be:	687a      	ldr	r2, [r7, #4]
 80057c0:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80057c2:	bf00      	nop
 80057c4:	3714      	adds	r7, #20
 80057c6:	46bd      	mov	sp, r7
 80057c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057cc:	4770      	bx	lr
 80057ce:	bf00      	nop
 80057d0:	20004730 	.word	0x20004730
 80057d4:	20004738 	.word	0x20004738

080057d8 <app_init>:
ao_led_handle_t led_red, led_green, led_blue;


/********************** external functions definition ************************/
void app_init(void)
{
 80057d8:	b580      	push	{r7, lr}
 80057da:	b084      	sub	sp, #16
 80057dc:	af02      	add	r7, sp, #8
  ao_ui_init();
 80057de:	f000 fcf3 	bl	80061c8 <ao_ui_init>
  ao_led_init(&led_red, AO_LED_COLOR_RED);
 80057e2:	2100      	movs	r1, #0
 80057e4:	4832      	ldr	r0, [pc, #200]	@ (80058b0 <app_init+0xd8>)
 80057e6:	f000 fb4d 	bl	8005e84 <ao_led_init>
  ao_led_init(&led_green, AO_LED_COLOR_GREEN);
 80057ea:	2101      	movs	r1, #1
 80057ec:	4831      	ldr	r0, [pc, #196]	@ (80058b4 <app_init+0xdc>)
 80057ee:	f000 fb49 	bl	8005e84 <ao_led_init>
  ao_led_init(&led_blue, AO_LED_COLOR_BLUE);
 80057f2:	2102      	movs	r1, #2
 80057f4:	4830      	ldr	r0, [pc, #192]	@ (80058b8 <app_init+0xe0>)
 80057f6:	f000 fb45 	bl	8005e84 <ao_led_init>

  BaseType_t status;

  status = xTaskCreate(task_button, "task_button", 128, NULL, tskIDLE_PRIORITY, NULL);
 80057fa:	2300      	movs	r3, #0
 80057fc:	9301      	str	r3, [sp, #4]
 80057fe:	2300      	movs	r3, #0
 8005800:	9300      	str	r3, [sp, #0]
 8005802:	2300      	movs	r3, #0
 8005804:	2280      	movs	r2, #128	@ 0x80
 8005806:	492d      	ldr	r1, [pc, #180]	@ (80058bc <app_init+0xe4>)
 8005808:	482d      	ldr	r0, [pc, #180]	@ (80058c0 <app_init+0xe8>)
 800580a:	f7fe f971 	bl	8003af0 <xTaskCreate>
 800580e:	6078      	str	r0, [r7, #4]
  while (pdPASS != status)
 8005810:	bf00      	nop
 8005812:	687b      	ldr	r3, [r7, #4]
 8005814:	2b01      	cmp	r3, #1
 8005816:	d1fc      	bne.n	8005812 <app_init+0x3a>
  {
    // error
  }

  LOGGER_INFO("app init");
 8005818:	f7ff fcce 	bl	80051b8 <vPortEnterCritical>
 800581c:	4b29      	ldr	r3, [pc, #164]	@ (80058c4 <app_init+0xec>)
 800581e:	681b      	ldr	r3, [r3, #0]
 8005820:	4a29      	ldr	r2, [pc, #164]	@ (80058c8 <app_init+0xf0>)
 8005822:	213f      	movs	r1, #63	@ 0x3f
 8005824:	4618      	mov	r0, r3
 8005826:	f001 f929 	bl	8006a7c <sniprintf>
 800582a:	4603      	mov	r3, r0
 800582c:	4a27      	ldr	r2, [pc, #156]	@ (80058cc <app_init+0xf4>)
 800582e:	6013      	str	r3, [r2, #0]
 8005830:	4b24      	ldr	r3, [pc, #144]	@ (80058c4 <app_init+0xec>)
 8005832:	681b      	ldr	r3, [r3, #0]
 8005834:	4618      	mov	r0, r3
 8005836:	f000 f853 	bl	80058e0 <logger_log_print_>
 800583a:	f7ff fcef 	bl	800521c <vPortExitCritical>
 800583e:	f7ff fcbb 	bl	80051b8 <vPortEnterCritical>
 8005842:	4b20      	ldr	r3, [pc, #128]	@ (80058c4 <app_init+0xec>)
 8005844:	681b      	ldr	r3, [r3, #0]
 8005846:	4a22      	ldr	r2, [pc, #136]	@ (80058d0 <app_init+0xf8>)
 8005848:	213f      	movs	r1, #63	@ 0x3f
 800584a:	4618      	mov	r0, r3
 800584c:	f001 f916 	bl	8006a7c <sniprintf>
 8005850:	4603      	mov	r3, r0
 8005852:	4a1e      	ldr	r2, [pc, #120]	@ (80058cc <app_init+0xf4>)
 8005854:	6013      	str	r3, [r2, #0]
 8005856:	4b1b      	ldr	r3, [pc, #108]	@ (80058c4 <app_init+0xec>)
 8005858:	681b      	ldr	r3, [r3, #0]
 800585a:	4618      	mov	r0, r3
 800585c:	f000 f840 	bl	80058e0 <logger_log_print_>
 8005860:	f7ff fcdc 	bl	800521c <vPortExitCritical>
 8005864:	f7ff fca8 	bl	80051b8 <vPortEnterCritical>
 8005868:	4b16      	ldr	r3, [pc, #88]	@ (80058c4 <app_init+0xec>)
 800586a:	681b      	ldr	r3, [r3, #0]
 800586c:	4a19      	ldr	r2, [pc, #100]	@ (80058d4 <app_init+0xfc>)
 800586e:	213f      	movs	r1, #63	@ 0x3f
 8005870:	4618      	mov	r0, r3
 8005872:	f001 f903 	bl	8006a7c <sniprintf>
 8005876:	4603      	mov	r3, r0
 8005878:	4a14      	ldr	r2, [pc, #80]	@ (80058cc <app_init+0xf4>)
 800587a:	6013      	str	r3, [r2, #0]
 800587c:	4b11      	ldr	r3, [pc, #68]	@ (80058c4 <app_init+0xec>)
 800587e:	681b      	ldr	r3, [r3, #0]
 8005880:	4618      	mov	r0, r3
 8005882:	f000 f82d 	bl	80058e0 <logger_log_print_>
 8005886:	f7ff fcc9 	bl	800521c <vPortExitCritical>

  cycle_counter_init();
 800588a:	4b13      	ldr	r3, [pc, #76]	@ (80058d8 <app_init+0x100>)
 800588c:	68db      	ldr	r3, [r3, #12]
 800588e:	4a12      	ldr	r2, [pc, #72]	@ (80058d8 <app_init+0x100>)
 8005890:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8005894:	60d3      	str	r3, [r2, #12]
 8005896:	4b11      	ldr	r3, [pc, #68]	@ (80058dc <app_init+0x104>)
 8005898:	2200      	movs	r2, #0
 800589a:	605a      	str	r2, [r3, #4]
 800589c:	4b0f      	ldr	r3, [pc, #60]	@ (80058dc <app_init+0x104>)
 800589e:	681b      	ldr	r3, [r3, #0]
 80058a0:	4a0e      	ldr	r2, [pc, #56]	@ (80058dc <app_init+0x104>)
 80058a2:	f043 0301 	orr.w	r3, r3, #1
 80058a6:	6013      	str	r3, [r2, #0]
}
 80058a8:	bf00      	nop
 80058aa:	3708      	adds	r7, #8
 80058ac:	46bd      	mov	sp, r7
 80058ae:	bd80      	pop	{r7, pc}
 80058b0:	20004750 	.word	0x20004750
 80058b4:	20004758 	.word	0x20004758
 80058b8:	20004760 	.word	0x20004760
 80058bc:	08007ac4 	.word	0x08007ac4
 80058c0:	08005985 	.word	0x08005985
 80058c4:	08007bd4 	.word	0x08007bd4
 80058c8:	08007ad0 	.word	0x08007ad0
 80058cc:	200047a8 	.word	0x200047a8
 80058d0:	08007ad8 	.word	0x08007ad8
 80058d4:	08007ae4 	.word	0x08007ae4
 80058d8:	e000edf0 	.word	0xe000edf0
 80058dc:	e0001000 	.word	0xe0001000

080058e0 <logger_log_print_>:

/********************** external functions definition ************************/

#if 1 == LOGGER_CONFIG_USE_SEMIHOSTING
void logger_log_print_(char* const msg)
{
 80058e0:	b580      	push	{r7, lr}
 80058e2:	b082      	sub	sp, #8
 80058e4:	af00      	add	r7, sp, #0
 80058e6:	6078      	str	r0, [r7, #4]
	printf(msg);
 80058e8:	6878      	ldr	r0, [r7, #4]
 80058ea:	f001 f8b5 	bl	8006a58 <iprintf>
	fflush(stdout);
 80058ee:	4b05      	ldr	r3, [pc, #20]	@ (8005904 <logger_log_print_+0x24>)
 80058f0:	681b      	ldr	r3, [r3, #0]
 80058f2:	689b      	ldr	r3, [r3, #8]
 80058f4:	4618      	mov	r0, r3
 80058f6:	f000 ffd9 	bl	80068ac <fflush>
}
 80058fa:	bf00      	nop
 80058fc:	3708      	adds	r7, #8
 80058fe:	46bd      	mov	sp, r7
 8005900:	bd80      	pop	{r7, pc}
 8005902:	bf00      	nop
 8005904:	20000030 	.word	0x20000030

08005908 <button_init_>:
{
    uint32_t counter;
} button;

static void button_init_(void)
{
 8005908:	b480      	push	{r7}
 800590a:	af00      	add	r7, sp, #0
  button.counter = 0;
 800590c:	4b03      	ldr	r3, [pc, #12]	@ (800591c <button_init_+0x14>)
 800590e:	2200      	movs	r2, #0
 8005910:	601a      	str	r2, [r3, #0]
}
 8005912:	bf00      	nop
 8005914:	46bd      	mov	sp, r7
 8005916:	f85d 7b04 	ldr.w	r7, [sp], #4
 800591a:	4770      	bx	lr
 800591c:	200047ac 	.word	0x200047ac

08005920 <button_process_state_>:

static button_type_t button_process_state_(bool value)
{
 8005920:	b480      	push	{r7}
 8005922:	b085      	sub	sp, #20
 8005924:	af00      	add	r7, sp, #0
 8005926:	4603      	mov	r3, r0
 8005928:	71fb      	strb	r3, [r7, #7]
  button_type_t ret = BUTTON_TYPE_NONE;
 800592a:	2300      	movs	r3, #0
 800592c:	73fb      	strb	r3, [r7, #15]
  if(value)
 800592e:	79fb      	ldrb	r3, [r7, #7]
 8005930:	2b00      	cmp	r3, #0
 8005932:	d005      	beq.n	8005940 <button_process_state_+0x20>
  {
    button.counter += BUTTON_PERIOD_MS_;
 8005934:	4b12      	ldr	r3, [pc, #72]	@ (8005980 <button_process_state_+0x60>)
 8005936:	681b      	ldr	r3, [r3, #0]
 8005938:	3332      	adds	r3, #50	@ 0x32
 800593a:	4a11      	ldr	r2, [pc, #68]	@ (8005980 <button_process_state_+0x60>)
 800593c:	6013      	str	r3, [r2, #0]
 800593e:	e018      	b.n	8005972 <button_process_state_+0x52>
  }
  else
  {
    if(BUTTON_LONG_TIMEOUT_ <= button.counter)
 8005940:	4b0f      	ldr	r3, [pc, #60]	@ (8005980 <button_process_state_+0x60>)
 8005942:	681b      	ldr	r3, [r3, #0]
 8005944:	f5b3 6ffa 	cmp.w	r3, #2000	@ 0x7d0
 8005948:	d302      	bcc.n	8005950 <button_process_state_+0x30>
    {
      ret = BUTTON_TYPE_LONG;
 800594a:	2303      	movs	r3, #3
 800594c:	73fb      	strb	r3, [r7, #15]
 800594e:	e00d      	b.n	800596c <button_process_state_+0x4c>
    }
    else if(BUTTON_SHORT_TIMEOUT_ <= button.counter)
 8005950:	4b0b      	ldr	r3, [pc, #44]	@ (8005980 <button_process_state_+0x60>)
 8005952:	681b      	ldr	r3, [r3, #0]
 8005954:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8005958:	d302      	bcc.n	8005960 <button_process_state_+0x40>
    {
      ret = BUTTON_TYPE_SHORT;
 800595a:	2302      	movs	r3, #2
 800595c:	73fb      	strb	r3, [r7, #15]
 800595e:	e005      	b.n	800596c <button_process_state_+0x4c>
    }
    else if(BUTTON_PULSE_TIMEOUT_ <= button.counter)
 8005960:	4b07      	ldr	r3, [pc, #28]	@ (8005980 <button_process_state_+0x60>)
 8005962:	681b      	ldr	r3, [r3, #0]
 8005964:	2bc7      	cmp	r3, #199	@ 0xc7
 8005966:	d901      	bls.n	800596c <button_process_state_+0x4c>
    {
      ret = BUTTON_TYPE_PULSE;
 8005968:	2301      	movs	r3, #1
 800596a:	73fb      	strb	r3, [r7, #15]
    }
    button.counter = 0;
 800596c:	4b04      	ldr	r3, [pc, #16]	@ (8005980 <button_process_state_+0x60>)
 800596e:	2200      	movs	r2, #0
 8005970:	601a      	str	r2, [r3, #0]
  }
  return ret;
 8005972:	7bfb      	ldrb	r3, [r7, #15]
}
 8005974:	4618      	mov	r0, r3
 8005976:	3714      	adds	r7, #20
 8005978:	46bd      	mov	sp, r7
 800597a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800597e:	4770      	bx	lr
 8005980:	200047ac 	.word	0x200047ac

08005984 <task_button>:

/********************** external functions definition ************************/

void task_button(void* argument)
{
 8005984:	b580      	push	{r7, lr}
 8005986:	b084      	sub	sp, #16
 8005988:	af00      	add	r7, sp, #0
 800598a:	6078      	str	r0, [r7, #4]
  button_init_();
 800598c:	f7ff ffbc 	bl	8005908 <button_init_>

  while(true)
  {
    GPIO_PinState button_state;
    button_state = HAL_GPIO_ReadPin(BUTTON_PORT, BUTTON_PIN);
 8005990:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8005994:	488a      	ldr	r0, [pc, #552]	@ (8005bc0 <task_button+0x23c>)
 8005996:	f7fb fc65 	bl	8001264 <HAL_GPIO_ReadPin>
 800599a:	4603      	mov	r3, r0
 800599c:	73fb      	strb	r3, [r7, #15]

    button_type_t button_type;
    button_type = button_process_state_(button_state);
 800599e:	7bfb      	ldrb	r3, [r7, #15]
 80059a0:	2b00      	cmp	r3, #0
 80059a2:	bf14      	ite	ne
 80059a4:	2301      	movne	r3, #1
 80059a6:	2300      	moveq	r3, #0
 80059a8:	b2db      	uxtb	r3, r3
 80059aa:	4618      	mov	r0, r3
 80059ac:	f7ff ffb8 	bl	8005920 <button_process_state_>
 80059b0:	4603      	mov	r3, r0
 80059b2:	73bb      	strb	r3, [r7, #14]

    switch (button_type) {
 80059b4:	7bbb      	ldrb	r3, [r7, #14]
 80059b6:	2b03      	cmp	r3, #3
 80059b8:	f200 80c3 	bhi.w	8005b42 <task_button+0x1be>
 80059bc:	a201      	add	r2, pc, #4	@ (adr r2, 80059c4 <task_button+0x40>)
 80059be:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80059c2:	bf00      	nop
 80059c4:	08005bb7 	.word	0x08005bb7
 80059c8:	080059d5 	.word	0x080059d5
 80059cc:	08005a4f 	.word	0x08005a4f
 80059d0:	08005ac9 	.word	0x08005ac9
      case BUTTON_TYPE_NONE:
        break;
      case BUTTON_TYPE_PULSE:
        LOGGER_INFO("button pulse");
 80059d4:	f7ff fbf0 	bl	80051b8 <vPortEnterCritical>
 80059d8:	4b7a      	ldr	r3, [pc, #488]	@ (8005bc4 <task_button+0x240>)
 80059da:	681b      	ldr	r3, [r3, #0]
 80059dc:	4a7a      	ldr	r2, [pc, #488]	@ (8005bc8 <task_button+0x244>)
 80059de:	213f      	movs	r1, #63	@ 0x3f
 80059e0:	4618      	mov	r0, r3
 80059e2:	f001 f84b 	bl	8006a7c <sniprintf>
 80059e6:	4603      	mov	r3, r0
 80059e8:	4a78      	ldr	r2, [pc, #480]	@ (8005bcc <task_button+0x248>)
 80059ea:	6013      	str	r3, [r2, #0]
 80059ec:	4b75      	ldr	r3, [pc, #468]	@ (8005bc4 <task_button+0x240>)
 80059ee:	681b      	ldr	r3, [r3, #0]
 80059f0:	4618      	mov	r0, r3
 80059f2:	f7ff ff75 	bl	80058e0 <logger_log_print_>
 80059f6:	f7ff fc11 	bl	800521c <vPortExitCritical>
 80059fa:	f7ff fbdd 	bl	80051b8 <vPortEnterCritical>
 80059fe:	4b71      	ldr	r3, [pc, #452]	@ (8005bc4 <task_button+0x240>)
 8005a00:	681b      	ldr	r3, [r3, #0]
 8005a02:	4a73      	ldr	r2, [pc, #460]	@ (8005bd0 <task_button+0x24c>)
 8005a04:	213f      	movs	r1, #63	@ 0x3f
 8005a06:	4618      	mov	r0, r3
 8005a08:	f001 f838 	bl	8006a7c <sniprintf>
 8005a0c:	4603      	mov	r3, r0
 8005a0e:	4a6f      	ldr	r2, [pc, #444]	@ (8005bcc <task_button+0x248>)
 8005a10:	6013      	str	r3, [r2, #0]
 8005a12:	4b6c      	ldr	r3, [pc, #432]	@ (8005bc4 <task_button+0x240>)
 8005a14:	681b      	ldr	r3, [r3, #0]
 8005a16:	4618      	mov	r0, r3
 8005a18:	f7ff ff62 	bl	80058e0 <logger_log_print_>
 8005a1c:	f7ff fbfe 	bl	800521c <vPortExitCritical>
 8005a20:	f7ff fbca 	bl	80051b8 <vPortEnterCritical>
 8005a24:	4b67      	ldr	r3, [pc, #412]	@ (8005bc4 <task_button+0x240>)
 8005a26:	681b      	ldr	r3, [r3, #0]
 8005a28:	4a6a      	ldr	r2, [pc, #424]	@ (8005bd4 <task_button+0x250>)
 8005a2a:	213f      	movs	r1, #63	@ 0x3f
 8005a2c:	4618      	mov	r0, r3
 8005a2e:	f001 f825 	bl	8006a7c <sniprintf>
 8005a32:	4603      	mov	r3, r0
 8005a34:	4a65      	ldr	r2, [pc, #404]	@ (8005bcc <task_button+0x248>)
 8005a36:	6013      	str	r3, [r2, #0]
 8005a38:	4b62      	ldr	r3, [pc, #392]	@ (8005bc4 <task_button+0x240>)
 8005a3a:	681b      	ldr	r3, [r3, #0]
 8005a3c:	4618      	mov	r0, r3
 8005a3e:	f7ff ff4f 	bl	80058e0 <logger_log_print_>
 8005a42:	f7ff fbeb 	bl	800521c <vPortExitCritical>
        ao_ui_send_event(BUTTON_TYPE_PULSE);
 8005a46:	2001      	movs	r0, #1
 8005a48:	f000 fba6 	bl	8006198 <ao_ui_send_event>
        break;
 8005a4c:	e0b4      	b.n	8005bb8 <task_button+0x234>
      case BUTTON_TYPE_SHORT:
        LOGGER_INFO("button short");
 8005a4e:	f7ff fbb3 	bl	80051b8 <vPortEnterCritical>
 8005a52:	4b5c      	ldr	r3, [pc, #368]	@ (8005bc4 <task_button+0x240>)
 8005a54:	681b      	ldr	r3, [r3, #0]
 8005a56:	4a5c      	ldr	r2, [pc, #368]	@ (8005bc8 <task_button+0x244>)
 8005a58:	213f      	movs	r1, #63	@ 0x3f
 8005a5a:	4618      	mov	r0, r3
 8005a5c:	f001 f80e 	bl	8006a7c <sniprintf>
 8005a60:	4603      	mov	r3, r0
 8005a62:	4a5a      	ldr	r2, [pc, #360]	@ (8005bcc <task_button+0x248>)
 8005a64:	6013      	str	r3, [r2, #0]
 8005a66:	4b57      	ldr	r3, [pc, #348]	@ (8005bc4 <task_button+0x240>)
 8005a68:	681b      	ldr	r3, [r3, #0]
 8005a6a:	4618      	mov	r0, r3
 8005a6c:	f7ff ff38 	bl	80058e0 <logger_log_print_>
 8005a70:	f7ff fbd4 	bl	800521c <vPortExitCritical>
 8005a74:	f7ff fba0 	bl	80051b8 <vPortEnterCritical>
 8005a78:	4b52      	ldr	r3, [pc, #328]	@ (8005bc4 <task_button+0x240>)
 8005a7a:	681b      	ldr	r3, [r3, #0]
 8005a7c:	4a56      	ldr	r2, [pc, #344]	@ (8005bd8 <task_button+0x254>)
 8005a7e:	213f      	movs	r1, #63	@ 0x3f
 8005a80:	4618      	mov	r0, r3
 8005a82:	f000 fffb 	bl	8006a7c <sniprintf>
 8005a86:	4603      	mov	r3, r0
 8005a88:	4a50      	ldr	r2, [pc, #320]	@ (8005bcc <task_button+0x248>)
 8005a8a:	6013      	str	r3, [r2, #0]
 8005a8c:	4b4d      	ldr	r3, [pc, #308]	@ (8005bc4 <task_button+0x240>)
 8005a8e:	681b      	ldr	r3, [r3, #0]
 8005a90:	4618      	mov	r0, r3
 8005a92:	f7ff ff25 	bl	80058e0 <logger_log_print_>
 8005a96:	f7ff fbc1 	bl	800521c <vPortExitCritical>
 8005a9a:	f7ff fb8d 	bl	80051b8 <vPortEnterCritical>
 8005a9e:	4b49      	ldr	r3, [pc, #292]	@ (8005bc4 <task_button+0x240>)
 8005aa0:	681b      	ldr	r3, [r3, #0]
 8005aa2:	4a4c      	ldr	r2, [pc, #304]	@ (8005bd4 <task_button+0x250>)
 8005aa4:	213f      	movs	r1, #63	@ 0x3f
 8005aa6:	4618      	mov	r0, r3
 8005aa8:	f000 ffe8 	bl	8006a7c <sniprintf>
 8005aac:	4603      	mov	r3, r0
 8005aae:	4a47      	ldr	r2, [pc, #284]	@ (8005bcc <task_button+0x248>)
 8005ab0:	6013      	str	r3, [r2, #0]
 8005ab2:	4b44      	ldr	r3, [pc, #272]	@ (8005bc4 <task_button+0x240>)
 8005ab4:	681b      	ldr	r3, [r3, #0]
 8005ab6:	4618      	mov	r0, r3
 8005ab8:	f7ff ff12 	bl	80058e0 <logger_log_print_>
 8005abc:	f7ff fbae 	bl	800521c <vPortExitCritical>
        ao_ui_send_event(BUTTON_TYPE_SHORT);
 8005ac0:	2002      	movs	r0, #2
 8005ac2:	f000 fb69 	bl	8006198 <ao_ui_send_event>
        break;
 8005ac6:	e077      	b.n	8005bb8 <task_button+0x234>
      case BUTTON_TYPE_LONG:
        LOGGER_INFO("button long");
 8005ac8:	f7ff fb76 	bl	80051b8 <vPortEnterCritical>
 8005acc:	4b3d      	ldr	r3, [pc, #244]	@ (8005bc4 <task_button+0x240>)
 8005ace:	681b      	ldr	r3, [r3, #0]
 8005ad0:	4a3d      	ldr	r2, [pc, #244]	@ (8005bc8 <task_button+0x244>)
 8005ad2:	213f      	movs	r1, #63	@ 0x3f
 8005ad4:	4618      	mov	r0, r3
 8005ad6:	f000 ffd1 	bl	8006a7c <sniprintf>
 8005ada:	4603      	mov	r3, r0
 8005adc:	4a3b      	ldr	r2, [pc, #236]	@ (8005bcc <task_button+0x248>)
 8005ade:	6013      	str	r3, [r2, #0]
 8005ae0:	4b38      	ldr	r3, [pc, #224]	@ (8005bc4 <task_button+0x240>)
 8005ae2:	681b      	ldr	r3, [r3, #0]
 8005ae4:	4618      	mov	r0, r3
 8005ae6:	f7ff fefb 	bl	80058e0 <logger_log_print_>
 8005aea:	f7ff fb97 	bl	800521c <vPortExitCritical>
 8005aee:	f7ff fb63 	bl	80051b8 <vPortEnterCritical>
 8005af2:	4b34      	ldr	r3, [pc, #208]	@ (8005bc4 <task_button+0x240>)
 8005af4:	681b      	ldr	r3, [r3, #0]
 8005af6:	4a39      	ldr	r2, [pc, #228]	@ (8005bdc <task_button+0x258>)
 8005af8:	213f      	movs	r1, #63	@ 0x3f
 8005afa:	4618      	mov	r0, r3
 8005afc:	f000 ffbe 	bl	8006a7c <sniprintf>
 8005b00:	4603      	mov	r3, r0
 8005b02:	4a32      	ldr	r2, [pc, #200]	@ (8005bcc <task_button+0x248>)
 8005b04:	6013      	str	r3, [r2, #0]
 8005b06:	4b2f      	ldr	r3, [pc, #188]	@ (8005bc4 <task_button+0x240>)
 8005b08:	681b      	ldr	r3, [r3, #0]
 8005b0a:	4618      	mov	r0, r3
 8005b0c:	f7ff fee8 	bl	80058e0 <logger_log_print_>
 8005b10:	f7ff fb84 	bl	800521c <vPortExitCritical>
 8005b14:	f7ff fb50 	bl	80051b8 <vPortEnterCritical>
 8005b18:	4b2a      	ldr	r3, [pc, #168]	@ (8005bc4 <task_button+0x240>)
 8005b1a:	681b      	ldr	r3, [r3, #0]
 8005b1c:	4a2d      	ldr	r2, [pc, #180]	@ (8005bd4 <task_button+0x250>)
 8005b1e:	213f      	movs	r1, #63	@ 0x3f
 8005b20:	4618      	mov	r0, r3
 8005b22:	f000 ffab 	bl	8006a7c <sniprintf>
 8005b26:	4603      	mov	r3, r0
 8005b28:	4a28      	ldr	r2, [pc, #160]	@ (8005bcc <task_button+0x248>)
 8005b2a:	6013      	str	r3, [r2, #0]
 8005b2c:	4b25      	ldr	r3, [pc, #148]	@ (8005bc4 <task_button+0x240>)
 8005b2e:	681b      	ldr	r3, [r3, #0]
 8005b30:	4618      	mov	r0, r3
 8005b32:	f7ff fed5 	bl	80058e0 <logger_log_print_>
 8005b36:	f7ff fb71 	bl	800521c <vPortExitCritical>
        ao_ui_send_event(BUTTON_TYPE_LONG);
 8005b3a:	2003      	movs	r0, #3
 8005b3c:	f000 fb2c 	bl	8006198 <ao_ui_send_event>
        break;
 8005b40:	e03a      	b.n	8005bb8 <task_button+0x234>
      default:
        LOGGER_INFO("button error");
 8005b42:	f7ff fb39 	bl	80051b8 <vPortEnterCritical>
 8005b46:	4b1f      	ldr	r3, [pc, #124]	@ (8005bc4 <task_button+0x240>)
 8005b48:	681b      	ldr	r3, [r3, #0]
 8005b4a:	4a1f      	ldr	r2, [pc, #124]	@ (8005bc8 <task_button+0x244>)
 8005b4c:	213f      	movs	r1, #63	@ 0x3f
 8005b4e:	4618      	mov	r0, r3
 8005b50:	f000 ff94 	bl	8006a7c <sniprintf>
 8005b54:	4603      	mov	r3, r0
 8005b56:	4a1d      	ldr	r2, [pc, #116]	@ (8005bcc <task_button+0x248>)
 8005b58:	6013      	str	r3, [r2, #0]
 8005b5a:	4b1a      	ldr	r3, [pc, #104]	@ (8005bc4 <task_button+0x240>)
 8005b5c:	681b      	ldr	r3, [r3, #0]
 8005b5e:	4618      	mov	r0, r3
 8005b60:	f7ff febe 	bl	80058e0 <logger_log_print_>
 8005b64:	f7ff fb5a 	bl	800521c <vPortExitCritical>
 8005b68:	f7ff fb26 	bl	80051b8 <vPortEnterCritical>
 8005b6c:	4b15      	ldr	r3, [pc, #84]	@ (8005bc4 <task_button+0x240>)
 8005b6e:	681b      	ldr	r3, [r3, #0]
 8005b70:	4a1b      	ldr	r2, [pc, #108]	@ (8005be0 <task_button+0x25c>)
 8005b72:	213f      	movs	r1, #63	@ 0x3f
 8005b74:	4618      	mov	r0, r3
 8005b76:	f000 ff81 	bl	8006a7c <sniprintf>
 8005b7a:	4603      	mov	r3, r0
 8005b7c:	4a13      	ldr	r2, [pc, #76]	@ (8005bcc <task_button+0x248>)
 8005b7e:	6013      	str	r3, [r2, #0]
 8005b80:	4b10      	ldr	r3, [pc, #64]	@ (8005bc4 <task_button+0x240>)
 8005b82:	681b      	ldr	r3, [r3, #0]
 8005b84:	4618      	mov	r0, r3
 8005b86:	f7ff feab 	bl	80058e0 <logger_log_print_>
 8005b8a:	f7ff fb47 	bl	800521c <vPortExitCritical>
 8005b8e:	f7ff fb13 	bl	80051b8 <vPortEnterCritical>
 8005b92:	4b0c      	ldr	r3, [pc, #48]	@ (8005bc4 <task_button+0x240>)
 8005b94:	681b      	ldr	r3, [r3, #0]
 8005b96:	4a0f      	ldr	r2, [pc, #60]	@ (8005bd4 <task_button+0x250>)
 8005b98:	213f      	movs	r1, #63	@ 0x3f
 8005b9a:	4618      	mov	r0, r3
 8005b9c:	f000 ff6e 	bl	8006a7c <sniprintf>
 8005ba0:	4603      	mov	r3, r0
 8005ba2:	4a0a      	ldr	r2, [pc, #40]	@ (8005bcc <task_button+0x248>)
 8005ba4:	6013      	str	r3, [r2, #0]
 8005ba6:	4b07      	ldr	r3, [pc, #28]	@ (8005bc4 <task_button+0x240>)
 8005ba8:	681b      	ldr	r3, [r3, #0]
 8005baa:	4618      	mov	r0, r3
 8005bac:	f7ff fe98 	bl	80058e0 <logger_log_print_>
 8005bb0:	f7ff fb34 	bl	800521c <vPortExitCritical>
        break;
 8005bb4:	e000      	b.n	8005bb8 <task_button+0x234>
        break;
 8005bb6:	bf00      	nop
    }

    vTaskDelay((TickType_t)(TASK_PERIOD_MS_ / portTICK_PERIOD_MS));
 8005bb8:	2032      	movs	r0, #50	@ 0x32
 8005bba:	f7fe f8e9 	bl	8003d90 <vTaskDelay>
  {
 8005bbe:	e6e7      	b.n	8005990 <task_button+0xc>
 8005bc0:	40020800 	.word	0x40020800
 8005bc4:	08007bd4 	.word	0x08007bd4
 8005bc8:	08007ae8 	.word	0x08007ae8
 8005bcc:	200047a8 	.word	0x200047a8
 8005bd0:	08007af0 	.word	0x08007af0
 8005bd4:	08007b00 	.word	0x08007b00
 8005bd8:	08007b04 	.word	0x08007b04
 8005bdc:	08007b14 	.word	0x08007b14
 8005be0:	08007b20 	.word	0x08007b20

08005be4 <task_led>:
/********************** internal functions definition ************************/

/********************** external functions definition ************************/

void task_led(void *argument)
{
 8005be4:	b580      	push	{r7, lr}
 8005be6:	b088      	sub	sp, #32
 8005be8:	af00      	add	r7, sp, #0
 8005bea:	6078      	str	r0, [r7, #4]
	ao_led_handle_t* hao = (ao_led_handle_t*)argument;
 8005bec:	687b      	ldr	r3, [r7, #4]
 8005bee:	61fb      	str	r3, [r7, #28]
	while (true)
	{
		ao_led_message_t msg;
		if (pdPASS == xQueueReceive(hao->hqueue, &msg, portMAX_DELAY))
 8005bf0:	69fb      	ldr	r3, [r7, #28]
 8005bf2:	685b      	ldr	r3, [r3, #4]
 8005bf4:	f107 010c 	add.w	r1, r7, #12
 8005bf8:	f04f 32ff 	mov.w	r2, #4294967295
 8005bfc:	4618      	mov	r0, r3
 8005bfe:	f7fd fcc7 	bl	8003590 <xQueueReceive>
 8005c02:	4603      	mov	r3, r0
 8005c04:	2b01      	cmp	r3, #1
 8005c06:	d1f3      	bne.n	8005bf0 <task_led+0xc>
		{
			switch (msg.action) {
 8005c08:	7d3b      	ldrb	r3, [r7, #20]
 8005c0a:	2b02      	cmp	r3, #2
 8005c0c:	f000 808e 	beq.w	8005d2c <task_led+0x148>
 8005c10:	2b02      	cmp	r3, #2
 8005c12:	f300 8110 	bgt.w	8005e36 <task_led+0x252>
 8005c16:	2b00      	cmp	r3, #0
 8005c18:	d002      	beq.n	8005c20 <task_led+0x3c>
 8005c1a:	2b01      	cmp	r3, #1
 8005c1c:	d043      	beq.n	8005ca6 <task_led+0xc2>
				LOGGER_INFO("Led %s off", led_color_to_string[hao->color]);
				msg.callback(msg.id);
				break;

			default:
				break;
 8005c1e:	e10a      	b.n	8005e36 <task_led+0x252>
				LOGGER_INFO("Led %s on", led_color_to_string[hao->color]);
 8005c20:	f7ff faca 	bl	80051b8 <vPortEnterCritical>
 8005c24:	4b85      	ldr	r3, [pc, #532]	@ (8005e3c <task_led+0x258>)
 8005c26:	681b      	ldr	r3, [r3, #0]
 8005c28:	4a85      	ldr	r2, [pc, #532]	@ (8005e40 <task_led+0x25c>)
 8005c2a:	213f      	movs	r1, #63	@ 0x3f
 8005c2c:	4618      	mov	r0, r3
 8005c2e:	f000 ff25 	bl	8006a7c <sniprintf>
 8005c32:	4603      	mov	r3, r0
 8005c34:	4a83      	ldr	r2, [pc, #524]	@ (8005e44 <task_led+0x260>)
 8005c36:	6013      	str	r3, [r2, #0]
 8005c38:	4b80      	ldr	r3, [pc, #512]	@ (8005e3c <task_led+0x258>)
 8005c3a:	681b      	ldr	r3, [r3, #0]
 8005c3c:	4618      	mov	r0, r3
 8005c3e:	f7ff fe4f 	bl	80058e0 <logger_log_print_>
 8005c42:	f7ff faeb 	bl	800521c <vPortExitCritical>
 8005c46:	f7ff fab7 	bl	80051b8 <vPortEnterCritical>
 8005c4a:	4b7c      	ldr	r3, [pc, #496]	@ (8005e3c <task_led+0x258>)
 8005c4c:	6818      	ldr	r0, [r3, #0]
 8005c4e:	69fb      	ldr	r3, [r7, #28]
 8005c50:	781b      	ldrb	r3, [r3, #0]
 8005c52:	461a      	mov	r2, r3
 8005c54:	4b7c      	ldr	r3, [pc, #496]	@ (8005e48 <task_led+0x264>)
 8005c56:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005c5a:	4a7c      	ldr	r2, [pc, #496]	@ (8005e4c <task_led+0x268>)
 8005c5c:	213f      	movs	r1, #63	@ 0x3f
 8005c5e:	f000 ff0d 	bl	8006a7c <sniprintf>
 8005c62:	4603      	mov	r3, r0
 8005c64:	4a77      	ldr	r2, [pc, #476]	@ (8005e44 <task_led+0x260>)
 8005c66:	6013      	str	r3, [r2, #0]
 8005c68:	4b74      	ldr	r3, [pc, #464]	@ (8005e3c <task_led+0x258>)
 8005c6a:	681b      	ldr	r3, [r3, #0]
 8005c6c:	4618      	mov	r0, r3
 8005c6e:	f7ff fe37 	bl	80058e0 <logger_log_print_>
 8005c72:	f7ff fad3 	bl	800521c <vPortExitCritical>
 8005c76:	f7ff fa9f 	bl	80051b8 <vPortEnterCritical>
 8005c7a:	4b70      	ldr	r3, [pc, #448]	@ (8005e3c <task_led+0x258>)
 8005c7c:	681b      	ldr	r3, [r3, #0]
 8005c7e:	4a74      	ldr	r2, [pc, #464]	@ (8005e50 <task_led+0x26c>)
 8005c80:	213f      	movs	r1, #63	@ 0x3f
 8005c82:	4618      	mov	r0, r3
 8005c84:	f000 fefa 	bl	8006a7c <sniprintf>
 8005c88:	4603      	mov	r3, r0
 8005c8a:	4a6e      	ldr	r2, [pc, #440]	@ (8005e44 <task_led+0x260>)
 8005c8c:	6013      	str	r3, [r2, #0]
 8005c8e:	4b6b      	ldr	r3, [pc, #428]	@ (8005e3c <task_led+0x258>)
 8005c90:	681b      	ldr	r3, [r3, #0]
 8005c92:	4618      	mov	r0, r3
 8005c94:	f7ff fe24 	bl	80058e0 <logger_log_print_>
 8005c98:	f7ff fac0 	bl	800521c <vPortExitCritical>
				msg.callback(msg.id);
 8005c9c:	693b      	ldr	r3, [r7, #16]
 8005c9e:	68fa      	ldr	r2, [r7, #12]
 8005ca0:	4610      	mov	r0, r2
 8005ca2:	4798      	blx	r3
				break;
 8005ca4:	e0c8      	b.n	8005e38 <task_led+0x254>
				LOGGER_INFO("Led %s off", led_color_to_string[hao->color]);
 8005ca6:	f7ff fa87 	bl	80051b8 <vPortEnterCritical>
 8005caa:	4b64      	ldr	r3, [pc, #400]	@ (8005e3c <task_led+0x258>)
 8005cac:	681b      	ldr	r3, [r3, #0]
 8005cae:	4a64      	ldr	r2, [pc, #400]	@ (8005e40 <task_led+0x25c>)
 8005cb0:	213f      	movs	r1, #63	@ 0x3f
 8005cb2:	4618      	mov	r0, r3
 8005cb4:	f000 fee2 	bl	8006a7c <sniprintf>
 8005cb8:	4603      	mov	r3, r0
 8005cba:	4a62      	ldr	r2, [pc, #392]	@ (8005e44 <task_led+0x260>)
 8005cbc:	6013      	str	r3, [r2, #0]
 8005cbe:	4b5f      	ldr	r3, [pc, #380]	@ (8005e3c <task_led+0x258>)
 8005cc0:	681b      	ldr	r3, [r3, #0]
 8005cc2:	4618      	mov	r0, r3
 8005cc4:	f7ff fe0c 	bl	80058e0 <logger_log_print_>
 8005cc8:	f7ff faa8 	bl	800521c <vPortExitCritical>
 8005ccc:	f7ff fa74 	bl	80051b8 <vPortEnterCritical>
 8005cd0:	4b5a      	ldr	r3, [pc, #360]	@ (8005e3c <task_led+0x258>)
 8005cd2:	6818      	ldr	r0, [r3, #0]
 8005cd4:	69fb      	ldr	r3, [r7, #28]
 8005cd6:	781b      	ldrb	r3, [r3, #0]
 8005cd8:	461a      	mov	r2, r3
 8005cda:	4b5b      	ldr	r3, [pc, #364]	@ (8005e48 <task_led+0x264>)
 8005cdc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005ce0:	4a5c      	ldr	r2, [pc, #368]	@ (8005e54 <task_led+0x270>)
 8005ce2:	213f      	movs	r1, #63	@ 0x3f
 8005ce4:	f000 feca 	bl	8006a7c <sniprintf>
 8005ce8:	4603      	mov	r3, r0
 8005cea:	4a56      	ldr	r2, [pc, #344]	@ (8005e44 <task_led+0x260>)
 8005cec:	6013      	str	r3, [r2, #0]
 8005cee:	4b53      	ldr	r3, [pc, #332]	@ (8005e3c <task_led+0x258>)
 8005cf0:	681b      	ldr	r3, [r3, #0]
 8005cf2:	4618      	mov	r0, r3
 8005cf4:	f7ff fdf4 	bl	80058e0 <logger_log_print_>
 8005cf8:	f7ff fa90 	bl	800521c <vPortExitCritical>
 8005cfc:	f7ff fa5c 	bl	80051b8 <vPortEnterCritical>
 8005d00:	4b4e      	ldr	r3, [pc, #312]	@ (8005e3c <task_led+0x258>)
 8005d02:	681b      	ldr	r3, [r3, #0]
 8005d04:	4a52      	ldr	r2, [pc, #328]	@ (8005e50 <task_led+0x26c>)
 8005d06:	213f      	movs	r1, #63	@ 0x3f
 8005d08:	4618      	mov	r0, r3
 8005d0a:	f000 feb7 	bl	8006a7c <sniprintf>
 8005d0e:	4603      	mov	r3, r0
 8005d10:	4a4c      	ldr	r2, [pc, #304]	@ (8005e44 <task_led+0x260>)
 8005d12:	6013      	str	r3, [r2, #0]
 8005d14:	4b49      	ldr	r3, [pc, #292]	@ (8005e3c <task_led+0x258>)
 8005d16:	681b      	ldr	r3, [r3, #0]
 8005d18:	4618      	mov	r0, r3
 8005d1a:	f7ff fde1 	bl	80058e0 <logger_log_print_>
 8005d1e:	f7ff fa7d 	bl	800521c <vPortExitCritical>
				msg.callback(msg.id);
 8005d22:	693b      	ldr	r3, [r7, #16]
 8005d24:	68fa      	ldr	r2, [r7, #12]
 8005d26:	4610      	mov	r0, r2
 8005d28:	4798      	blx	r3
				break;
 8005d2a:	e085      	b.n	8005e38 <task_led+0x254>
				LOGGER_INFO("Led %s on", led_color_to_string[hao->color]);
 8005d2c:	f7ff fa44 	bl	80051b8 <vPortEnterCritical>
 8005d30:	4b42      	ldr	r3, [pc, #264]	@ (8005e3c <task_led+0x258>)
 8005d32:	681b      	ldr	r3, [r3, #0]
 8005d34:	4a42      	ldr	r2, [pc, #264]	@ (8005e40 <task_led+0x25c>)
 8005d36:	213f      	movs	r1, #63	@ 0x3f
 8005d38:	4618      	mov	r0, r3
 8005d3a:	f000 fe9f 	bl	8006a7c <sniprintf>
 8005d3e:	4603      	mov	r3, r0
 8005d40:	4a40      	ldr	r2, [pc, #256]	@ (8005e44 <task_led+0x260>)
 8005d42:	6013      	str	r3, [r2, #0]
 8005d44:	4b3d      	ldr	r3, [pc, #244]	@ (8005e3c <task_led+0x258>)
 8005d46:	681b      	ldr	r3, [r3, #0]
 8005d48:	4618      	mov	r0, r3
 8005d4a:	f7ff fdc9 	bl	80058e0 <logger_log_print_>
 8005d4e:	f7ff fa65 	bl	800521c <vPortExitCritical>
 8005d52:	f7ff fa31 	bl	80051b8 <vPortEnterCritical>
 8005d56:	4b39      	ldr	r3, [pc, #228]	@ (8005e3c <task_led+0x258>)
 8005d58:	6818      	ldr	r0, [r3, #0]
 8005d5a:	69fb      	ldr	r3, [r7, #28]
 8005d5c:	781b      	ldrb	r3, [r3, #0]
 8005d5e:	461a      	mov	r2, r3
 8005d60:	4b39      	ldr	r3, [pc, #228]	@ (8005e48 <task_led+0x264>)
 8005d62:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005d66:	4a39      	ldr	r2, [pc, #228]	@ (8005e4c <task_led+0x268>)
 8005d68:	213f      	movs	r1, #63	@ 0x3f
 8005d6a:	f000 fe87 	bl	8006a7c <sniprintf>
 8005d6e:	4603      	mov	r3, r0
 8005d70:	4a34      	ldr	r2, [pc, #208]	@ (8005e44 <task_led+0x260>)
 8005d72:	6013      	str	r3, [r2, #0]
 8005d74:	4b31      	ldr	r3, [pc, #196]	@ (8005e3c <task_led+0x258>)
 8005d76:	681b      	ldr	r3, [r3, #0]
 8005d78:	4618      	mov	r0, r3
 8005d7a:	f7ff fdb1 	bl	80058e0 <logger_log_print_>
 8005d7e:	f7ff fa4d 	bl	800521c <vPortExitCritical>
 8005d82:	f7ff fa19 	bl	80051b8 <vPortEnterCritical>
 8005d86:	4b2d      	ldr	r3, [pc, #180]	@ (8005e3c <task_led+0x258>)
 8005d88:	681b      	ldr	r3, [r3, #0]
 8005d8a:	4a31      	ldr	r2, [pc, #196]	@ (8005e50 <task_led+0x26c>)
 8005d8c:	213f      	movs	r1, #63	@ 0x3f
 8005d8e:	4618      	mov	r0, r3
 8005d90:	f000 fe74 	bl	8006a7c <sniprintf>
 8005d94:	4603      	mov	r3, r0
 8005d96:	4a2b      	ldr	r2, [pc, #172]	@ (8005e44 <task_led+0x260>)
 8005d98:	6013      	str	r3, [r2, #0]
 8005d9a:	4b28      	ldr	r3, [pc, #160]	@ (8005e3c <task_led+0x258>)
 8005d9c:	681b      	ldr	r3, [r3, #0]
 8005d9e:	4618      	mov	r0, r3
 8005da0:	f7ff fd9e 	bl	80058e0 <logger_log_print_>
 8005da4:	f7ff fa3a 	bl	800521c <vPortExitCritical>
				vTaskDelay((TickType_t)((msg.value) / portTICK_PERIOD_MS));
 8005da8:	69bb      	ldr	r3, [r7, #24]
 8005daa:	4618      	mov	r0, r3
 8005dac:	f7fd fff0 	bl	8003d90 <vTaskDelay>
				LOGGER_INFO("Led %s off", led_color_to_string[hao->color]);
 8005db0:	f7ff fa02 	bl	80051b8 <vPortEnterCritical>
 8005db4:	4b21      	ldr	r3, [pc, #132]	@ (8005e3c <task_led+0x258>)
 8005db6:	681b      	ldr	r3, [r3, #0]
 8005db8:	4a21      	ldr	r2, [pc, #132]	@ (8005e40 <task_led+0x25c>)
 8005dba:	213f      	movs	r1, #63	@ 0x3f
 8005dbc:	4618      	mov	r0, r3
 8005dbe:	f000 fe5d 	bl	8006a7c <sniprintf>
 8005dc2:	4603      	mov	r3, r0
 8005dc4:	4a1f      	ldr	r2, [pc, #124]	@ (8005e44 <task_led+0x260>)
 8005dc6:	6013      	str	r3, [r2, #0]
 8005dc8:	4b1c      	ldr	r3, [pc, #112]	@ (8005e3c <task_led+0x258>)
 8005dca:	681b      	ldr	r3, [r3, #0]
 8005dcc:	4618      	mov	r0, r3
 8005dce:	f7ff fd87 	bl	80058e0 <logger_log_print_>
 8005dd2:	f7ff fa23 	bl	800521c <vPortExitCritical>
 8005dd6:	f7ff f9ef 	bl	80051b8 <vPortEnterCritical>
 8005dda:	4b18      	ldr	r3, [pc, #96]	@ (8005e3c <task_led+0x258>)
 8005ddc:	6818      	ldr	r0, [r3, #0]
 8005dde:	69fb      	ldr	r3, [r7, #28]
 8005de0:	781b      	ldrb	r3, [r3, #0]
 8005de2:	461a      	mov	r2, r3
 8005de4:	4b18      	ldr	r3, [pc, #96]	@ (8005e48 <task_led+0x264>)
 8005de6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005dea:	4a1a      	ldr	r2, [pc, #104]	@ (8005e54 <task_led+0x270>)
 8005dec:	213f      	movs	r1, #63	@ 0x3f
 8005dee:	f000 fe45 	bl	8006a7c <sniprintf>
 8005df2:	4603      	mov	r3, r0
 8005df4:	4a13      	ldr	r2, [pc, #76]	@ (8005e44 <task_led+0x260>)
 8005df6:	6013      	str	r3, [r2, #0]
 8005df8:	4b10      	ldr	r3, [pc, #64]	@ (8005e3c <task_led+0x258>)
 8005dfa:	681b      	ldr	r3, [r3, #0]
 8005dfc:	4618      	mov	r0, r3
 8005dfe:	f7ff fd6f 	bl	80058e0 <logger_log_print_>
 8005e02:	f7ff fa0b 	bl	800521c <vPortExitCritical>
 8005e06:	f7ff f9d7 	bl	80051b8 <vPortEnterCritical>
 8005e0a:	4b0c      	ldr	r3, [pc, #48]	@ (8005e3c <task_led+0x258>)
 8005e0c:	681b      	ldr	r3, [r3, #0]
 8005e0e:	4a10      	ldr	r2, [pc, #64]	@ (8005e50 <task_led+0x26c>)
 8005e10:	213f      	movs	r1, #63	@ 0x3f
 8005e12:	4618      	mov	r0, r3
 8005e14:	f000 fe32 	bl	8006a7c <sniprintf>
 8005e18:	4603      	mov	r3, r0
 8005e1a:	4a0a      	ldr	r2, [pc, #40]	@ (8005e44 <task_led+0x260>)
 8005e1c:	6013      	str	r3, [r2, #0]
 8005e1e:	4b07      	ldr	r3, [pc, #28]	@ (8005e3c <task_led+0x258>)
 8005e20:	681b      	ldr	r3, [r3, #0]
 8005e22:	4618      	mov	r0, r3
 8005e24:	f7ff fd5c 	bl	80058e0 <logger_log_print_>
 8005e28:	f7ff f9f8 	bl	800521c <vPortExitCritical>
				msg.callback(msg.id);
 8005e2c:	693b      	ldr	r3, [r7, #16]
 8005e2e:	68fa      	ldr	r2, [r7, #12]
 8005e30:	4610      	mov	r0, r2
 8005e32:	4798      	blx	r3
				break;
 8005e34:	e000      	b.n	8005e38 <task_led+0x254>
				break;
 8005e36:	bf00      	nop
	{
 8005e38:	e6da      	b.n	8005bf0 <task_led+0xc>
 8005e3a:	bf00      	nop
 8005e3c:	08007bd4 	.word	0x08007bd4
 8005e40:	08007b44 	.word	0x08007b44
 8005e44:	200047a8 	.word	0x200047a8
 8005e48:	20000010 	.word	0x20000010
 8005e4c:	08007b4c 	.word	0x08007b4c
 8005e50:	08007b58 	.word	0x08007b58
 8005e54:	08007b5c 	.word	0x08007b5c

08005e58 <ao_led_send>:
		}
	}
}

bool ao_led_send(ao_led_handle_t* hao, ao_led_message_t* msg)
{
 8005e58:	b580      	push	{r7, lr}
 8005e5a:	b082      	sub	sp, #8
 8005e5c:	af00      	add	r7, sp, #0
 8005e5e:	6078      	str	r0, [r7, #4]
 8005e60:	6039      	str	r1, [r7, #0]
  return (pdPASS == xQueueSend(hao->hqueue, (void*)msg, 0));
 8005e62:	687b      	ldr	r3, [r7, #4]
 8005e64:	6858      	ldr	r0, [r3, #4]
 8005e66:	2300      	movs	r3, #0
 8005e68:	2200      	movs	r2, #0
 8005e6a:	6839      	ldr	r1, [r7, #0]
 8005e6c:	f7fd f9f0 	bl	8003250 <xQueueGenericSend>
 8005e70:	4603      	mov	r3, r0
 8005e72:	2b01      	cmp	r3, #1
 8005e74:	bf0c      	ite	eq
 8005e76:	2301      	moveq	r3, #1
 8005e78:	2300      	movne	r3, #0
 8005e7a:	b2db      	uxtb	r3, r3
}
 8005e7c:	4618      	mov	r0, r3
 8005e7e:	3708      	adds	r7, #8
 8005e80:	46bd      	mov	sp, r7
 8005e82:	bd80      	pop	{r7, pc}

08005e84 <ao_led_init>:

void ao_led_init(ao_led_handle_t* hao, ao_led_color color)
{
 8005e84:	b580      	push	{r7, lr}
 8005e86:	b086      	sub	sp, #24
 8005e88:	af02      	add	r7, sp, #8
 8005e8a:	6078      	str	r0, [r7, #4]
 8005e8c:	460b      	mov	r3, r1
 8005e8e:	70fb      	strb	r3, [r7, #3]
  hao->color = color;
 8005e90:	687b      	ldr	r3, [r7, #4]
 8005e92:	78fa      	ldrb	r2, [r7, #3]
 8005e94:	701a      	strb	r2, [r3, #0]

  hao->hqueue = xQueueCreate(QUEUE_LENGTH_, QUEUE_ITEM_SIZE_);
 8005e96:	2200      	movs	r2, #0
 8005e98:	2110      	movs	r1, #16
 8005e9a:	2001      	movs	r0, #1
 8005e9c:	f7fd f97d 	bl	800319a <xQueueGenericCreate>
 8005ea0:	4602      	mov	r2, r0
 8005ea2:	687b      	ldr	r3, [r7, #4]
 8005ea4:	605a      	str	r2, [r3, #4]
  while(NULL == hao->hqueue)
 8005ea6:	bf00      	nop
 8005ea8:	687b      	ldr	r3, [r7, #4]
 8005eaa:	685b      	ldr	r3, [r3, #4]
 8005eac:	2b00      	cmp	r3, #0
 8005eae:	d0fb      	beq.n	8005ea8 <ao_led_init+0x24>
  {
    // error
  }

  BaseType_t status;
  status = xTaskCreate(task_led, "task_ao_led", 128, (void* const)hao, tskIDLE_PRIORITY, NULL);
 8005eb0:	2300      	movs	r3, #0
 8005eb2:	9301      	str	r3, [sp, #4]
 8005eb4:	2300      	movs	r3, #0
 8005eb6:	9300      	str	r3, [sp, #0]
 8005eb8:	687b      	ldr	r3, [r7, #4]
 8005eba:	2280      	movs	r2, #128	@ 0x80
 8005ebc:	4906      	ldr	r1, [pc, #24]	@ (8005ed8 <ao_led_init+0x54>)
 8005ebe:	4807      	ldr	r0, [pc, #28]	@ (8005edc <ao_led_init+0x58>)
 8005ec0:	f7fd fe16 	bl	8003af0 <xTaskCreate>
 8005ec4:	60f8      	str	r0, [r7, #12]
  while (pdPASS != status)
 8005ec6:	bf00      	nop
 8005ec8:	68fb      	ldr	r3, [r7, #12]
 8005eca:	2b01      	cmp	r3, #1
 8005ecc:	d1fc      	bne.n	8005ec8 <ao_led_init+0x44>
  {
    // error
  }
}
 8005ece:	bf00      	nop
 8005ed0:	bf00      	nop
 8005ed2:	3710      	adds	r7, #16
 8005ed4:	46bd      	mov	sp, r7
 8005ed6:	bd80      	pop	{r7, pc}
 8005ed8:	08007b68 	.word	0x08007b68
 8005edc:	08005be5 	.word	0x08005be5

08005ee0 <callback_>:
/********************** internal functions definition ************************/

/********************** external functions definition ************************/

static void callback_(int id)
{
 8005ee0:	b580      	push	{r7, lr}
 8005ee2:	b082      	sub	sp, #8
 8005ee4:	af00      	add	r7, sp, #0
 8005ee6:	6078      	str	r0, [r7, #4]
  LOGGER_INFO("callback: %d", id);
 8005ee8:	f7ff f966 	bl	80051b8 <vPortEnterCritical>
 8005eec:	4b1d      	ldr	r3, [pc, #116]	@ (8005f64 <callback_+0x84>)
 8005eee:	681b      	ldr	r3, [r3, #0]
 8005ef0:	4a1d      	ldr	r2, [pc, #116]	@ (8005f68 <callback_+0x88>)
 8005ef2:	213f      	movs	r1, #63	@ 0x3f
 8005ef4:	4618      	mov	r0, r3
 8005ef6:	f000 fdc1 	bl	8006a7c <sniprintf>
 8005efa:	4603      	mov	r3, r0
 8005efc:	4a1b      	ldr	r2, [pc, #108]	@ (8005f6c <callback_+0x8c>)
 8005efe:	6013      	str	r3, [r2, #0]
 8005f00:	4b18      	ldr	r3, [pc, #96]	@ (8005f64 <callback_+0x84>)
 8005f02:	681b      	ldr	r3, [r3, #0]
 8005f04:	4618      	mov	r0, r3
 8005f06:	f7ff fceb 	bl	80058e0 <logger_log_print_>
 8005f0a:	f7ff f987 	bl	800521c <vPortExitCritical>
 8005f0e:	f7ff f953 	bl	80051b8 <vPortEnterCritical>
 8005f12:	4b14      	ldr	r3, [pc, #80]	@ (8005f64 <callback_+0x84>)
 8005f14:	6818      	ldr	r0, [r3, #0]
 8005f16:	687b      	ldr	r3, [r7, #4]
 8005f18:	4a15      	ldr	r2, [pc, #84]	@ (8005f70 <callback_+0x90>)
 8005f1a:	213f      	movs	r1, #63	@ 0x3f
 8005f1c:	f000 fdae 	bl	8006a7c <sniprintf>
 8005f20:	4603      	mov	r3, r0
 8005f22:	4a12      	ldr	r2, [pc, #72]	@ (8005f6c <callback_+0x8c>)
 8005f24:	6013      	str	r3, [r2, #0]
 8005f26:	4b0f      	ldr	r3, [pc, #60]	@ (8005f64 <callback_+0x84>)
 8005f28:	681b      	ldr	r3, [r3, #0]
 8005f2a:	4618      	mov	r0, r3
 8005f2c:	f7ff fcd8 	bl	80058e0 <logger_log_print_>
 8005f30:	f7ff f974 	bl	800521c <vPortExitCritical>
 8005f34:	f7ff f940 	bl	80051b8 <vPortEnterCritical>
 8005f38:	4b0a      	ldr	r3, [pc, #40]	@ (8005f64 <callback_+0x84>)
 8005f3a:	681b      	ldr	r3, [r3, #0]
 8005f3c:	4a0d      	ldr	r2, [pc, #52]	@ (8005f74 <callback_+0x94>)
 8005f3e:	213f      	movs	r1, #63	@ 0x3f
 8005f40:	4618      	mov	r0, r3
 8005f42:	f000 fd9b 	bl	8006a7c <sniprintf>
 8005f46:	4603      	mov	r3, r0
 8005f48:	4a08      	ldr	r2, [pc, #32]	@ (8005f6c <callback_+0x8c>)
 8005f4a:	6013      	str	r3, [r2, #0]
 8005f4c:	4b05      	ldr	r3, [pc, #20]	@ (8005f64 <callback_+0x84>)
 8005f4e:	681b      	ldr	r3, [r3, #0]
 8005f50:	4618      	mov	r0, r3
 8005f52:	f7ff fcc5 	bl	80058e0 <logger_log_print_>
 8005f56:	f7ff f961 	bl	800521c <vPortExitCritical>
}
 8005f5a:	bf00      	nop
 8005f5c:	3708      	adds	r7, #8
 8005f5e:	46bd      	mov	sp, r7
 8005f60:	bd80      	pop	{r7, pc}
 8005f62:	bf00      	nop
 8005f64:	08007bd4 	.word	0x08007bd4
 8005f68:	08007b74 	.word	0x08007b74
 8005f6c:	200047a8 	.word	0x200047a8
 8005f70:	08007b7c 	.word	0x08007b7c
 8005f74:	08007b8c 	.word	0x08007b8c

08005f78 <task_ui>:

void task_ui(void *argument)
{
 8005f78:	b580      	push	{r7, lr}
 8005f7a:	b088      	sub	sp, #32
 8005f7c:	af00      	add	r7, sp, #0
 8005f7e:	6078      	str	r0, [r7, #4]
	int id = 0;
 8005f80:	2300      	movs	r3, #0
 8005f82:	61fb      	str	r3, [r7, #28]

	ao_led_send(&led_red, AO_LED_MESSAGE_OFF);
 8005f84:	2101      	movs	r1, #1
 8005f86:	4878      	ldr	r0, [pc, #480]	@ (8006168 <task_ui+0x1f0>)
 8005f88:	f7ff ff66 	bl	8005e58 <ao_led_send>
	ao_led_send(&led_green, AO_LED_MESSAGE_OFF);
 8005f8c:	2101      	movs	r1, #1
 8005f8e:	4877      	ldr	r0, [pc, #476]	@ (800616c <task_ui+0x1f4>)
 8005f90:	f7ff ff62 	bl	8005e58 <ao_led_send>
	ao_led_send(&led_blue, AO_LED_MESSAGE_OFF);
 8005f94:	2101      	movs	r1, #1
 8005f96:	4876      	ldr	r0, [pc, #472]	@ (8006170 <task_ui+0x1f8>)
 8005f98:	f7ff ff5e 	bl	8005e58 <ao_led_send>

  while (true)
  {
	ao_led_message_t led_msg;
	led_msg.callback = callback_;
 8005f9c:	4b75      	ldr	r3, [pc, #468]	@ (8006174 <task_ui+0x1fc>)
 8005f9e:	613b      	str	r3, [r7, #16]
	led_msg.id = ++id;
 8005fa0:	69fb      	ldr	r3, [r7, #28]
 8005fa2:	3301      	adds	r3, #1
 8005fa4:	61fb      	str	r3, [r7, #28]
 8005fa6:	69fb      	ldr	r3, [r7, #28]
 8005fa8:	60fb      	str	r3, [r7, #12]
	led_msg.action = AO_LED_MESSAGE_BLINK;
 8005faa:	2302      	movs	r3, #2
 8005fac:	753b      	strb	r3, [r7, #20]
	led_msg.value = 1000;
 8005fae:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8005fb2:	61bb      	str	r3, [r7, #24]

	msg_event_t event_msg;

	if (pdPASS == xQueueReceive(hao_.hqueue, &event_msg, portMAX_DELAY))
 8005fb4:	4b70      	ldr	r3, [pc, #448]	@ (8006178 <task_ui+0x200>)
 8005fb6:	681b      	ldr	r3, [r3, #0]
 8005fb8:	f107 010b 	add.w	r1, r7, #11
 8005fbc:	f04f 32ff 	mov.w	r2, #4294967295
 8005fc0:	4618      	mov	r0, r3
 8005fc2:	f7fd fae5 	bl	8003590 <xQueueReceive>
 8005fc6:	4603      	mov	r3, r0
 8005fc8:	2b01      	cmp	r3, #1
 8005fca:	d1e7      	bne.n	8005f9c <task_ui+0x24>
	{
	  switch (event_msg)
 8005fcc:	7afb      	ldrb	r3, [r7, #11]
 8005fce:	2b02      	cmp	r3, #2
 8005fd0:	f000 8088 	beq.w	80060e4 <task_ui+0x16c>
 8005fd4:	2b02      	cmp	r3, #2
 8005fd6:	f300 80c5 	bgt.w	8006164 <task_ui+0x1ec>
 8005fda:	2b00      	cmp	r3, #0
 8005fdc:	d002      	beq.n	8005fe4 <task_ui+0x6c>
 8005fde:	2b01      	cmp	r3, #1
 8005fe0:	d040      	beq.n	8006064 <task_ui+0xec>
		case MSG_EVENT_BUTTON_LONG:
		  LOGGER_INFO("led blue");
		  ao_led_send(&led_blue, &led_msg);
		  break;
		default:
		  break;
 8005fe2:	e0bf      	b.n	8006164 <task_ui+0x1ec>
		  LOGGER_INFO("led red");
 8005fe4:	f7ff f8e8 	bl	80051b8 <vPortEnterCritical>
 8005fe8:	4b64      	ldr	r3, [pc, #400]	@ (800617c <task_ui+0x204>)
 8005fea:	681b      	ldr	r3, [r3, #0]
 8005fec:	4a64      	ldr	r2, [pc, #400]	@ (8006180 <task_ui+0x208>)
 8005fee:	213f      	movs	r1, #63	@ 0x3f
 8005ff0:	4618      	mov	r0, r3
 8005ff2:	f000 fd43 	bl	8006a7c <sniprintf>
 8005ff6:	4603      	mov	r3, r0
 8005ff8:	4a62      	ldr	r2, [pc, #392]	@ (8006184 <task_ui+0x20c>)
 8005ffa:	6013      	str	r3, [r2, #0]
 8005ffc:	4b5f      	ldr	r3, [pc, #380]	@ (800617c <task_ui+0x204>)
 8005ffe:	681b      	ldr	r3, [r3, #0]
 8006000:	4618      	mov	r0, r3
 8006002:	f7ff fc6d 	bl	80058e0 <logger_log_print_>
 8006006:	f7ff f909 	bl	800521c <vPortExitCritical>
 800600a:	f7ff f8d5 	bl	80051b8 <vPortEnterCritical>
 800600e:	4b5b      	ldr	r3, [pc, #364]	@ (800617c <task_ui+0x204>)
 8006010:	681b      	ldr	r3, [r3, #0]
 8006012:	4a5d      	ldr	r2, [pc, #372]	@ (8006188 <task_ui+0x210>)
 8006014:	213f      	movs	r1, #63	@ 0x3f
 8006016:	4618      	mov	r0, r3
 8006018:	f000 fd30 	bl	8006a7c <sniprintf>
 800601c:	4603      	mov	r3, r0
 800601e:	4a59      	ldr	r2, [pc, #356]	@ (8006184 <task_ui+0x20c>)
 8006020:	6013      	str	r3, [r2, #0]
 8006022:	4b56      	ldr	r3, [pc, #344]	@ (800617c <task_ui+0x204>)
 8006024:	681b      	ldr	r3, [r3, #0]
 8006026:	4618      	mov	r0, r3
 8006028:	f7ff fc5a 	bl	80058e0 <logger_log_print_>
 800602c:	f7ff f8f6 	bl	800521c <vPortExitCritical>
 8006030:	f7ff f8c2 	bl	80051b8 <vPortEnterCritical>
 8006034:	4b51      	ldr	r3, [pc, #324]	@ (800617c <task_ui+0x204>)
 8006036:	681b      	ldr	r3, [r3, #0]
 8006038:	4a54      	ldr	r2, [pc, #336]	@ (800618c <task_ui+0x214>)
 800603a:	213f      	movs	r1, #63	@ 0x3f
 800603c:	4618      	mov	r0, r3
 800603e:	f000 fd1d 	bl	8006a7c <sniprintf>
 8006042:	4603      	mov	r3, r0
 8006044:	4a4f      	ldr	r2, [pc, #316]	@ (8006184 <task_ui+0x20c>)
 8006046:	6013      	str	r3, [r2, #0]
 8006048:	4b4c      	ldr	r3, [pc, #304]	@ (800617c <task_ui+0x204>)
 800604a:	681b      	ldr	r3, [r3, #0]
 800604c:	4618      	mov	r0, r3
 800604e:	f7ff fc47 	bl	80058e0 <logger_log_print_>
 8006052:	f7ff f8e3 	bl	800521c <vPortExitCritical>
		  ao_led_send(&led_red, &led_msg);
 8006056:	f107 030c 	add.w	r3, r7, #12
 800605a:	4619      	mov	r1, r3
 800605c:	4842      	ldr	r0, [pc, #264]	@ (8006168 <task_ui+0x1f0>)
 800605e:	f7ff fefb 	bl	8005e58 <ao_led_send>
		  break;
 8006062:	e080      	b.n	8006166 <task_ui+0x1ee>
		  LOGGER_INFO("led green");
 8006064:	f7ff f8a8 	bl	80051b8 <vPortEnterCritical>
 8006068:	4b44      	ldr	r3, [pc, #272]	@ (800617c <task_ui+0x204>)
 800606a:	681b      	ldr	r3, [r3, #0]
 800606c:	4a44      	ldr	r2, [pc, #272]	@ (8006180 <task_ui+0x208>)
 800606e:	213f      	movs	r1, #63	@ 0x3f
 8006070:	4618      	mov	r0, r3
 8006072:	f000 fd03 	bl	8006a7c <sniprintf>
 8006076:	4603      	mov	r3, r0
 8006078:	4a42      	ldr	r2, [pc, #264]	@ (8006184 <task_ui+0x20c>)
 800607a:	6013      	str	r3, [r2, #0]
 800607c:	4b3f      	ldr	r3, [pc, #252]	@ (800617c <task_ui+0x204>)
 800607e:	681b      	ldr	r3, [r3, #0]
 8006080:	4618      	mov	r0, r3
 8006082:	f7ff fc2d 	bl	80058e0 <logger_log_print_>
 8006086:	f7ff f8c9 	bl	800521c <vPortExitCritical>
 800608a:	f7ff f895 	bl	80051b8 <vPortEnterCritical>
 800608e:	4b3b      	ldr	r3, [pc, #236]	@ (800617c <task_ui+0x204>)
 8006090:	681b      	ldr	r3, [r3, #0]
 8006092:	4a3f      	ldr	r2, [pc, #252]	@ (8006190 <task_ui+0x218>)
 8006094:	213f      	movs	r1, #63	@ 0x3f
 8006096:	4618      	mov	r0, r3
 8006098:	f000 fcf0 	bl	8006a7c <sniprintf>
 800609c:	4603      	mov	r3, r0
 800609e:	4a39      	ldr	r2, [pc, #228]	@ (8006184 <task_ui+0x20c>)
 80060a0:	6013      	str	r3, [r2, #0]
 80060a2:	4b36      	ldr	r3, [pc, #216]	@ (800617c <task_ui+0x204>)
 80060a4:	681b      	ldr	r3, [r3, #0]
 80060a6:	4618      	mov	r0, r3
 80060a8:	f7ff fc1a 	bl	80058e0 <logger_log_print_>
 80060ac:	f7ff f8b6 	bl	800521c <vPortExitCritical>
 80060b0:	f7ff f882 	bl	80051b8 <vPortEnterCritical>
 80060b4:	4b31      	ldr	r3, [pc, #196]	@ (800617c <task_ui+0x204>)
 80060b6:	681b      	ldr	r3, [r3, #0]
 80060b8:	4a34      	ldr	r2, [pc, #208]	@ (800618c <task_ui+0x214>)
 80060ba:	213f      	movs	r1, #63	@ 0x3f
 80060bc:	4618      	mov	r0, r3
 80060be:	f000 fcdd 	bl	8006a7c <sniprintf>
 80060c2:	4603      	mov	r3, r0
 80060c4:	4a2f      	ldr	r2, [pc, #188]	@ (8006184 <task_ui+0x20c>)
 80060c6:	6013      	str	r3, [r2, #0]
 80060c8:	4b2c      	ldr	r3, [pc, #176]	@ (800617c <task_ui+0x204>)
 80060ca:	681b      	ldr	r3, [r3, #0]
 80060cc:	4618      	mov	r0, r3
 80060ce:	f7ff fc07 	bl	80058e0 <logger_log_print_>
 80060d2:	f7ff f8a3 	bl	800521c <vPortExitCritical>
		  ao_led_send(&led_green, &led_msg);
 80060d6:	f107 030c 	add.w	r3, r7, #12
 80060da:	4619      	mov	r1, r3
 80060dc:	4823      	ldr	r0, [pc, #140]	@ (800616c <task_ui+0x1f4>)
 80060de:	f7ff febb 	bl	8005e58 <ao_led_send>
		  break;
 80060e2:	e040      	b.n	8006166 <task_ui+0x1ee>
		  LOGGER_INFO("led blue");
 80060e4:	f7ff f868 	bl	80051b8 <vPortEnterCritical>
 80060e8:	4b24      	ldr	r3, [pc, #144]	@ (800617c <task_ui+0x204>)
 80060ea:	681b      	ldr	r3, [r3, #0]
 80060ec:	4a24      	ldr	r2, [pc, #144]	@ (8006180 <task_ui+0x208>)
 80060ee:	213f      	movs	r1, #63	@ 0x3f
 80060f0:	4618      	mov	r0, r3
 80060f2:	f000 fcc3 	bl	8006a7c <sniprintf>
 80060f6:	4603      	mov	r3, r0
 80060f8:	4a22      	ldr	r2, [pc, #136]	@ (8006184 <task_ui+0x20c>)
 80060fa:	6013      	str	r3, [r2, #0]
 80060fc:	4b1f      	ldr	r3, [pc, #124]	@ (800617c <task_ui+0x204>)
 80060fe:	681b      	ldr	r3, [r3, #0]
 8006100:	4618      	mov	r0, r3
 8006102:	f7ff fbed 	bl	80058e0 <logger_log_print_>
 8006106:	f7ff f889 	bl	800521c <vPortExitCritical>
 800610a:	f7ff f855 	bl	80051b8 <vPortEnterCritical>
 800610e:	4b1b      	ldr	r3, [pc, #108]	@ (800617c <task_ui+0x204>)
 8006110:	681b      	ldr	r3, [r3, #0]
 8006112:	4a20      	ldr	r2, [pc, #128]	@ (8006194 <task_ui+0x21c>)
 8006114:	213f      	movs	r1, #63	@ 0x3f
 8006116:	4618      	mov	r0, r3
 8006118:	f000 fcb0 	bl	8006a7c <sniprintf>
 800611c:	4603      	mov	r3, r0
 800611e:	4a19      	ldr	r2, [pc, #100]	@ (8006184 <task_ui+0x20c>)
 8006120:	6013      	str	r3, [r2, #0]
 8006122:	4b16      	ldr	r3, [pc, #88]	@ (800617c <task_ui+0x204>)
 8006124:	681b      	ldr	r3, [r3, #0]
 8006126:	4618      	mov	r0, r3
 8006128:	f7ff fbda 	bl	80058e0 <logger_log_print_>
 800612c:	f7ff f876 	bl	800521c <vPortExitCritical>
 8006130:	f7ff f842 	bl	80051b8 <vPortEnterCritical>
 8006134:	4b11      	ldr	r3, [pc, #68]	@ (800617c <task_ui+0x204>)
 8006136:	681b      	ldr	r3, [r3, #0]
 8006138:	4a14      	ldr	r2, [pc, #80]	@ (800618c <task_ui+0x214>)
 800613a:	213f      	movs	r1, #63	@ 0x3f
 800613c:	4618      	mov	r0, r3
 800613e:	f000 fc9d 	bl	8006a7c <sniprintf>
 8006142:	4603      	mov	r3, r0
 8006144:	4a0f      	ldr	r2, [pc, #60]	@ (8006184 <task_ui+0x20c>)
 8006146:	6013      	str	r3, [r2, #0]
 8006148:	4b0c      	ldr	r3, [pc, #48]	@ (800617c <task_ui+0x204>)
 800614a:	681b      	ldr	r3, [r3, #0]
 800614c:	4618      	mov	r0, r3
 800614e:	f7ff fbc7 	bl	80058e0 <logger_log_print_>
 8006152:	f7ff f863 	bl	800521c <vPortExitCritical>
		  ao_led_send(&led_blue, &led_msg);
 8006156:	f107 030c 	add.w	r3, r7, #12
 800615a:	4619      	mov	r1, r3
 800615c:	4804      	ldr	r0, [pc, #16]	@ (8006170 <task_ui+0x1f8>)
 800615e:	f7ff fe7b 	bl	8005e58 <ao_led_send>
		  break;
 8006162:	e000      	b.n	8006166 <task_ui+0x1ee>
		  break;
 8006164:	bf00      	nop
  {
 8006166:	e719      	b.n	8005f9c <task_ui+0x24>
 8006168:	20004750 	.word	0x20004750
 800616c:	20004758 	.word	0x20004758
 8006170:	20004760 	.word	0x20004760
 8006174:	08005ee1 	.word	0x08005ee1
 8006178:	200047b0 	.word	0x200047b0
 800617c:	08007bd4 	.word	0x08007bd4
 8006180:	08007b74 	.word	0x08007b74
 8006184:	200047a8 	.word	0x200047a8
 8006188:	08007b90 	.word	0x08007b90
 800618c:	08007b8c 	.word	0x08007b8c
 8006190:	08007b98 	.word	0x08007b98
 8006194:	08007ba4 	.word	0x08007ba4

08006198 <ao_ui_send_event>:
	}
  }
}

bool ao_ui_send_event(msg_event_t msg)
{
 8006198:	b580      	push	{r7, lr}
 800619a:	b082      	sub	sp, #8
 800619c:	af00      	add	r7, sp, #0
 800619e:	4603      	mov	r3, r0
 80061a0:	71fb      	strb	r3, [r7, #7]
  return (pdPASS == xQueueSend(hao_.hqueue, (void*)&msg, 0));
 80061a2:	4b08      	ldr	r3, [pc, #32]	@ (80061c4 <ao_ui_send_event+0x2c>)
 80061a4:	6818      	ldr	r0, [r3, #0]
 80061a6:	1df9      	adds	r1, r7, #7
 80061a8:	2300      	movs	r3, #0
 80061aa:	2200      	movs	r2, #0
 80061ac:	f7fd f850 	bl	8003250 <xQueueGenericSend>
 80061b0:	4603      	mov	r3, r0
 80061b2:	2b01      	cmp	r3, #1
 80061b4:	bf0c      	ite	eq
 80061b6:	2301      	moveq	r3, #1
 80061b8:	2300      	movne	r3, #0
 80061ba:	b2db      	uxtb	r3, r3
}
 80061bc:	4618      	mov	r0, r3
 80061be:	3708      	adds	r7, #8
 80061c0:	46bd      	mov	sp, r7
 80061c2:	bd80      	pop	{r7, pc}
 80061c4:	200047b0 	.word	0x200047b0

080061c8 <ao_ui_init>:

void ao_ui_init(void)
{
 80061c8:	b580      	push	{r7, lr}
 80061ca:	b084      	sub	sp, #16
 80061cc:	af02      	add	r7, sp, #8
  hao_.hqueue = xQueueCreate(QUEUE_LENGTH_, QUEUE_ITEM_SIZE_);
 80061ce:	2200      	movs	r2, #0
 80061d0:	2101      	movs	r1, #1
 80061d2:	2001      	movs	r0, #1
 80061d4:	f7fc ffe1 	bl	800319a <xQueueGenericCreate>
 80061d8:	4603      	mov	r3, r0
 80061da:	4a0d      	ldr	r2, [pc, #52]	@ (8006210 <ao_ui_init+0x48>)
 80061dc:	6013      	str	r3, [r2, #0]
  while(NULL == hao_.hqueue)
 80061de:	bf00      	nop
 80061e0:	4b0b      	ldr	r3, [pc, #44]	@ (8006210 <ao_ui_init+0x48>)
 80061e2:	681b      	ldr	r3, [r3, #0]
 80061e4:	2b00      	cmp	r3, #0
 80061e6:	d0fb      	beq.n	80061e0 <ao_ui_init+0x18>
  {
    // error
  }

  BaseType_t status;
  status = xTaskCreate(task_ui, "task_ao_ui", 128, NULL, tskIDLE_PRIORITY, NULL);
 80061e8:	2300      	movs	r3, #0
 80061ea:	9301      	str	r3, [sp, #4]
 80061ec:	2300      	movs	r3, #0
 80061ee:	9300      	str	r3, [sp, #0]
 80061f0:	2300      	movs	r3, #0
 80061f2:	2280      	movs	r2, #128	@ 0x80
 80061f4:	4907      	ldr	r1, [pc, #28]	@ (8006214 <ao_ui_init+0x4c>)
 80061f6:	4808      	ldr	r0, [pc, #32]	@ (8006218 <ao_ui_init+0x50>)
 80061f8:	f7fd fc7a 	bl	8003af0 <xTaskCreate>
 80061fc:	6078      	str	r0, [r7, #4]
  while (pdPASS != status)
 80061fe:	bf00      	nop
 8006200:	687b      	ldr	r3, [r7, #4]
 8006202:	2b01      	cmp	r3, #1
 8006204:	d1fc      	bne.n	8006200 <ao_ui_init+0x38>
  {
    // error
  }
}
 8006206:	bf00      	nop
 8006208:	bf00      	nop
 800620a:	3708      	adds	r7, #8
 800620c:	46bd      	mov	sp, r7
 800620e:	bd80      	pop	{r7, pc}
 8006210:	200047b0 	.word	0x200047b0
 8006214:	08007bb0 	.word	0x08007bb0
 8006218:	08005f79 	.word	0x08005f79

0800621c <findslot>:
 800621c:	4b0a      	ldr	r3, [pc, #40]	@ (8006248 <findslot+0x2c>)
 800621e:	b510      	push	{r4, lr}
 8006220:	4604      	mov	r4, r0
 8006222:	6818      	ldr	r0, [r3, #0]
 8006224:	b118      	cbz	r0, 800622e <findslot+0x12>
 8006226:	6a03      	ldr	r3, [r0, #32]
 8006228:	b90b      	cbnz	r3, 800622e <findslot+0x12>
 800622a:	f000 fbdf 	bl	80069ec <__sinit>
 800622e:	2c13      	cmp	r4, #19
 8006230:	d807      	bhi.n	8006242 <findslot+0x26>
 8006232:	4806      	ldr	r0, [pc, #24]	@ (800624c <findslot+0x30>)
 8006234:	f850 2034 	ldr.w	r2, [r0, r4, lsl #3]
 8006238:	3201      	adds	r2, #1
 800623a:	d002      	beq.n	8006242 <findslot+0x26>
 800623c:	eb00 00c4 	add.w	r0, r0, r4, lsl #3
 8006240:	bd10      	pop	{r4, pc}
 8006242:	2000      	movs	r0, #0
 8006244:	e7fc      	b.n	8006240 <findslot+0x24>
 8006246:	bf00      	nop
 8006248:	20000030 	.word	0x20000030
 800624c:	200047c0 	.word	0x200047c0

08006250 <error>:
 8006250:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006252:	4604      	mov	r4, r0
 8006254:	f000 fd38 	bl	8006cc8 <__errno>
 8006258:	2613      	movs	r6, #19
 800625a:	4605      	mov	r5, r0
 800625c:	2700      	movs	r7, #0
 800625e:	4630      	mov	r0, r6
 8006260:	4639      	mov	r1, r7
 8006262:	beab      	bkpt	0x00ab
 8006264:	4606      	mov	r6, r0
 8006266:	602e      	str	r6, [r5, #0]
 8006268:	4620      	mov	r0, r4
 800626a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0800626c <checkerror>:
 800626c:	1c43      	adds	r3, r0, #1
 800626e:	d101      	bne.n	8006274 <checkerror+0x8>
 8006270:	f7ff bfee 	b.w	8006250 <error>
 8006274:	4770      	bx	lr

08006276 <_swiread>:
 8006276:	b530      	push	{r4, r5, lr}
 8006278:	b085      	sub	sp, #20
 800627a:	e9cd 0101 	strd	r0, r1, [sp, #4]
 800627e:	9203      	str	r2, [sp, #12]
 8006280:	2406      	movs	r4, #6
 8006282:	ad01      	add	r5, sp, #4
 8006284:	4620      	mov	r0, r4
 8006286:	4629      	mov	r1, r5
 8006288:	beab      	bkpt	0x00ab
 800628a:	4604      	mov	r4, r0
 800628c:	4620      	mov	r0, r4
 800628e:	f7ff ffed 	bl	800626c <checkerror>
 8006292:	b005      	add	sp, #20
 8006294:	bd30      	pop	{r4, r5, pc}

08006296 <_read>:
 8006296:	b570      	push	{r4, r5, r6, lr}
 8006298:	460e      	mov	r6, r1
 800629a:	4614      	mov	r4, r2
 800629c:	f7ff ffbe 	bl	800621c <findslot>
 80062a0:	4605      	mov	r5, r0
 80062a2:	b930      	cbnz	r0, 80062b2 <_read+0x1c>
 80062a4:	f000 fd10 	bl	8006cc8 <__errno>
 80062a8:	2309      	movs	r3, #9
 80062aa:	6003      	str	r3, [r0, #0]
 80062ac:	f04f 30ff 	mov.w	r0, #4294967295
 80062b0:	bd70      	pop	{r4, r5, r6, pc}
 80062b2:	6800      	ldr	r0, [r0, #0]
 80062b4:	4622      	mov	r2, r4
 80062b6:	4631      	mov	r1, r6
 80062b8:	f7ff ffdd 	bl	8006276 <_swiread>
 80062bc:	1c43      	adds	r3, r0, #1
 80062be:	d0f5      	beq.n	80062ac <_read+0x16>
 80062c0:	686b      	ldr	r3, [r5, #4]
 80062c2:	1a20      	subs	r0, r4, r0
 80062c4:	4403      	add	r3, r0
 80062c6:	606b      	str	r3, [r5, #4]
 80062c8:	e7f2      	b.n	80062b0 <_read+0x1a>

080062ca <_swilseek>:
 80062ca:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80062cc:	460c      	mov	r4, r1
 80062ce:	4616      	mov	r6, r2
 80062d0:	f7ff ffa4 	bl	800621c <findslot>
 80062d4:	4605      	mov	r5, r0
 80062d6:	b940      	cbnz	r0, 80062ea <_swilseek+0x20>
 80062d8:	f000 fcf6 	bl	8006cc8 <__errno>
 80062dc:	2309      	movs	r3, #9
 80062de:	6003      	str	r3, [r0, #0]
 80062e0:	f04f 34ff 	mov.w	r4, #4294967295
 80062e4:	4620      	mov	r0, r4
 80062e6:	b003      	add	sp, #12
 80062e8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80062ea:	2e02      	cmp	r6, #2
 80062ec:	d903      	bls.n	80062f6 <_swilseek+0x2c>
 80062ee:	f000 fceb 	bl	8006cc8 <__errno>
 80062f2:	2316      	movs	r3, #22
 80062f4:	e7f3      	b.n	80062de <_swilseek+0x14>
 80062f6:	2e01      	cmp	r6, #1
 80062f8:	d112      	bne.n	8006320 <_swilseek+0x56>
 80062fa:	6843      	ldr	r3, [r0, #4]
 80062fc:	18e4      	adds	r4, r4, r3
 80062fe:	d4f6      	bmi.n	80062ee <_swilseek+0x24>
 8006300:	682b      	ldr	r3, [r5, #0]
 8006302:	260a      	movs	r6, #10
 8006304:	e9cd 3400 	strd	r3, r4, [sp]
 8006308:	466f      	mov	r7, sp
 800630a:	4630      	mov	r0, r6
 800630c:	4639      	mov	r1, r7
 800630e:	beab      	bkpt	0x00ab
 8006310:	4606      	mov	r6, r0
 8006312:	4630      	mov	r0, r6
 8006314:	f7ff ffaa 	bl	800626c <checkerror>
 8006318:	2800      	cmp	r0, #0
 800631a:	dbe1      	blt.n	80062e0 <_swilseek+0x16>
 800631c:	606c      	str	r4, [r5, #4]
 800631e:	e7e1      	b.n	80062e4 <_swilseek+0x1a>
 8006320:	2e02      	cmp	r6, #2
 8006322:	6803      	ldr	r3, [r0, #0]
 8006324:	d1ec      	bne.n	8006300 <_swilseek+0x36>
 8006326:	9300      	str	r3, [sp, #0]
 8006328:	260c      	movs	r6, #12
 800632a:	466f      	mov	r7, sp
 800632c:	4630      	mov	r0, r6
 800632e:	4639      	mov	r1, r7
 8006330:	beab      	bkpt	0x00ab
 8006332:	4606      	mov	r6, r0
 8006334:	4630      	mov	r0, r6
 8006336:	f7ff ff99 	bl	800626c <checkerror>
 800633a:	1c43      	adds	r3, r0, #1
 800633c:	d0d0      	beq.n	80062e0 <_swilseek+0x16>
 800633e:	4404      	add	r4, r0
 8006340:	e7de      	b.n	8006300 <_swilseek+0x36>

08006342 <_lseek>:
 8006342:	f7ff bfc2 	b.w	80062ca <_swilseek>

08006346 <_swiwrite>:
 8006346:	b530      	push	{r4, r5, lr}
 8006348:	b085      	sub	sp, #20
 800634a:	e9cd 0101 	strd	r0, r1, [sp, #4]
 800634e:	9203      	str	r2, [sp, #12]
 8006350:	2405      	movs	r4, #5
 8006352:	ad01      	add	r5, sp, #4
 8006354:	4620      	mov	r0, r4
 8006356:	4629      	mov	r1, r5
 8006358:	beab      	bkpt	0x00ab
 800635a:	4604      	mov	r4, r0
 800635c:	4620      	mov	r0, r4
 800635e:	f7ff ff85 	bl	800626c <checkerror>
 8006362:	b005      	add	sp, #20
 8006364:	bd30      	pop	{r4, r5, pc}

08006366 <_write>:
 8006366:	b570      	push	{r4, r5, r6, lr}
 8006368:	460e      	mov	r6, r1
 800636a:	4615      	mov	r5, r2
 800636c:	f7ff ff56 	bl	800621c <findslot>
 8006370:	4604      	mov	r4, r0
 8006372:	b930      	cbnz	r0, 8006382 <_write+0x1c>
 8006374:	f000 fca8 	bl	8006cc8 <__errno>
 8006378:	2309      	movs	r3, #9
 800637a:	6003      	str	r3, [r0, #0]
 800637c:	f04f 30ff 	mov.w	r0, #4294967295
 8006380:	bd70      	pop	{r4, r5, r6, pc}
 8006382:	6800      	ldr	r0, [r0, #0]
 8006384:	462a      	mov	r2, r5
 8006386:	4631      	mov	r1, r6
 8006388:	f7ff ffdd 	bl	8006346 <_swiwrite>
 800638c:	1e03      	subs	r3, r0, #0
 800638e:	dbf5      	blt.n	800637c <_write+0x16>
 8006390:	6862      	ldr	r2, [r4, #4]
 8006392:	1ae8      	subs	r0, r5, r3
 8006394:	4402      	add	r2, r0
 8006396:	42ab      	cmp	r3, r5
 8006398:	6062      	str	r2, [r4, #4]
 800639a:	d1f1      	bne.n	8006380 <_write+0x1a>
 800639c:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 80063a0:	2000      	movs	r0, #0
 80063a2:	f7ff bf55 	b.w	8006250 <error>

080063a6 <_swiclose>:
 80063a6:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80063a8:	2402      	movs	r4, #2
 80063aa:	9001      	str	r0, [sp, #4]
 80063ac:	ad01      	add	r5, sp, #4
 80063ae:	4620      	mov	r0, r4
 80063b0:	4629      	mov	r1, r5
 80063b2:	beab      	bkpt	0x00ab
 80063b4:	4604      	mov	r4, r0
 80063b6:	4620      	mov	r0, r4
 80063b8:	f7ff ff58 	bl	800626c <checkerror>
 80063bc:	b003      	add	sp, #12
 80063be:	bd30      	pop	{r4, r5, pc}

080063c0 <_close>:
 80063c0:	b538      	push	{r3, r4, r5, lr}
 80063c2:	4605      	mov	r5, r0
 80063c4:	f7ff ff2a 	bl	800621c <findslot>
 80063c8:	4604      	mov	r4, r0
 80063ca:	b930      	cbnz	r0, 80063da <_close+0x1a>
 80063cc:	f000 fc7c 	bl	8006cc8 <__errno>
 80063d0:	2309      	movs	r3, #9
 80063d2:	6003      	str	r3, [r0, #0]
 80063d4:	f04f 30ff 	mov.w	r0, #4294967295
 80063d8:	bd38      	pop	{r3, r4, r5, pc}
 80063da:	3d01      	subs	r5, #1
 80063dc:	2d01      	cmp	r5, #1
 80063de:	d809      	bhi.n	80063f4 <_close+0x34>
 80063e0:	4b09      	ldr	r3, [pc, #36]	@ (8006408 <_close+0x48>)
 80063e2:	689a      	ldr	r2, [r3, #8]
 80063e4:	691b      	ldr	r3, [r3, #16]
 80063e6:	429a      	cmp	r2, r3
 80063e8:	d104      	bne.n	80063f4 <_close+0x34>
 80063ea:	f04f 33ff 	mov.w	r3, #4294967295
 80063ee:	6003      	str	r3, [r0, #0]
 80063f0:	2000      	movs	r0, #0
 80063f2:	e7f1      	b.n	80063d8 <_close+0x18>
 80063f4:	6820      	ldr	r0, [r4, #0]
 80063f6:	f7ff ffd6 	bl	80063a6 <_swiclose>
 80063fa:	2800      	cmp	r0, #0
 80063fc:	d1ec      	bne.n	80063d8 <_close+0x18>
 80063fe:	f04f 33ff 	mov.w	r3, #4294967295
 8006402:	6023      	str	r3, [r4, #0]
 8006404:	e7e8      	b.n	80063d8 <_close+0x18>
 8006406:	bf00      	nop
 8006408:	200047c0 	.word	0x200047c0

0800640c <_swistat>:
 800640c:	b570      	push	{r4, r5, r6, lr}
 800640e:	460c      	mov	r4, r1
 8006410:	f7ff ff04 	bl	800621c <findslot>
 8006414:	4605      	mov	r5, r0
 8006416:	b930      	cbnz	r0, 8006426 <_swistat+0x1a>
 8006418:	f000 fc56 	bl	8006cc8 <__errno>
 800641c:	2309      	movs	r3, #9
 800641e:	6003      	str	r3, [r0, #0]
 8006420:	f04f 30ff 	mov.w	r0, #4294967295
 8006424:	bd70      	pop	{r4, r5, r6, pc}
 8006426:	6863      	ldr	r3, [r4, #4]
 8006428:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 800642c:	6063      	str	r3, [r4, #4]
 800642e:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8006432:	64a3      	str	r3, [r4, #72]	@ 0x48
 8006434:	260c      	movs	r6, #12
 8006436:	4630      	mov	r0, r6
 8006438:	4629      	mov	r1, r5
 800643a:	beab      	bkpt	0x00ab
 800643c:	4605      	mov	r5, r0
 800643e:	4628      	mov	r0, r5
 8006440:	f7ff ff14 	bl	800626c <checkerror>
 8006444:	1c43      	adds	r3, r0, #1
 8006446:	d0eb      	beq.n	8006420 <_swistat+0x14>
 8006448:	6120      	str	r0, [r4, #16]
 800644a:	2000      	movs	r0, #0
 800644c:	e7ea      	b.n	8006424 <_swistat+0x18>

0800644e <_fstat>:
 800644e:	460b      	mov	r3, r1
 8006450:	b510      	push	{r4, lr}
 8006452:	2100      	movs	r1, #0
 8006454:	4604      	mov	r4, r0
 8006456:	2258      	movs	r2, #88	@ 0x58
 8006458:	4618      	mov	r0, r3
 800645a:	f000 fb88 	bl	8006b6e <memset>
 800645e:	4601      	mov	r1, r0
 8006460:	4620      	mov	r0, r4
 8006462:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8006466:	f7ff bfd1 	b.w	800640c <_swistat>

0800646a <_stat>:
 800646a:	b538      	push	{r3, r4, r5, lr}
 800646c:	460d      	mov	r5, r1
 800646e:	4604      	mov	r4, r0
 8006470:	2258      	movs	r2, #88	@ 0x58
 8006472:	2100      	movs	r1, #0
 8006474:	4628      	mov	r0, r5
 8006476:	f000 fb7a 	bl	8006b6e <memset>
 800647a:	4620      	mov	r0, r4
 800647c:	2100      	movs	r1, #0
 800647e:	f000 f811 	bl	80064a4 <_swiopen>
 8006482:	1c43      	adds	r3, r0, #1
 8006484:	4604      	mov	r4, r0
 8006486:	d00b      	beq.n	80064a0 <_stat+0x36>
 8006488:	686b      	ldr	r3, [r5, #4]
 800648a:	f443 4301 	orr.w	r3, r3, #33024	@ 0x8100
 800648e:	606b      	str	r3, [r5, #4]
 8006490:	4629      	mov	r1, r5
 8006492:	f7ff ffbb 	bl	800640c <_swistat>
 8006496:	4605      	mov	r5, r0
 8006498:	4620      	mov	r0, r4
 800649a:	f7ff ff91 	bl	80063c0 <_close>
 800649e:	462c      	mov	r4, r5
 80064a0:	4620      	mov	r0, r4
 80064a2:	bd38      	pop	{r3, r4, r5, pc}

080064a4 <_swiopen>:
 80064a4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80064a8:	f8df 90a8 	ldr.w	r9, [pc, #168]	@ 8006554 <_swiopen+0xb0>
 80064ac:	b096      	sub	sp, #88	@ 0x58
 80064ae:	4607      	mov	r7, r0
 80064b0:	460e      	mov	r6, r1
 80064b2:	2400      	movs	r4, #0
 80064b4:	f859 3034 	ldr.w	r3, [r9, r4, lsl #3]
 80064b8:	3301      	adds	r3, #1
 80064ba:	ea4f 08c4 	mov.w	r8, r4, lsl #3
 80064be:	d032      	beq.n	8006526 <_swiopen+0x82>
 80064c0:	3401      	adds	r4, #1
 80064c2:	2c14      	cmp	r4, #20
 80064c4:	d1f6      	bne.n	80064b4 <_swiopen+0x10>
 80064c6:	f000 fbff 	bl	8006cc8 <__errno>
 80064ca:	2318      	movs	r3, #24
 80064cc:	e03a      	b.n	8006544 <_swiopen+0xa0>
 80064ce:	f3c6 4500 	ubfx	r5, r6, #16, #1
 80064d2:	f240 6301 	movw	r3, #1537	@ 0x601
 80064d6:	07b2      	lsls	r2, r6, #30
 80064d8:	bf48      	it	mi
 80064da:	f045 0502 	orrmi.w	r5, r5, #2
 80064de:	421e      	tst	r6, r3
 80064e0:	bf18      	it	ne
 80064e2:	f045 0504 	orrne.w	r5, r5, #4
 80064e6:	0733      	lsls	r3, r6, #28
 80064e8:	bf48      	it	mi
 80064ea:	f025 0504 	bicmi.w	r5, r5, #4
 80064ee:	4638      	mov	r0, r7
 80064f0:	bf48      	it	mi
 80064f2:	f045 0508 	orrmi.w	r5, r5, #8
 80064f6:	9700      	str	r7, [sp, #0]
 80064f8:	f7f9 fe8a 	bl	8000210 <strlen>
 80064fc:	e9cd 5001 	strd	r5, r0, [sp, #4]
 8006500:	2501      	movs	r5, #1
 8006502:	4628      	mov	r0, r5
 8006504:	4651      	mov	r1, sl
 8006506:	beab      	bkpt	0x00ab
 8006508:	4605      	mov	r5, r0
 800650a:	2d00      	cmp	r5, #0
 800650c:	db06      	blt.n	800651c <_swiopen+0x78>
 800650e:	44c8      	add	r8, r9
 8006510:	2300      	movs	r3, #0
 8006512:	f849 5034 	str.w	r5, [r9, r4, lsl #3]
 8006516:	f8c8 3004 	str.w	r3, [r8, #4]
 800651a:	e016      	b.n	800654a <_swiopen+0xa6>
 800651c:	4628      	mov	r0, r5
 800651e:	f7ff fe97 	bl	8006250 <error>
 8006522:	4604      	mov	r4, r0
 8006524:	e011      	b.n	800654a <_swiopen+0xa6>
 8006526:	f406 6320 	and.w	r3, r6, #2560	@ 0xa00
 800652a:	f5b3 6f20 	cmp.w	r3, #2560	@ 0xa00
 800652e:	46ea      	mov	sl, sp
 8006530:	d1cd      	bne.n	80064ce <_swiopen+0x2a>
 8006532:	4651      	mov	r1, sl
 8006534:	4638      	mov	r0, r7
 8006536:	f7ff ff98 	bl	800646a <_stat>
 800653a:	3001      	adds	r0, #1
 800653c:	d0c7      	beq.n	80064ce <_swiopen+0x2a>
 800653e:	f000 fbc3 	bl	8006cc8 <__errno>
 8006542:	2311      	movs	r3, #17
 8006544:	6003      	str	r3, [r0, #0]
 8006546:	f04f 34ff 	mov.w	r4, #4294967295
 800654a:	4620      	mov	r0, r4
 800654c:	b016      	add	sp, #88	@ 0x58
 800654e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006552:	bf00      	nop
 8006554:	200047c0 	.word	0x200047c0

08006558 <_get_semihosting_exts>:
 8006558:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800655c:	4606      	mov	r6, r0
 800655e:	460f      	mov	r7, r1
 8006560:	4829      	ldr	r0, [pc, #164]	@ (8006608 <_get_semihosting_exts+0xb0>)
 8006562:	2100      	movs	r1, #0
 8006564:	4615      	mov	r5, r2
 8006566:	f7ff ff9d 	bl	80064a4 <_swiopen>
 800656a:	462a      	mov	r2, r5
 800656c:	4604      	mov	r4, r0
 800656e:	2100      	movs	r1, #0
 8006570:	4630      	mov	r0, r6
 8006572:	f000 fafc 	bl	8006b6e <memset>
 8006576:	1c63      	adds	r3, r4, #1
 8006578:	d014      	beq.n	80065a4 <_get_semihosting_exts+0x4c>
 800657a:	4620      	mov	r0, r4
 800657c:	f7ff fe4e 	bl	800621c <findslot>
 8006580:	f04f 080c 	mov.w	r8, #12
 8006584:	4681      	mov	r9, r0
 8006586:	4640      	mov	r0, r8
 8006588:	4649      	mov	r1, r9
 800658a:	beab      	bkpt	0x00ab
 800658c:	4680      	mov	r8, r0
 800658e:	4640      	mov	r0, r8
 8006590:	f7ff fe6c 	bl	800626c <checkerror>
 8006594:	2803      	cmp	r0, #3
 8006596:	dd02      	ble.n	800659e <_get_semihosting_exts+0x46>
 8006598:	1ec3      	subs	r3, r0, #3
 800659a:	42ab      	cmp	r3, r5
 800659c:	dc07      	bgt.n	80065ae <_get_semihosting_exts+0x56>
 800659e:	4620      	mov	r0, r4
 80065a0:	f7ff ff0e 	bl	80063c0 <_close>
 80065a4:	f04f 30ff 	mov.w	r0, #4294967295
 80065a8:	b003      	add	sp, #12
 80065aa:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80065ae:	2204      	movs	r2, #4
 80065b0:	eb0d 0102 	add.w	r1, sp, r2
 80065b4:	4620      	mov	r0, r4
 80065b6:	f7ff fe6e 	bl	8006296 <_read>
 80065ba:	2803      	cmp	r0, #3
 80065bc:	ddef      	ble.n	800659e <_get_semihosting_exts+0x46>
 80065be:	f89d 3004 	ldrb.w	r3, [sp, #4]
 80065c2:	2b53      	cmp	r3, #83	@ 0x53
 80065c4:	d1eb      	bne.n	800659e <_get_semihosting_exts+0x46>
 80065c6:	f89d 3005 	ldrb.w	r3, [sp, #5]
 80065ca:	2b48      	cmp	r3, #72	@ 0x48
 80065cc:	d1e7      	bne.n	800659e <_get_semihosting_exts+0x46>
 80065ce:	f89d 3006 	ldrb.w	r3, [sp, #6]
 80065d2:	2b46      	cmp	r3, #70	@ 0x46
 80065d4:	d1e3      	bne.n	800659e <_get_semihosting_exts+0x46>
 80065d6:	f89d 3007 	ldrb.w	r3, [sp, #7]
 80065da:	2b42      	cmp	r3, #66	@ 0x42
 80065dc:	d1df      	bne.n	800659e <_get_semihosting_exts+0x46>
 80065de:	2201      	movs	r2, #1
 80065e0:	4639      	mov	r1, r7
 80065e2:	4620      	mov	r0, r4
 80065e4:	f7ff fe71 	bl	80062ca <_swilseek>
 80065e8:	2800      	cmp	r0, #0
 80065ea:	dbd8      	blt.n	800659e <_get_semihosting_exts+0x46>
 80065ec:	462a      	mov	r2, r5
 80065ee:	4631      	mov	r1, r6
 80065f0:	4620      	mov	r0, r4
 80065f2:	f7ff fe50 	bl	8006296 <_read>
 80065f6:	4605      	mov	r5, r0
 80065f8:	4620      	mov	r0, r4
 80065fa:	f7ff fee1 	bl	80063c0 <_close>
 80065fe:	4628      	mov	r0, r5
 8006600:	f7ff fe34 	bl	800626c <checkerror>
 8006604:	e7d0      	b.n	80065a8 <_get_semihosting_exts+0x50>
 8006606:	bf00      	nop
 8006608:	08007bd8 	.word	0x08007bd8

0800660c <initialise_semihosting_exts>:
 800660c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800660e:	4d0a      	ldr	r5, [pc, #40]	@ (8006638 <initialise_semihosting_exts+0x2c>)
 8006610:	4c0a      	ldr	r4, [pc, #40]	@ (800663c <initialise_semihosting_exts+0x30>)
 8006612:	2100      	movs	r1, #0
 8006614:	2201      	movs	r2, #1
 8006616:	a801      	add	r0, sp, #4
 8006618:	6029      	str	r1, [r5, #0]
 800661a:	6022      	str	r2, [r4, #0]
 800661c:	f7ff ff9c 	bl	8006558 <_get_semihosting_exts>
 8006620:	2800      	cmp	r0, #0
 8006622:	dd07      	ble.n	8006634 <initialise_semihosting_exts+0x28>
 8006624:	f89d 3004 	ldrb.w	r3, [sp, #4]
 8006628:	f003 0201 	and.w	r2, r3, #1
 800662c:	f003 0302 	and.w	r3, r3, #2
 8006630:	602a      	str	r2, [r5, #0]
 8006632:	6023      	str	r3, [r4, #0]
 8006634:	b003      	add	sp, #12
 8006636:	bd30      	pop	{r4, r5, pc}
 8006638:	20000020 	.word	0x20000020
 800663c:	2000001c 	.word	0x2000001c

08006640 <_has_ext_stdout_stderr>:
 8006640:	b510      	push	{r4, lr}
 8006642:	4c04      	ldr	r4, [pc, #16]	@ (8006654 <_has_ext_stdout_stderr+0x14>)
 8006644:	6823      	ldr	r3, [r4, #0]
 8006646:	2b00      	cmp	r3, #0
 8006648:	da01      	bge.n	800664e <_has_ext_stdout_stderr+0xe>
 800664a:	f7ff ffdf 	bl	800660c <initialise_semihosting_exts>
 800664e:	6820      	ldr	r0, [r4, #0]
 8006650:	bd10      	pop	{r4, pc}
 8006652:	bf00      	nop
 8006654:	2000001c 	.word	0x2000001c

08006658 <initialise_monitor_handles>:
 8006658:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800665c:	b085      	sub	sp, #20
 800665e:	f8df 90b0 	ldr.w	r9, [pc, #176]	@ 8006710 <initialise_monitor_handles+0xb8>
 8006662:	f8cd 9004 	str.w	r9, [sp, #4]
 8006666:	2303      	movs	r3, #3
 8006668:	2400      	movs	r4, #0
 800666a:	9303      	str	r3, [sp, #12]
 800666c:	af01      	add	r7, sp, #4
 800666e:	9402      	str	r4, [sp, #8]
 8006670:	2501      	movs	r5, #1
 8006672:	4628      	mov	r0, r5
 8006674:	4639      	mov	r1, r7
 8006676:	beab      	bkpt	0x00ab
 8006678:	4605      	mov	r5, r0
 800667a:	f8df 8098 	ldr.w	r8, [pc, #152]	@ 8006714 <initialise_monitor_handles+0xbc>
 800667e:	4623      	mov	r3, r4
 8006680:	4c20      	ldr	r4, [pc, #128]	@ (8006704 <initialise_monitor_handles+0xac>)
 8006682:	f8c8 5000 	str.w	r5, [r8]
 8006686:	f04f 32ff 	mov.w	r2, #4294967295
 800668a:	f844 2033 	str.w	r2, [r4, r3, lsl #3]
 800668e:	3301      	adds	r3, #1
 8006690:	2b14      	cmp	r3, #20
 8006692:	d1fa      	bne.n	800668a <initialise_monitor_handles+0x32>
 8006694:	f7ff ffd4 	bl	8006640 <_has_ext_stdout_stderr>
 8006698:	4d1b      	ldr	r5, [pc, #108]	@ (8006708 <initialise_monitor_handles+0xb0>)
 800669a:	b1d0      	cbz	r0, 80066d2 <initialise_monitor_handles+0x7a>
 800669c:	f04f 0a03 	mov.w	sl, #3
 80066a0:	2304      	movs	r3, #4
 80066a2:	f8cd 9004 	str.w	r9, [sp, #4]
 80066a6:	2601      	movs	r6, #1
 80066a8:	f8cd a00c 	str.w	sl, [sp, #12]
 80066ac:	9302      	str	r3, [sp, #8]
 80066ae:	4630      	mov	r0, r6
 80066b0:	4639      	mov	r1, r7
 80066b2:	beab      	bkpt	0x00ab
 80066b4:	4683      	mov	fp, r0
 80066b6:	4b15      	ldr	r3, [pc, #84]	@ (800670c <initialise_monitor_handles+0xb4>)
 80066b8:	f8cd 9004 	str.w	r9, [sp, #4]
 80066bc:	f8c3 b000 	str.w	fp, [r3]
 80066c0:	2308      	movs	r3, #8
 80066c2:	f8cd a00c 	str.w	sl, [sp, #12]
 80066c6:	9302      	str	r3, [sp, #8]
 80066c8:	4630      	mov	r0, r6
 80066ca:	4639      	mov	r1, r7
 80066cc:	beab      	bkpt	0x00ab
 80066ce:	4606      	mov	r6, r0
 80066d0:	602e      	str	r6, [r5, #0]
 80066d2:	682b      	ldr	r3, [r5, #0]
 80066d4:	3301      	adds	r3, #1
 80066d6:	bf02      	ittt	eq
 80066d8:	4b0c      	ldreq	r3, [pc, #48]	@ (800670c <initialise_monitor_handles+0xb4>)
 80066da:	681b      	ldreq	r3, [r3, #0]
 80066dc:	602b      	streq	r3, [r5, #0]
 80066de:	2600      	movs	r6, #0
 80066e0:	f8d8 3000 	ldr.w	r3, [r8]
 80066e4:	6023      	str	r3, [r4, #0]
 80066e6:	6066      	str	r6, [r4, #4]
 80066e8:	f7ff ffaa 	bl	8006640 <_has_ext_stdout_stderr>
 80066ec:	b130      	cbz	r0, 80066fc <initialise_monitor_handles+0xa4>
 80066ee:	4b07      	ldr	r3, [pc, #28]	@ (800670c <initialise_monitor_handles+0xb4>)
 80066f0:	681b      	ldr	r3, [r3, #0]
 80066f2:	e9c4 3602 	strd	r3, r6, [r4, #8]
 80066f6:	682b      	ldr	r3, [r5, #0]
 80066f8:	e9c4 3604 	strd	r3, r6, [r4, #16]
 80066fc:	b005      	add	sp, #20
 80066fe:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006702:	bf00      	nop
 8006704:	200047c0 	.word	0x200047c0
 8006708:	200047b4 	.word	0x200047b4
 800670c:	200047b8 	.word	0x200047b8
 8006710:	08007bee 	.word	0x08007bee
 8006714:	200047bc 	.word	0x200047bc

08006718 <_isatty>:
 8006718:	b570      	push	{r4, r5, r6, lr}
 800671a:	f7ff fd7f 	bl	800621c <findslot>
 800671e:	2409      	movs	r4, #9
 8006720:	4605      	mov	r5, r0
 8006722:	b920      	cbnz	r0, 800672e <_isatty+0x16>
 8006724:	f000 fad0 	bl	8006cc8 <__errno>
 8006728:	6004      	str	r4, [r0, #0]
 800672a:	2000      	movs	r0, #0
 800672c:	bd70      	pop	{r4, r5, r6, pc}
 800672e:	4620      	mov	r0, r4
 8006730:	4629      	mov	r1, r5
 8006732:	beab      	bkpt	0x00ab
 8006734:	4604      	mov	r4, r0
 8006736:	2c01      	cmp	r4, #1
 8006738:	4620      	mov	r0, r4
 800673a:	d0f7      	beq.n	800672c <_isatty+0x14>
 800673c:	f000 fac4 	bl	8006cc8 <__errno>
 8006740:	2513      	movs	r5, #19
 8006742:	4604      	mov	r4, r0
 8006744:	2600      	movs	r6, #0
 8006746:	4628      	mov	r0, r5
 8006748:	4631      	mov	r1, r6
 800674a:	beab      	bkpt	0x00ab
 800674c:	4605      	mov	r5, r0
 800674e:	6025      	str	r5, [r4, #0]
 8006750:	e7eb      	b.n	800672a <_isatty+0x12>
	...

08006754 <__sflush_r>:
 8006754:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8006758:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800675c:	0716      	lsls	r6, r2, #28
 800675e:	4605      	mov	r5, r0
 8006760:	460c      	mov	r4, r1
 8006762:	d454      	bmi.n	800680e <__sflush_r+0xba>
 8006764:	684b      	ldr	r3, [r1, #4]
 8006766:	2b00      	cmp	r3, #0
 8006768:	dc02      	bgt.n	8006770 <__sflush_r+0x1c>
 800676a:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 800676c:	2b00      	cmp	r3, #0
 800676e:	dd48      	ble.n	8006802 <__sflush_r+0xae>
 8006770:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8006772:	2e00      	cmp	r6, #0
 8006774:	d045      	beq.n	8006802 <__sflush_r+0xae>
 8006776:	2300      	movs	r3, #0
 8006778:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 800677c:	682f      	ldr	r7, [r5, #0]
 800677e:	6a21      	ldr	r1, [r4, #32]
 8006780:	602b      	str	r3, [r5, #0]
 8006782:	d030      	beq.n	80067e6 <__sflush_r+0x92>
 8006784:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 8006786:	89a3      	ldrh	r3, [r4, #12]
 8006788:	0759      	lsls	r1, r3, #29
 800678a:	d505      	bpl.n	8006798 <__sflush_r+0x44>
 800678c:	6863      	ldr	r3, [r4, #4]
 800678e:	1ad2      	subs	r2, r2, r3
 8006790:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 8006792:	b10b      	cbz	r3, 8006798 <__sflush_r+0x44>
 8006794:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8006796:	1ad2      	subs	r2, r2, r3
 8006798:	2300      	movs	r3, #0
 800679a:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800679c:	6a21      	ldr	r1, [r4, #32]
 800679e:	4628      	mov	r0, r5
 80067a0:	47b0      	blx	r6
 80067a2:	1c43      	adds	r3, r0, #1
 80067a4:	89a3      	ldrh	r3, [r4, #12]
 80067a6:	d106      	bne.n	80067b6 <__sflush_r+0x62>
 80067a8:	6829      	ldr	r1, [r5, #0]
 80067aa:	291d      	cmp	r1, #29
 80067ac:	d82b      	bhi.n	8006806 <__sflush_r+0xb2>
 80067ae:	4a2a      	ldr	r2, [pc, #168]	@ (8006858 <__sflush_r+0x104>)
 80067b0:	40ca      	lsrs	r2, r1
 80067b2:	07d6      	lsls	r6, r2, #31
 80067b4:	d527      	bpl.n	8006806 <__sflush_r+0xb2>
 80067b6:	2200      	movs	r2, #0
 80067b8:	6062      	str	r2, [r4, #4]
 80067ba:	04d9      	lsls	r1, r3, #19
 80067bc:	6922      	ldr	r2, [r4, #16]
 80067be:	6022      	str	r2, [r4, #0]
 80067c0:	d504      	bpl.n	80067cc <__sflush_r+0x78>
 80067c2:	1c42      	adds	r2, r0, #1
 80067c4:	d101      	bne.n	80067ca <__sflush_r+0x76>
 80067c6:	682b      	ldr	r3, [r5, #0]
 80067c8:	b903      	cbnz	r3, 80067cc <__sflush_r+0x78>
 80067ca:	6560      	str	r0, [r4, #84]	@ 0x54
 80067cc:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 80067ce:	602f      	str	r7, [r5, #0]
 80067d0:	b1b9      	cbz	r1, 8006802 <__sflush_r+0xae>
 80067d2:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 80067d6:	4299      	cmp	r1, r3
 80067d8:	d002      	beq.n	80067e0 <__sflush_r+0x8c>
 80067da:	4628      	mov	r0, r5
 80067dc:	f000 fab0 	bl	8006d40 <_free_r>
 80067e0:	2300      	movs	r3, #0
 80067e2:	6363      	str	r3, [r4, #52]	@ 0x34
 80067e4:	e00d      	b.n	8006802 <__sflush_r+0xae>
 80067e6:	2301      	movs	r3, #1
 80067e8:	4628      	mov	r0, r5
 80067ea:	47b0      	blx	r6
 80067ec:	4602      	mov	r2, r0
 80067ee:	1c50      	adds	r0, r2, #1
 80067f0:	d1c9      	bne.n	8006786 <__sflush_r+0x32>
 80067f2:	682b      	ldr	r3, [r5, #0]
 80067f4:	2b00      	cmp	r3, #0
 80067f6:	d0c6      	beq.n	8006786 <__sflush_r+0x32>
 80067f8:	2b1d      	cmp	r3, #29
 80067fa:	d001      	beq.n	8006800 <__sflush_r+0xac>
 80067fc:	2b16      	cmp	r3, #22
 80067fe:	d11e      	bne.n	800683e <__sflush_r+0xea>
 8006800:	602f      	str	r7, [r5, #0]
 8006802:	2000      	movs	r0, #0
 8006804:	e022      	b.n	800684c <__sflush_r+0xf8>
 8006806:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800680a:	b21b      	sxth	r3, r3
 800680c:	e01b      	b.n	8006846 <__sflush_r+0xf2>
 800680e:	690f      	ldr	r7, [r1, #16]
 8006810:	2f00      	cmp	r7, #0
 8006812:	d0f6      	beq.n	8006802 <__sflush_r+0xae>
 8006814:	0793      	lsls	r3, r2, #30
 8006816:	680e      	ldr	r6, [r1, #0]
 8006818:	bf08      	it	eq
 800681a:	694b      	ldreq	r3, [r1, #20]
 800681c:	600f      	str	r7, [r1, #0]
 800681e:	bf18      	it	ne
 8006820:	2300      	movne	r3, #0
 8006822:	eba6 0807 	sub.w	r8, r6, r7
 8006826:	608b      	str	r3, [r1, #8]
 8006828:	f1b8 0f00 	cmp.w	r8, #0
 800682c:	dde9      	ble.n	8006802 <__sflush_r+0xae>
 800682e:	6a21      	ldr	r1, [r4, #32]
 8006830:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 8006832:	4643      	mov	r3, r8
 8006834:	463a      	mov	r2, r7
 8006836:	4628      	mov	r0, r5
 8006838:	47b0      	blx	r6
 800683a:	2800      	cmp	r0, #0
 800683c:	dc08      	bgt.n	8006850 <__sflush_r+0xfc>
 800683e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8006842:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8006846:	81a3      	strh	r3, [r4, #12]
 8006848:	f04f 30ff 	mov.w	r0, #4294967295
 800684c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006850:	4407      	add	r7, r0
 8006852:	eba8 0800 	sub.w	r8, r8, r0
 8006856:	e7e7      	b.n	8006828 <__sflush_r+0xd4>
 8006858:	20400001 	.word	0x20400001

0800685c <_fflush_r>:
 800685c:	b538      	push	{r3, r4, r5, lr}
 800685e:	690b      	ldr	r3, [r1, #16]
 8006860:	4605      	mov	r5, r0
 8006862:	460c      	mov	r4, r1
 8006864:	b913      	cbnz	r3, 800686c <_fflush_r+0x10>
 8006866:	2500      	movs	r5, #0
 8006868:	4628      	mov	r0, r5
 800686a:	bd38      	pop	{r3, r4, r5, pc}
 800686c:	b118      	cbz	r0, 8006876 <_fflush_r+0x1a>
 800686e:	6a03      	ldr	r3, [r0, #32]
 8006870:	b90b      	cbnz	r3, 8006876 <_fflush_r+0x1a>
 8006872:	f000 f8bb 	bl	80069ec <__sinit>
 8006876:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800687a:	2b00      	cmp	r3, #0
 800687c:	d0f3      	beq.n	8006866 <_fflush_r+0xa>
 800687e:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8006880:	07d0      	lsls	r0, r2, #31
 8006882:	d404      	bmi.n	800688e <_fflush_r+0x32>
 8006884:	0599      	lsls	r1, r3, #22
 8006886:	d402      	bmi.n	800688e <_fflush_r+0x32>
 8006888:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800688a:	f000 fa48 	bl	8006d1e <__retarget_lock_acquire_recursive>
 800688e:	4628      	mov	r0, r5
 8006890:	4621      	mov	r1, r4
 8006892:	f7ff ff5f 	bl	8006754 <__sflush_r>
 8006896:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8006898:	07da      	lsls	r2, r3, #31
 800689a:	4605      	mov	r5, r0
 800689c:	d4e4      	bmi.n	8006868 <_fflush_r+0xc>
 800689e:	89a3      	ldrh	r3, [r4, #12]
 80068a0:	059b      	lsls	r3, r3, #22
 80068a2:	d4e1      	bmi.n	8006868 <_fflush_r+0xc>
 80068a4:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80068a6:	f000 fa3b 	bl	8006d20 <__retarget_lock_release_recursive>
 80068aa:	e7dd      	b.n	8006868 <_fflush_r+0xc>

080068ac <fflush>:
 80068ac:	4601      	mov	r1, r0
 80068ae:	b920      	cbnz	r0, 80068ba <fflush+0xe>
 80068b0:	4a04      	ldr	r2, [pc, #16]	@ (80068c4 <fflush+0x18>)
 80068b2:	4905      	ldr	r1, [pc, #20]	@ (80068c8 <fflush+0x1c>)
 80068b4:	4805      	ldr	r0, [pc, #20]	@ (80068cc <fflush+0x20>)
 80068b6:	f000 b8b1 	b.w	8006a1c <_fwalk_sglue>
 80068ba:	4b05      	ldr	r3, [pc, #20]	@ (80068d0 <fflush+0x24>)
 80068bc:	6818      	ldr	r0, [r3, #0]
 80068be:	f7ff bfcd 	b.w	800685c <_fflush_r>
 80068c2:	bf00      	nop
 80068c4:	20000024 	.word	0x20000024
 80068c8:	0800685d 	.word	0x0800685d
 80068cc:	20000034 	.word	0x20000034
 80068d0:	20000030 	.word	0x20000030

080068d4 <std>:
 80068d4:	2300      	movs	r3, #0
 80068d6:	b510      	push	{r4, lr}
 80068d8:	4604      	mov	r4, r0
 80068da:	e9c0 3300 	strd	r3, r3, [r0]
 80068de:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80068e2:	6083      	str	r3, [r0, #8]
 80068e4:	8181      	strh	r1, [r0, #12]
 80068e6:	6643      	str	r3, [r0, #100]	@ 0x64
 80068e8:	81c2      	strh	r2, [r0, #14]
 80068ea:	6183      	str	r3, [r0, #24]
 80068ec:	4619      	mov	r1, r3
 80068ee:	2208      	movs	r2, #8
 80068f0:	305c      	adds	r0, #92	@ 0x5c
 80068f2:	f000 f93c 	bl	8006b6e <memset>
 80068f6:	4b0d      	ldr	r3, [pc, #52]	@ (800692c <std+0x58>)
 80068f8:	6263      	str	r3, [r4, #36]	@ 0x24
 80068fa:	4b0d      	ldr	r3, [pc, #52]	@ (8006930 <std+0x5c>)
 80068fc:	62a3      	str	r3, [r4, #40]	@ 0x28
 80068fe:	4b0d      	ldr	r3, [pc, #52]	@ (8006934 <std+0x60>)
 8006900:	62e3      	str	r3, [r4, #44]	@ 0x2c
 8006902:	4b0d      	ldr	r3, [pc, #52]	@ (8006938 <std+0x64>)
 8006904:	6323      	str	r3, [r4, #48]	@ 0x30
 8006906:	4b0d      	ldr	r3, [pc, #52]	@ (800693c <std+0x68>)
 8006908:	6224      	str	r4, [r4, #32]
 800690a:	429c      	cmp	r4, r3
 800690c:	d006      	beq.n	800691c <std+0x48>
 800690e:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 8006912:	4294      	cmp	r4, r2
 8006914:	d002      	beq.n	800691c <std+0x48>
 8006916:	33d0      	adds	r3, #208	@ 0xd0
 8006918:	429c      	cmp	r4, r3
 800691a:	d105      	bne.n	8006928 <std+0x54>
 800691c:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8006920:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8006924:	f000 b9fa 	b.w	8006d1c <__retarget_lock_init_recursive>
 8006928:	bd10      	pop	{r4, pc}
 800692a:	bf00      	nop
 800692c:	08006ae9 	.word	0x08006ae9
 8006930:	08006b0b 	.word	0x08006b0b
 8006934:	08006b43 	.word	0x08006b43
 8006938:	08006b67 	.word	0x08006b67
 800693c:	20004860 	.word	0x20004860

08006940 <stdio_exit_handler>:
 8006940:	4a02      	ldr	r2, [pc, #8]	@ (800694c <stdio_exit_handler+0xc>)
 8006942:	4903      	ldr	r1, [pc, #12]	@ (8006950 <stdio_exit_handler+0x10>)
 8006944:	4803      	ldr	r0, [pc, #12]	@ (8006954 <stdio_exit_handler+0x14>)
 8006946:	f000 b869 	b.w	8006a1c <_fwalk_sglue>
 800694a:	bf00      	nop
 800694c:	20000024 	.word	0x20000024
 8006950:	0800685d 	.word	0x0800685d
 8006954:	20000034 	.word	0x20000034

08006958 <cleanup_stdio>:
 8006958:	6841      	ldr	r1, [r0, #4]
 800695a:	4b0c      	ldr	r3, [pc, #48]	@ (800698c <cleanup_stdio+0x34>)
 800695c:	4299      	cmp	r1, r3
 800695e:	b510      	push	{r4, lr}
 8006960:	4604      	mov	r4, r0
 8006962:	d001      	beq.n	8006968 <cleanup_stdio+0x10>
 8006964:	f7ff ff7a 	bl	800685c <_fflush_r>
 8006968:	68a1      	ldr	r1, [r4, #8]
 800696a:	4b09      	ldr	r3, [pc, #36]	@ (8006990 <cleanup_stdio+0x38>)
 800696c:	4299      	cmp	r1, r3
 800696e:	d002      	beq.n	8006976 <cleanup_stdio+0x1e>
 8006970:	4620      	mov	r0, r4
 8006972:	f7ff ff73 	bl	800685c <_fflush_r>
 8006976:	68e1      	ldr	r1, [r4, #12]
 8006978:	4b06      	ldr	r3, [pc, #24]	@ (8006994 <cleanup_stdio+0x3c>)
 800697a:	4299      	cmp	r1, r3
 800697c:	d004      	beq.n	8006988 <cleanup_stdio+0x30>
 800697e:	4620      	mov	r0, r4
 8006980:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8006984:	f7ff bf6a 	b.w	800685c <_fflush_r>
 8006988:	bd10      	pop	{r4, pc}
 800698a:	bf00      	nop
 800698c:	20004860 	.word	0x20004860
 8006990:	200048c8 	.word	0x200048c8
 8006994:	20004930 	.word	0x20004930

08006998 <global_stdio_init.part.0>:
 8006998:	b510      	push	{r4, lr}
 800699a:	4b0b      	ldr	r3, [pc, #44]	@ (80069c8 <global_stdio_init.part.0+0x30>)
 800699c:	4c0b      	ldr	r4, [pc, #44]	@ (80069cc <global_stdio_init.part.0+0x34>)
 800699e:	4a0c      	ldr	r2, [pc, #48]	@ (80069d0 <global_stdio_init.part.0+0x38>)
 80069a0:	601a      	str	r2, [r3, #0]
 80069a2:	4620      	mov	r0, r4
 80069a4:	2200      	movs	r2, #0
 80069a6:	2104      	movs	r1, #4
 80069a8:	f7ff ff94 	bl	80068d4 <std>
 80069ac:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 80069b0:	2201      	movs	r2, #1
 80069b2:	2109      	movs	r1, #9
 80069b4:	f7ff ff8e 	bl	80068d4 <std>
 80069b8:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 80069bc:	2202      	movs	r2, #2
 80069be:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80069c2:	2112      	movs	r1, #18
 80069c4:	f7ff bf86 	b.w	80068d4 <std>
 80069c8:	20004998 	.word	0x20004998
 80069cc:	20004860 	.word	0x20004860
 80069d0:	08006941 	.word	0x08006941

080069d4 <__sfp_lock_acquire>:
 80069d4:	4801      	ldr	r0, [pc, #4]	@ (80069dc <__sfp_lock_acquire+0x8>)
 80069d6:	f000 b9a2 	b.w	8006d1e <__retarget_lock_acquire_recursive>
 80069da:	bf00      	nop
 80069dc:	200049a1 	.word	0x200049a1

080069e0 <__sfp_lock_release>:
 80069e0:	4801      	ldr	r0, [pc, #4]	@ (80069e8 <__sfp_lock_release+0x8>)
 80069e2:	f000 b99d 	b.w	8006d20 <__retarget_lock_release_recursive>
 80069e6:	bf00      	nop
 80069e8:	200049a1 	.word	0x200049a1

080069ec <__sinit>:
 80069ec:	b510      	push	{r4, lr}
 80069ee:	4604      	mov	r4, r0
 80069f0:	f7ff fff0 	bl	80069d4 <__sfp_lock_acquire>
 80069f4:	6a23      	ldr	r3, [r4, #32]
 80069f6:	b11b      	cbz	r3, 8006a00 <__sinit+0x14>
 80069f8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80069fc:	f7ff bff0 	b.w	80069e0 <__sfp_lock_release>
 8006a00:	4b04      	ldr	r3, [pc, #16]	@ (8006a14 <__sinit+0x28>)
 8006a02:	6223      	str	r3, [r4, #32]
 8006a04:	4b04      	ldr	r3, [pc, #16]	@ (8006a18 <__sinit+0x2c>)
 8006a06:	681b      	ldr	r3, [r3, #0]
 8006a08:	2b00      	cmp	r3, #0
 8006a0a:	d1f5      	bne.n	80069f8 <__sinit+0xc>
 8006a0c:	f7ff ffc4 	bl	8006998 <global_stdio_init.part.0>
 8006a10:	e7f2      	b.n	80069f8 <__sinit+0xc>
 8006a12:	bf00      	nop
 8006a14:	08006959 	.word	0x08006959
 8006a18:	20004998 	.word	0x20004998

08006a1c <_fwalk_sglue>:
 8006a1c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8006a20:	4607      	mov	r7, r0
 8006a22:	4688      	mov	r8, r1
 8006a24:	4614      	mov	r4, r2
 8006a26:	2600      	movs	r6, #0
 8006a28:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8006a2c:	f1b9 0901 	subs.w	r9, r9, #1
 8006a30:	d505      	bpl.n	8006a3e <_fwalk_sglue+0x22>
 8006a32:	6824      	ldr	r4, [r4, #0]
 8006a34:	2c00      	cmp	r4, #0
 8006a36:	d1f7      	bne.n	8006a28 <_fwalk_sglue+0xc>
 8006a38:	4630      	mov	r0, r6
 8006a3a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8006a3e:	89ab      	ldrh	r3, [r5, #12]
 8006a40:	2b01      	cmp	r3, #1
 8006a42:	d907      	bls.n	8006a54 <_fwalk_sglue+0x38>
 8006a44:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8006a48:	3301      	adds	r3, #1
 8006a4a:	d003      	beq.n	8006a54 <_fwalk_sglue+0x38>
 8006a4c:	4629      	mov	r1, r5
 8006a4e:	4638      	mov	r0, r7
 8006a50:	47c0      	blx	r8
 8006a52:	4306      	orrs	r6, r0
 8006a54:	3568      	adds	r5, #104	@ 0x68
 8006a56:	e7e9      	b.n	8006a2c <_fwalk_sglue+0x10>

08006a58 <iprintf>:
 8006a58:	b40f      	push	{r0, r1, r2, r3}
 8006a5a:	b507      	push	{r0, r1, r2, lr}
 8006a5c:	4906      	ldr	r1, [pc, #24]	@ (8006a78 <iprintf+0x20>)
 8006a5e:	ab04      	add	r3, sp, #16
 8006a60:	6808      	ldr	r0, [r1, #0]
 8006a62:	f853 2b04 	ldr.w	r2, [r3], #4
 8006a66:	6881      	ldr	r1, [r0, #8]
 8006a68:	9301      	str	r3, [sp, #4]
 8006a6a:	f000 fbe3 	bl	8007234 <_vfiprintf_r>
 8006a6e:	b003      	add	sp, #12
 8006a70:	f85d eb04 	ldr.w	lr, [sp], #4
 8006a74:	b004      	add	sp, #16
 8006a76:	4770      	bx	lr
 8006a78:	20000030 	.word	0x20000030

08006a7c <sniprintf>:
 8006a7c:	b40c      	push	{r2, r3}
 8006a7e:	b530      	push	{r4, r5, lr}
 8006a80:	4b18      	ldr	r3, [pc, #96]	@ (8006ae4 <sniprintf+0x68>)
 8006a82:	1e0c      	subs	r4, r1, #0
 8006a84:	681d      	ldr	r5, [r3, #0]
 8006a86:	b09d      	sub	sp, #116	@ 0x74
 8006a88:	da08      	bge.n	8006a9c <sniprintf+0x20>
 8006a8a:	238b      	movs	r3, #139	@ 0x8b
 8006a8c:	602b      	str	r3, [r5, #0]
 8006a8e:	f04f 30ff 	mov.w	r0, #4294967295
 8006a92:	b01d      	add	sp, #116	@ 0x74
 8006a94:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8006a98:	b002      	add	sp, #8
 8006a9a:	4770      	bx	lr
 8006a9c:	f44f 7302 	mov.w	r3, #520	@ 0x208
 8006aa0:	f8ad 3014 	strh.w	r3, [sp, #20]
 8006aa4:	f04f 0300 	mov.w	r3, #0
 8006aa8:	931b      	str	r3, [sp, #108]	@ 0x6c
 8006aaa:	bf14      	ite	ne
 8006aac:	f104 33ff 	addne.w	r3, r4, #4294967295
 8006ab0:	4623      	moveq	r3, r4
 8006ab2:	9304      	str	r3, [sp, #16]
 8006ab4:	9307      	str	r3, [sp, #28]
 8006ab6:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8006aba:	9002      	str	r0, [sp, #8]
 8006abc:	9006      	str	r0, [sp, #24]
 8006abe:	f8ad 3016 	strh.w	r3, [sp, #22]
 8006ac2:	9a20      	ldr	r2, [sp, #128]	@ 0x80
 8006ac4:	ab21      	add	r3, sp, #132	@ 0x84
 8006ac6:	a902      	add	r1, sp, #8
 8006ac8:	4628      	mov	r0, r5
 8006aca:	9301      	str	r3, [sp, #4]
 8006acc:	f000 fa8c 	bl	8006fe8 <_svfiprintf_r>
 8006ad0:	1c43      	adds	r3, r0, #1
 8006ad2:	bfbc      	itt	lt
 8006ad4:	238b      	movlt	r3, #139	@ 0x8b
 8006ad6:	602b      	strlt	r3, [r5, #0]
 8006ad8:	2c00      	cmp	r4, #0
 8006ada:	d0da      	beq.n	8006a92 <sniprintf+0x16>
 8006adc:	9b02      	ldr	r3, [sp, #8]
 8006ade:	2200      	movs	r2, #0
 8006ae0:	701a      	strb	r2, [r3, #0]
 8006ae2:	e7d6      	b.n	8006a92 <sniprintf+0x16>
 8006ae4:	20000030 	.word	0x20000030

08006ae8 <__sread>:
 8006ae8:	b510      	push	{r4, lr}
 8006aea:	460c      	mov	r4, r1
 8006aec:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006af0:	f000 f8c6 	bl	8006c80 <_read_r>
 8006af4:	2800      	cmp	r0, #0
 8006af6:	bfab      	itete	ge
 8006af8:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 8006afa:	89a3      	ldrhlt	r3, [r4, #12]
 8006afc:	181b      	addge	r3, r3, r0
 8006afe:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 8006b02:	bfac      	ite	ge
 8006b04:	6563      	strge	r3, [r4, #84]	@ 0x54
 8006b06:	81a3      	strhlt	r3, [r4, #12]
 8006b08:	bd10      	pop	{r4, pc}

08006b0a <__swrite>:
 8006b0a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006b0e:	461f      	mov	r7, r3
 8006b10:	898b      	ldrh	r3, [r1, #12]
 8006b12:	05db      	lsls	r3, r3, #23
 8006b14:	4605      	mov	r5, r0
 8006b16:	460c      	mov	r4, r1
 8006b18:	4616      	mov	r6, r2
 8006b1a:	d505      	bpl.n	8006b28 <__swrite+0x1e>
 8006b1c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006b20:	2302      	movs	r3, #2
 8006b22:	2200      	movs	r2, #0
 8006b24:	f000 f89a 	bl	8006c5c <_lseek_r>
 8006b28:	89a3      	ldrh	r3, [r4, #12]
 8006b2a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8006b2e:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8006b32:	81a3      	strh	r3, [r4, #12]
 8006b34:	4632      	mov	r2, r6
 8006b36:	463b      	mov	r3, r7
 8006b38:	4628      	mov	r0, r5
 8006b3a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8006b3e:	f000 b8b1 	b.w	8006ca4 <_write_r>

08006b42 <__sseek>:
 8006b42:	b510      	push	{r4, lr}
 8006b44:	460c      	mov	r4, r1
 8006b46:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006b4a:	f000 f887 	bl	8006c5c <_lseek_r>
 8006b4e:	1c43      	adds	r3, r0, #1
 8006b50:	89a3      	ldrh	r3, [r4, #12]
 8006b52:	bf15      	itete	ne
 8006b54:	6560      	strne	r0, [r4, #84]	@ 0x54
 8006b56:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 8006b5a:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 8006b5e:	81a3      	strheq	r3, [r4, #12]
 8006b60:	bf18      	it	ne
 8006b62:	81a3      	strhne	r3, [r4, #12]
 8006b64:	bd10      	pop	{r4, pc}

08006b66 <__sclose>:
 8006b66:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006b6a:	f000 b809 	b.w	8006b80 <_close_r>

08006b6e <memset>:
 8006b6e:	4402      	add	r2, r0
 8006b70:	4603      	mov	r3, r0
 8006b72:	4293      	cmp	r3, r2
 8006b74:	d100      	bne.n	8006b78 <memset+0xa>
 8006b76:	4770      	bx	lr
 8006b78:	f803 1b01 	strb.w	r1, [r3], #1
 8006b7c:	e7f9      	b.n	8006b72 <memset+0x4>
	...

08006b80 <_close_r>:
 8006b80:	b538      	push	{r3, r4, r5, lr}
 8006b82:	4d06      	ldr	r5, [pc, #24]	@ (8006b9c <_close_r+0x1c>)
 8006b84:	2300      	movs	r3, #0
 8006b86:	4604      	mov	r4, r0
 8006b88:	4608      	mov	r0, r1
 8006b8a:	602b      	str	r3, [r5, #0]
 8006b8c:	f7ff fc18 	bl	80063c0 <_close>
 8006b90:	1c43      	adds	r3, r0, #1
 8006b92:	d102      	bne.n	8006b9a <_close_r+0x1a>
 8006b94:	682b      	ldr	r3, [r5, #0]
 8006b96:	b103      	cbz	r3, 8006b9a <_close_r+0x1a>
 8006b98:	6023      	str	r3, [r4, #0]
 8006b9a:	bd38      	pop	{r3, r4, r5, pc}
 8006b9c:	2000499c 	.word	0x2000499c

08006ba0 <_reclaim_reent>:
 8006ba0:	4b2d      	ldr	r3, [pc, #180]	@ (8006c58 <_reclaim_reent+0xb8>)
 8006ba2:	681b      	ldr	r3, [r3, #0]
 8006ba4:	4283      	cmp	r3, r0
 8006ba6:	b570      	push	{r4, r5, r6, lr}
 8006ba8:	4604      	mov	r4, r0
 8006baa:	d053      	beq.n	8006c54 <_reclaim_reent+0xb4>
 8006bac:	69c3      	ldr	r3, [r0, #28]
 8006bae:	b31b      	cbz	r3, 8006bf8 <_reclaim_reent+0x58>
 8006bb0:	68db      	ldr	r3, [r3, #12]
 8006bb2:	b163      	cbz	r3, 8006bce <_reclaim_reent+0x2e>
 8006bb4:	2500      	movs	r5, #0
 8006bb6:	69e3      	ldr	r3, [r4, #28]
 8006bb8:	68db      	ldr	r3, [r3, #12]
 8006bba:	5959      	ldr	r1, [r3, r5]
 8006bbc:	b9b1      	cbnz	r1, 8006bec <_reclaim_reent+0x4c>
 8006bbe:	3504      	adds	r5, #4
 8006bc0:	2d80      	cmp	r5, #128	@ 0x80
 8006bc2:	d1f8      	bne.n	8006bb6 <_reclaim_reent+0x16>
 8006bc4:	69e3      	ldr	r3, [r4, #28]
 8006bc6:	4620      	mov	r0, r4
 8006bc8:	68d9      	ldr	r1, [r3, #12]
 8006bca:	f000 f8b9 	bl	8006d40 <_free_r>
 8006bce:	69e3      	ldr	r3, [r4, #28]
 8006bd0:	6819      	ldr	r1, [r3, #0]
 8006bd2:	b111      	cbz	r1, 8006bda <_reclaim_reent+0x3a>
 8006bd4:	4620      	mov	r0, r4
 8006bd6:	f000 f8b3 	bl	8006d40 <_free_r>
 8006bda:	69e3      	ldr	r3, [r4, #28]
 8006bdc:	689d      	ldr	r5, [r3, #8]
 8006bde:	b15d      	cbz	r5, 8006bf8 <_reclaim_reent+0x58>
 8006be0:	4629      	mov	r1, r5
 8006be2:	4620      	mov	r0, r4
 8006be4:	682d      	ldr	r5, [r5, #0]
 8006be6:	f000 f8ab 	bl	8006d40 <_free_r>
 8006bea:	e7f8      	b.n	8006bde <_reclaim_reent+0x3e>
 8006bec:	680e      	ldr	r6, [r1, #0]
 8006bee:	4620      	mov	r0, r4
 8006bf0:	f000 f8a6 	bl	8006d40 <_free_r>
 8006bf4:	4631      	mov	r1, r6
 8006bf6:	e7e1      	b.n	8006bbc <_reclaim_reent+0x1c>
 8006bf8:	6961      	ldr	r1, [r4, #20]
 8006bfa:	b111      	cbz	r1, 8006c02 <_reclaim_reent+0x62>
 8006bfc:	4620      	mov	r0, r4
 8006bfe:	f000 f89f 	bl	8006d40 <_free_r>
 8006c02:	69e1      	ldr	r1, [r4, #28]
 8006c04:	b111      	cbz	r1, 8006c0c <_reclaim_reent+0x6c>
 8006c06:	4620      	mov	r0, r4
 8006c08:	f000 f89a 	bl	8006d40 <_free_r>
 8006c0c:	6b21      	ldr	r1, [r4, #48]	@ 0x30
 8006c0e:	b111      	cbz	r1, 8006c16 <_reclaim_reent+0x76>
 8006c10:	4620      	mov	r0, r4
 8006c12:	f000 f895 	bl	8006d40 <_free_r>
 8006c16:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8006c18:	b111      	cbz	r1, 8006c20 <_reclaim_reent+0x80>
 8006c1a:	4620      	mov	r0, r4
 8006c1c:	f000 f890 	bl	8006d40 <_free_r>
 8006c20:	6ba1      	ldr	r1, [r4, #56]	@ 0x38
 8006c22:	b111      	cbz	r1, 8006c2a <_reclaim_reent+0x8a>
 8006c24:	4620      	mov	r0, r4
 8006c26:	f000 f88b 	bl	8006d40 <_free_r>
 8006c2a:	6ca1      	ldr	r1, [r4, #72]	@ 0x48
 8006c2c:	b111      	cbz	r1, 8006c34 <_reclaim_reent+0x94>
 8006c2e:	4620      	mov	r0, r4
 8006c30:	f000 f886 	bl	8006d40 <_free_r>
 8006c34:	6c61      	ldr	r1, [r4, #68]	@ 0x44
 8006c36:	b111      	cbz	r1, 8006c3e <_reclaim_reent+0x9e>
 8006c38:	4620      	mov	r0, r4
 8006c3a:	f000 f881 	bl	8006d40 <_free_r>
 8006c3e:	6ae1      	ldr	r1, [r4, #44]	@ 0x2c
 8006c40:	b111      	cbz	r1, 8006c48 <_reclaim_reent+0xa8>
 8006c42:	4620      	mov	r0, r4
 8006c44:	f000 f87c 	bl	8006d40 <_free_r>
 8006c48:	6a23      	ldr	r3, [r4, #32]
 8006c4a:	b11b      	cbz	r3, 8006c54 <_reclaim_reent+0xb4>
 8006c4c:	4620      	mov	r0, r4
 8006c4e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8006c52:	4718      	bx	r3
 8006c54:	bd70      	pop	{r4, r5, r6, pc}
 8006c56:	bf00      	nop
 8006c58:	20000030 	.word	0x20000030

08006c5c <_lseek_r>:
 8006c5c:	b538      	push	{r3, r4, r5, lr}
 8006c5e:	4d07      	ldr	r5, [pc, #28]	@ (8006c7c <_lseek_r+0x20>)
 8006c60:	4604      	mov	r4, r0
 8006c62:	4608      	mov	r0, r1
 8006c64:	4611      	mov	r1, r2
 8006c66:	2200      	movs	r2, #0
 8006c68:	602a      	str	r2, [r5, #0]
 8006c6a:	461a      	mov	r2, r3
 8006c6c:	f7ff fb69 	bl	8006342 <_lseek>
 8006c70:	1c43      	adds	r3, r0, #1
 8006c72:	d102      	bne.n	8006c7a <_lseek_r+0x1e>
 8006c74:	682b      	ldr	r3, [r5, #0]
 8006c76:	b103      	cbz	r3, 8006c7a <_lseek_r+0x1e>
 8006c78:	6023      	str	r3, [r4, #0]
 8006c7a:	bd38      	pop	{r3, r4, r5, pc}
 8006c7c:	2000499c 	.word	0x2000499c

08006c80 <_read_r>:
 8006c80:	b538      	push	{r3, r4, r5, lr}
 8006c82:	4d07      	ldr	r5, [pc, #28]	@ (8006ca0 <_read_r+0x20>)
 8006c84:	4604      	mov	r4, r0
 8006c86:	4608      	mov	r0, r1
 8006c88:	4611      	mov	r1, r2
 8006c8a:	2200      	movs	r2, #0
 8006c8c:	602a      	str	r2, [r5, #0]
 8006c8e:	461a      	mov	r2, r3
 8006c90:	f7ff fb01 	bl	8006296 <_read>
 8006c94:	1c43      	adds	r3, r0, #1
 8006c96:	d102      	bne.n	8006c9e <_read_r+0x1e>
 8006c98:	682b      	ldr	r3, [r5, #0]
 8006c9a:	b103      	cbz	r3, 8006c9e <_read_r+0x1e>
 8006c9c:	6023      	str	r3, [r4, #0]
 8006c9e:	bd38      	pop	{r3, r4, r5, pc}
 8006ca0:	2000499c 	.word	0x2000499c

08006ca4 <_write_r>:
 8006ca4:	b538      	push	{r3, r4, r5, lr}
 8006ca6:	4d07      	ldr	r5, [pc, #28]	@ (8006cc4 <_write_r+0x20>)
 8006ca8:	4604      	mov	r4, r0
 8006caa:	4608      	mov	r0, r1
 8006cac:	4611      	mov	r1, r2
 8006cae:	2200      	movs	r2, #0
 8006cb0:	602a      	str	r2, [r5, #0]
 8006cb2:	461a      	mov	r2, r3
 8006cb4:	f7ff fb57 	bl	8006366 <_write>
 8006cb8:	1c43      	adds	r3, r0, #1
 8006cba:	d102      	bne.n	8006cc2 <_write_r+0x1e>
 8006cbc:	682b      	ldr	r3, [r5, #0]
 8006cbe:	b103      	cbz	r3, 8006cc2 <_write_r+0x1e>
 8006cc0:	6023      	str	r3, [r4, #0]
 8006cc2:	bd38      	pop	{r3, r4, r5, pc}
 8006cc4:	2000499c 	.word	0x2000499c

08006cc8 <__errno>:
 8006cc8:	4b01      	ldr	r3, [pc, #4]	@ (8006cd0 <__errno+0x8>)
 8006cca:	6818      	ldr	r0, [r3, #0]
 8006ccc:	4770      	bx	lr
 8006cce:	bf00      	nop
 8006cd0:	20000030 	.word	0x20000030

08006cd4 <__libc_init_array>:
 8006cd4:	b570      	push	{r4, r5, r6, lr}
 8006cd6:	4d0d      	ldr	r5, [pc, #52]	@ (8006d0c <__libc_init_array+0x38>)
 8006cd8:	4c0d      	ldr	r4, [pc, #52]	@ (8006d10 <__libc_init_array+0x3c>)
 8006cda:	1b64      	subs	r4, r4, r5
 8006cdc:	10a4      	asrs	r4, r4, #2
 8006cde:	2600      	movs	r6, #0
 8006ce0:	42a6      	cmp	r6, r4
 8006ce2:	d109      	bne.n	8006cf8 <__libc_init_array+0x24>
 8006ce4:	4d0b      	ldr	r5, [pc, #44]	@ (8006d14 <__libc_init_array+0x40>)
 8006ce6:	4c0c      	ldr	r4, [pc, #48]	@ (8006d18 <__libc_init_array+0x44>)
 8006ce8:	f000 fec0 	bl	8007a6c <_init>
 8006cec:	1b64      	subs	r4, r4, r5
 8006cee:	10a4      	asrs	r4, r4, #2
 8006cf0:	2600      	movs	r6, #0
 8006cf2:	42a6      	cmp	r6, r4
 8006cf4:	d105      	bne.n	8006d02 <__libc_init_array+0x2e>
 8006cf6:	bd70      	pop	{r4, r5, r6, pc}
 8006cf8:	f855 3b04 	ldr.w	r3, [r5], #4
 8006cfc:	4798      	blx	r3
 8006cfe:	3601      	adds	r6, #1
 8006d00:	e7ee      	b.n	8006ce0 <__libc_init_array+0xc>
 8006d02:	f855 3b04 	ldr.w	r3, [r5], #4
 8006d06:	4798      	blx	r3
 8006d08:	3601      	adds	r6, #1
 8006d0a:	e7f2      	b.n	8006cf2 <__libc_init_array+0x1e>
 8006d0c:	08007c30 	.word	0x08007c30
 8006d10:	08007c30 	.word	0x08007c30
 8006d14:	08007c30 	.word	0x08007c30
 8006d18:	08007c34 	.word	0x08007c34

08006d1c <__retarget_lock_init_recursive>:
 8006d1c:	4770      	bx	lr

08006d1e <__retarget_lock_acquire_recursive>:
 8006d1e:	4770      	bx	lr

08006d20 <__retarget_lock_release_recursive>:
 8006d20:	4770      	bx	lr

08006d22 <memcpy>:
 8006d22:	440a      	add	r2, r1
 8006d24:	4291      	cmp	r1, r2
 8006d26:	f100 33ff 	add.w	r3, r0, #4294967295
 8006d2a:	d100      	bne.n	8006d2e <memcpy+0xc>
 8006d2c:	4770      	bx	lr
 8006d2e:	b510      	push	{r4, lr}
 8006d30:	f811 4b01 	ldrb.w	r4, [r1], #1
 8006d34:	f803 4f01 	strb.w	r4, [r3, #1]!
 8006d38:	4291      	cmp	r1, r2
 8006d3a:	d1f9      	bne.n	8006d30 <memcpy+0xe>
 8006d3c:	bd10      	pop	{r4, pc}
	...

08006d40 <_free_r>:
 8006d40:	b538      	push	{r3, r4, r5, lr}
 8006d42:	4605      	mov	r5, r0
 8006d44:	2900      	cmp	r1, #0
 8006d46:	d041      	beq.n	8006dcc <_free_r+0x8c>
 8006d48:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8006d4c:	1f0c      	subs	r4, r1, #4
 8006d4e:	2b00      	cmp	r3, #0
 8006d50:	bfb8      	it	lt
 8006d52:	18e4      	addlt	r4, r4, r3
 8006d54:	f000 f8e0 	bl	8006f18 <__malloc_lock>
 8006d58:	4a1d      	ldr	r2, [pc, #116]	@ (8006dd0 <_free_r+0x90>)
 8006d5a:	6813      	ldr	r3, [r2, #0]
 8006d5c:	b933      	cbnz	r3, 8006d6c <_free_r+0x2c>
 8006d5e:	6063      	str	r3, [r4, #4]
 8006d60:	6014      	str	r4, [r2, #0]
 8006d62:	4628      	mov	r0, r5
 8006d64:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8006d68:	f000 b8dc 	b.w	8006f24 <__malloc_unlock>
 8006d6c:	42a3      	cmp	r3, r4
 8006d6e:	d908      	bls.n	8006d82 <_free_r+0x42>
 8006d70:	6820      	ldr	r0, [r4, #0]
 8006d72:	1821      	adds	r1, r4, r0
 8006d74:	428b      	cmp	r3, r1
 8006d76:	bf01      	itttt	eq
 8006d78:	6819      	ldreq	r1, [r3, #0]
 8006d7a:	685b      	ldreq	r3, [r3, #4]
 8006d7c:	1809      	addeq	r1, r1, r0
 8006d7e:	6021      	streq	r1, [r4, #0]
 8006d80:	e7ed      	b.n	8006d5e <_free_r+0x1e>
 8006d82:	461a      	mov	r2, r3
 8006d84:	685b      	ldr	r3, [r3, #4]
 8006d86:	b10b      	cbz	r3, 8006d8c <_free_r+0x4c>
 8006d88:	42a3      	cmp	r3, r4
 8006d8a:	d9fa      	bls.n	8006d82 <_free_r+0x42>
 8006d8c:	6811      	ldr	r1, [r2, #0]
 8006d8e:	1850      	adds	r0, r2, r1
 8006d90:	42a0      	cmp	r0, r4
 8006d92:	d10b      	bne.n	8006dac <_free_r+0x6c>
 8006d94:	6820      	ldr	r0, [r4, #0]
 8006d96:	4401      	add	r1, r0
 8006d98:	1850      	adds	r0, r2, r1
 8006d9a:	4283      	cmp	r3, r0
 8006d9c:	6011      	str	r1, [r2, #0]
 8006d9e:	d1e0      	bne.n	8006d62 <_free_r+0x22>
 8006da0:	6818      	ldr	r0, [r3, #0]
 8006da2:	685b      	ldr	r3, [r3, #4]
 8006da4:	6053      	str	r3, [r2, #4]
 8006da6:	4408      	add	r0, r1
 8006da8:	6010      	str	r0, [r2, #0]
 8006daa:	e7da      	b.n	8006d62 <_free_r+0x22>
 8006dac:	d902      	bls.n	8006db4 <_free_r+0x74>
 8006dae:	230c      	movs	r3, #12
 8006db0:	602b      	str	r3, [r5, #0]
 8006db2:	e7d6      	b.n	8006d62 <_free_r+0x22>
 8006db4:	6820      	ldr	r0, [r4, #0]
 8006db6:	1821      	adds	r1, r4, r0
 8006db8:	428b      	cmp	r3, r1
 8006dba:	bf04      	itt	eq
 8006dbc:	6819      	ldreq	r1, [r3, #0]
 8006dbe:	685b      	ldreq	r3, [r3, #4]
 8006dc0:	6063      	str	r3, [r4, #4]
 8006dc2:	bf04      	itt	eq
 8006dc4:	1809      	addeq	r1, r1, r0
 8006dc6:	6021      	streq	r1, [r4, #0]
 8006dc8:	6054      	str	r4, [r2, #4]
 8006dca:	e7ca      	b.n	8006d62 <_free_r+0x22>
 8006dcc:	bd38      	pop	{r3, r4, r5, pc}
 8006dce:	bf00      	nop
 8006dd0:	200049a8 	.word	0x200049a8

08006dd4 <sbrk_aligned>:
 8006dd4:	b570      	push	{r4, r5, r6, lr}
 8006dd6:	4e0f      	ldr	r6, [pc, #60]	@ (8006e14 <sbrk_aligned+0x40>)
 8006dd8:	460c      	mov	r4, r1
 8006dda:	6831      	ldr	r1, [r6, #0]
 8006ddc:	4605      	mov	r5, r0
 8006dde:	b911      	cbnz	r1, 8006de6 <sbrk_aligned+0x12>
 8006de0:	f000 fd7a 	bl	80078d8 <_sbrk_r>
 8006de4:	6030      	str	r0, [r6, #0]
 8006de6:	4621      	mov	r1, r4
 8006de8:	4628      	mov	r0, r5
 8006dea:	f000 fd75 	bl	80078d8 <_sbrk_r>
 8006dee:	1c43      	adds	r3, r0, #1
 8006df0:	d103      	bne.n	8006dfa <sbrk_aligned+0x26>
 8006df2:	f04f 34ff 	mov.w	r4, #4294967295
 8006df6:	4620      	mov	r0, r4
 8006df8:	bd70      	pop	{r4, r5, r6, pc}
 8006dfa:	1cc4      	adds	r4, r0, #3
 8006dfc:	f024 0403 	bic.w	r4, r4, #3
 8006e00:	42a0      	cmp	r0, r4
 8006e02:	d0f8      	beq.n	8006df6 <sbrk_aligned+0x22>
 8006e04:	1a21      	subs	r1, r4, r0
 8006e06:	4628      	mov	r0, r5
 8006e08:	f000 fd66 	bl	80078d8 <_sbrk_r>
 8006e0c:	3001      	adds	r0, #1
 8006e0e:	d1f2      	bne.n	8006df6 <sbrk_aligned+0x22>
 8006e10:	e7ef      	b.n	8006df2 <sbrk_aligned+0x1e>
 8006e12:	bf00      	nop
 8006e14:	200049a4 	.word	0x200049a4

08006e18 <_malloc_r>:
 8006e18:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8006e1c:	1ccd      	adds	r5, r1, #3
 8006e1e:	f025 0503 	bic.w	r5, r5, #3
 8006e22:	3508      	adds	r5, #8
 8006e24:	2d0c      	cmp	r5, #12
 8006e26:	bf38      	it	cc
 8006e28:	250c      	movcc	r5, #12
 8006e2a:	2d00      	cmp	r5, #0
 8006e2c:	4606      	mov	r6, r0
 8006e2e:	db01      	blt.n	8006e34 <_malloc_r+0x1c>
 8006e30:	42a9      	cmp	r1, r5
 8006e32:	d904      	bls.n	8006e3e <_malloc_r+0x26>
 8006e34:	230c      	movs	r3, #12
 8006e36:	6033      	str	r3, [r6, #0]
 8006e38:	2000      	movs	r0, #0
 8006e3a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8006e3e:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8006f14 <_malloc_r+0xfc>
 8006e42:	f000 f869 	bl	8006f18 <__malloc_lock>
 8006e46:	f8d8 3000 	ldr.w	r3, [r8]
 8006e4a:	461c      	mov	r4, r3
 8006e4c:	bb44      	cbnz	r4, 8006ea0 <_malloc_r+0x88>
 8006e4e:	4629      	mov	r1, r5
 8006e50:	4630      	mov	r0, r6
 8006e52:	f7ff ffbf 	bl	8006dd4 <sbrk_aligned>
 8006e56:	1c43      	adds	r3, r0, #1
 8006e58:	4604      	mov	r4, r0
 8006e5a:	d158      	bne.n	8006f0e <_malloc_r+0xf6>
 8006e5c:	f8d8 4000 	ldr.w	r4, [r8]
 8006e60:	4627      	mov	r7, r4
 8006e62:	2f00      	cmp	r7, #0
 8006e64:	d143      	bne.n	8006eee <_malloc_r+0xd6>
 8006e66:	2c00      	cmp	r4, #0
 8006e68:	d04b      	beq.n	8006f02 <_malloc_r+0xea>
 8006e6a:	6823      	ldr	r3, [r4, #0]
 8006e6c:	4639      	mov	r1, r7
 8006e6e:	4630      	mov	r0, r6
 8006e70:	eb04 0903 	add.w	r9, r4, r3
 8006e74:	f000 fd30 	bl	80078d8 <_sbrk_r>
 8006e78:	4581      	cmp	r9, r0
 8006e7a:	d142      	bne.n	8006f02 <_malloc_r+0xea>
 8006e7c:	6821      	ldr	r1, [r4, #0]
 8006e7e:	1a6d      	subs	r5, r5, r1
 8006e80:	4629      	mov	r1, r5
 8006e82:	4630      	mov	r0, r6
 8006e84:	f7ff ffa6 	bl	8006dd4 <sbrk_aligned>
 8006e88:	3001      	adds	r0, #1
 8006e8a:	d03a      	beq.n	8006f02 <_malloc_r+0xea>
 8006e8c:	6823      	ldr	r3, [r4, #0]
 8006e8e:	442b      	add	r3, r5
 8006e90:	6023      	str	r3, [r4, #0]
 8006e92:	f8d8 3000 	ldr.w	r3, [r8]
 8006e96:	685a      	ldr	r2, [r3, #4]
 8006e98:	bb62      	cbnz	r2, 8006ef4 <_malloc_r+0xdc>
 8006e9a:	f8c8 7000 	str.w	r7, [r8]
 8006e9e:	e00f      	b.n	8006ec0 <_malloc_r+0xa8>
 8006ea0:	6822      	ldr	r2, [r4, #0]
 8006ea2:	1b52      	subs	r2, r2, r5
 8006ea4:	d420      	bmi.n	8006ee8 <_malloc_r+0xd0>
 8006ea6:	2a0b      	cmp	r2, #11
 8006ea8:	d917      	bls.n	8006eda <_malloc_r+0xc2>
 8006eaa:	1961      	adds	r1, r4, r5
 8006eac:	42a3      	cmp	r3, r4
 8006eae:	6025      	str	r5, [r4, #0]
 8006eb0:	bf18      	it	ne
 8006eb2:	6059      	strne	r1, [r3, #4]
 8006eb4:	6863      	ldr	r3, [r4, #4]
 8006eb6:	bf08      	it	eq
 8006eb8:	f8c8 1000 	streq.w	r1, [r8]
 8006ebc:	5162      	str	r2, [r4, r5]
 8006ebe:	604b      	str	r3, [r1, #4]
 8006ec0:	4630      	mov	r0, r6
 8006ec2:	f000 f82f 	bl	8006f24 <__malloc_unlock>
 8006ec6:	f104 000b 	add.w	r0, r4, #11
 8006eca:	1d23      	adds	r3, r4, #4
 8006ecc:	f020 0007 	bic.w	r0, r0, #7
 8006ed0:	1ac2      	subs	r2, r0, r3
 8006ed2:	bf1c      	itt	ne
 8006ed4:	1a1b      	subne	r3, r3, r0
 8006ed6:	50a3      	strne	r3, [r4, r2]
 8006ed8:	e7af      	b.n	8006e3a <_malloc_r+0x22>
 8006eda:	6862      	ldr	r2, [r4, #4]
 8006edc:	42a3      	cmp	r3, r4
 8006ede:	bf0c      	ite	eq
 8006ee0:	f8c8 2000 	streq.w	r2, [r8]
 8006ee4:	605a      	strne	r2, [r3, #4]
 8006ee6:	e7eb      	b.n	8006ec0 <_malloc_r+0xa8>
 8006ee8:	4623      	mov	r3, r4
 8006eea:	6864      	ldr	r4, [r4, #4]
 8006eec:	e7ae      	b.n	8006e4c <_malloc_r+0x34>
 8006eee:	463c      	mov	r4, r7
 8006ef0:	687f      	ldr	r7, [r7, #4]
 8006ef2:	e7b6      	b.n	8006e62 <_malloc_r+0x4a>
 8006ef4:	461a      	mov	r2, r3
 8006ef6:	685b      	ldr	r3, [r3, #4]
 8006ef8:	42a3      	cmp	r3, r4
 8006efa:	d1fb      	bne.n	8006ef4 <_malloc_r+0xdc>
 8006efc:	2300      	movs	r3, #0
 8006efe:	6053      	str	r3, [r2, #4]
 8006f00:	e7de      	b.n	8006ec0 <_malloc_r+0xa8>
 8006f02:	230c      	movs	r3, #12
 8006f04:	6033      	str	r3, [r6, #0]
 8006f06:	4630      	mov	r0, r6
 8006f08:	f000 f80c 	bl	8006f24 <__malloc_unlock>
 8006f0c:	e794      	b.n	8006e38 <_malloc_r+0x20>
 8006f0e:	6005      	str	r5, [r0, #0]
 8006f10:	e7d6      	b.n	8006ec0 <_malloc_r+0xa8>
 8006f12:	bf00      	nop
 8006f14:	200049a8 	.word	0x200049a8

08006f18 <__malloc_lock>:
 8006f18:	4801      	ldr	r0, [pc, #4]	@ (8006f20 <__malloc_lock+0x8>)
 8006f1a:	f7ff bf00 	b.w	8006d1e <__retarget_lock_acquire_recursive>
 8006f1e:	bf00      	nop
 8006f20:	200049a0 	.word	0x200049a0

08006f24 <__malloc_unlock>:
 8006f24:	4801      	ldr	r0, [pc, #4]	@ (8006f2c <__malloc_unlock+0x8>)
 8006f26:	f7ff befb 	b.w	8006d20 <__retarget_lock_release_recursive>
 8006f2a:	bf00      	nop
 8006f2c:	200049a0 	.word	0x200049a0

08006f30 <__ssputs_r>:
 8006f30:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006f34:	688e      	ldr	r6, [r1, #8]
 8006f36:	461f      	mov	r7, r3
 8006f38:	42be      	cmp	r6, r7
 8006f3a:	680b      	ldr	r3, [r1, #0]
 8006f3c:	4682      	mov	sl, r0
 8006f3e:	460c      	mov	r4, r1
 8006f40:	4690      	mov	r8, r2
 8006f42:	d82d      	bhi.n	8006fa0 <__ssputs_r+0x70>
 8006f44:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8006f48:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 8006f4c:	d026      	beq.n	8006f9c <__ssputs_r+0x6c>
 8006f4e:	6965      	ldr	r5, [r4, #20]
 8006f50:	6909      	ldr	r1, [r1, #16]
 8006f52:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8006f56:	eba3 0901 	sub.w	r9, r3, r1
 8006f5a:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8006f5e:	1c7b      	adds	r3, r7, #1
 8006f60:	444b      	add	r3, r9
 8006f62:	106d      	asrs	r5, r5, #1
 8006f64:	429d      	cmp	r5, r3
 8006f66:	bf38      	it	cc
 8006f68:	461d      	movcc	r5, r3
 8006f6a:	0553      	lsls	r3, r2, #21
 8006f6c:	d527      	bpl.n	8006fbe <__ssputs_r+0x8e>
 8006f6e:	4629      	mov	r1, r5
 8006f70:	f7ff ff52 	bl	8006e18 <_malloc_r>
 8006f74:	4606      	mov	r6, r0
 8006f76:	b360      	cbz	r0, 8006fd2 <__ssputs_r+0xa2>
 8006f78:	6921      	ldr	r1, [r4, #16]
 8006f7a:	464a      	mov	r2, r9
 8006f7c:	f7ff fed1 	bl	8006d22 <memcpy>
 8006f80:	89a3      	ldrh	r3, [r4, #12]
 8006f82:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 8006f86:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8006f8a:	81a3      	strh	r3, [r4, #12]
 8006f8c:	6126      	str	r6, [r4, #16]
 8006f8e:	6165      	str	r5, [r4, #20]
 8006f90:	444e      	add	r6, r9
 8006f92:	eba5 0509 	sub.w	r5, r5, r9
 8006f96:	6026      	str	r6, [r4, #0]
 8006f98:	60a5      	str	r5, [r4, #8]
 8006f9a:	463e      	mov	r6, r7
 8006f9c:	42be      	cmp	r6, r7
 8006f9e:	d900      	bls.n	8006fa2 <__ssputs_r+0x72>
 8006fa0:	463e      	mov	r6, r7
 8006fa2:	6820      	ldr	r0, [r4, #0]
 8006fa4:	4632      	mov	r2, r6
 8006fa6:	4641      	mov	r1, r8
 8006fa8:	f000 fc7c 	bl	80078a4 <memmove>
 8006fac:	68a3      	ldr	r3, [r4, #8]
 8006fae:	1b9b      	subs	r3, r3, r6
 8006fb0:	60a3      	str	r3, [r4, #8]
 8006fb2:	6823      	ldr	r3, [r4, #0]
 8006fb4:	4433      	add	r3, r6
 8006fb6:	6023      	str	r3, [r4, #0]
 8006fb8:	2000      	movs	r0, #0
 8006fba:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006fbe:	462a      	mov	r2, r5
 8006fc0:	f000 fc9a 	bl	80078f8 <_realloc_r>
 8006fc4:	4606      	mov	r6, r0
 8006fc6:	2800      	cmp	r0, #0
 8006fc8:	d1e0      	bne.n	8006f8c <__ssputs_r+0x5c>
 8006fca:	6921      	ldr	r1, [r4, #16]
 8006fcc:	4650      	mov	r0, sl
 8006fce:	f7ff feb7 	bl	8006d40 <_free_r>
 8006fd2:	230c      	movs	r3, #12
 8006fd4:	f8ca 3000 	str.w	r3, [sl]
 8006fd8:	89a3      	ldrh	r3, [r4, #12]
 8006fda:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8006fde:	81a3      	strh	r3, [r4, #12]
 8006fe0:	f04f 30ff 	mov.w	r0, #4294967295
 8006fe4:	e7e9      	b.n	8006fba <__ssputs_r+0x8a>
	...

08006fe8 <_svfiprintf_r>:
 8006fe8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006fec:	4698      	mov	r8, r3
 8006fee:	898b      	ldrh	r3, [r1, #12]
 8006ff0:	061b      	lsls	r3, r3, #24
 8006ff2:	b09d      	sub	sp, #116	@ 0x74
 8006ff4:	4607      	mov	r7, r0
 8006ff6:	460d      	mov	r5, r1
 8006ff8:	4614      	mov	r4, r2
 8006ffa:	d510      	bpl.n	800701e <_svfiprintf_r+0x36>
 8006ffc:	690b      	ldr	r3, [r1, #16]
 8006ffe:	b973      	cbnz	r3, 800701e <_svfiprintf_r+0x36>
 8007000:	2140      	movs	r1, #64	@ 0x40
 8007002:	f7ff ff09 	bl	8006e18 <_malloc_r>
 8007006:	6028      	str	r0, [r5, #0]
 8007008:	6128      	str	r0, [r5, #16]
 800700a:	b930      	cbnz	r0, 800701a <_svfiprintf_r+0x32>
 800700c:	230c      	movs	r3, #12
 800700e:	603b      	str	r3, [r7, #0]
 8007010:	f04f 30ff 	mov.w	r0, #4294967295
 8007014:	b01d      	add	sp, #116	@ 0x74
 8007016:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800701a:	2340      	movs	r3, #64	@ 0x40
 800701c:	616b      	str	r3, [r5, #20]
 800701e:	2300      	movs	r3, #0
 8007020:	9309      	str	r3, [sp, #36]	@ 0x24
 8007022:	2320      	movs	r3, #32
 8007024:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8007028:	f8cd 800c 	str.w	r8, [sp, #12]
 800702c:	2330      	movs	r3, #48	@ 0x30
 800702e:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 80071cc <_svfiprintf_r+0x1e4>
 8007032:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8007036:	f04f 0901 	mov.w	r9, #1
 800703a:	4623      	mov	r3, r4
 800703c:	469a      	mov	sl, r3
 800703e:	f813 2b01 	ldrb.w	r2, [r3], #1
 8007042:	b10a      	cbz	r2, 8007048 <_svfiprintf_r+0x60>
 8007044:	2a25      	cmp	r2, #37	@ 0x25
 8007046:	d1f9      	bne.n	800703c <_svfiprintf_r+0x54>
 8007048:	ebba 0b04 	subs.w	fp, sl, r4
 800704c:	d00b      	beq.n	8007066 <_svfiprintf_r+0x7e>
 800704e:	465b      	mov	r3, fp
 8007050:	4622      	mov	r2, r4
 8007052:	4629      	mov	r1, r5
 8007054:	4638      	mov	r0, r7
 8007056:	f7ff ff6b 	bl	8006f30 <__ssputs_r>
 800705a:	3001      	adds	r0, #1
 800705c:	f000 80a7 	beq.w	80071ae <_svfiprintf_r+0x1c6>
 8007060:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8007062:	445a      	add	r2, fp
 8007064:	9209      	str	r2, [sp, #36]	@ 0x24
 8007066:	f89a 3000 	ldrb.w	r3, [sl]
 800706a:	2b00      	cmp	r3, #0
 800706c:	f000 809f 	beq.w	80071ae <_svfiprintf_r+0x1c6>
 8007070:	2300      	movs	r3, #0
 8007072:	f04f 32ff 	mov.w	r2, #4294967295
 8007076:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800707a:	f10a 0a01 	add.w	sl, sl, #1
 800707e:	9304      	str	r3, [sp, #16]
 8007080:	9307      	str	r3, [sp, #28]
 8007082:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8007086:	931a      	str	r3, [sp, #104]	@ 0x68
 8007088:	4654      	mov	r4, sl
 800708a:	2205      	movs	r2, #5
 800708c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007090:	484e      	ldr	r0, [pc, #312]	@ (80071cc <_svfiprintf_r+0x1e4>)
 8007092:	f7f9 f8c5 	bl	8000220 <memchr>
 8007096:	9a04      	ldr	r2, [sp, #16]
 8007098:	b9d8      	cbnz	r0, 80070d2 <_svfiprintf_r+0xea>
 800709a:	06d0      	lsls	r0, r2, #27
 800709c:	bf44      	itt	mi
 800709e:	2320      	movmi	r3, #32
 80070a0:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80070a4:	0711      	lsls	r1, r2, #28
 80070a6:	bf44      	itt	mi
 80070a8:	232b      	movmi	r3, #43	@ 0x2b
 80070aa:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80070ae:	f89a 3000 	ldrb.w	r3, [sl]
 80070b2:	2b2a      	cmp	r3, #42	@ 0x2a
 80070b4:	d015      	beq.n	80070e2 <_svfiprintf_r+0xfa>
 80070b6:	9a07      	ldr	r2, [sp, #28]
 80070b8:	4654      	mov	r4, sl
 80070ba:	2000      	movs	r0, #0
 80070bc:	f04f 0c0a 	mov.w	ip, #10
 80070c0:	4621      	mov	r1, r4
 80070c2:	f811 3b01 	ldrb.w	r3, [r1], #1
 80070c6:	3b30      	subs	r3, #48	@ 0x30
 80070c8:	2b09      	cmp	r3, #9
 80070ca:	d94b      	bls.n	8007164 <_svfiprintf_r+0x17c>
 80070cc:	b1b0      	cbz	r0, 80070fc <_svfiprintf_r+0x114>
 80070ce:	9207      	str	r2, [sp, #28]
 80070d0:	e014      	b.n	80070fc <_svfiprintf_r+0x114>
 80070d2:	eba0 0308 	sub.w	r3, r0, r8
 80070d6:	fa09 f303 	lsl.w	r3, r9, r3
 80070da:	4313      	orrs	r3, r2
 80070dc:	9304      	str	r3, [sp, #16]
 80070de:	46a2      	mov	sl, r4
 80070e0:	e7d2      	b.n	8007088 <_svfiprintf_r+0xa0>
 80070e2:	9b03      	ldr	r3, [sp, #12]
 80070e4:	1d19      	adds	r1, r3, #4
 80070e6:	681b      	ldr	r3, [r3, #0]
 80070e8:	9103      	str	r1, [sp, #12]
 80070ea:	2b00      	cmp	r3, #0
 80070ec:	bfbb      	ittet	lt
 80070ee:	425b      	neglt	r3, r3
 80070f0:	f042 0202 	orrlt.w	r2, r2, #2
 80070f4:	9307      	strge	r3, [sp, #28]
 80070f6:	9307      	strlt	r3, [sp, #28]
 80070f8:	bfb8      	it	lt
 80070fa:	9204      	strlt	r2, [sp, #16]
 80070fc:	7823      	ldrb	r3, [r4, #0]
 80070fe:	2b2e      	cmp	r3, #46	@ 0x2e
 8007100:	d10a      	bne.n	8007118 <_svfiprintf_r+0x130>
 8007102:	7863      	ldrb	r3, [r4, #1]
 8007104:	2b2a      	cmp	r3, #42	@ 0x2a
 8007106:	d132      	bne.n	800716e <_svfiprintf_r+0x186>
 8007108:	9b03      	ldr	r3, [sp, #12]
 800710a:	1d1a      	adds	r2, r3, #4
 800710c:	681b      	ldr	r3, [r3, #0]
 800710e:	9203      	str	r2, [sp, #12]
 8007110:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8007114:	3402      	adds	r4, #2
 8007116:	9305      	str	r3, [sp, #20]
 8007118:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 80071dc <_svfiprintf_r+0x1f4>
 800711c:	7821      	ldrb	r1, [r4, #0]
 800711e:	2203      	movs	r2, #3
 8007120:	4650      	mov	r0, sl
 8007122:	f7f9 f87d 	bl	8000220 <memchr>
 8007126:	b138      	cbz	r0, 8007138 <_svfiprintf_r+0x150>
 8007128:	9b04      	ldr	r3, [sp, #16]
 800712a:	eba0 000a 	sub.w	r0, r0, sl
 800712e:	2240      	movs	r2, #64	@ 0x40
 8007130:	4082      	lsls	r2, r0
 8007132:	4313      	orrs	r3, r2
 8007134:	3401      	adds	r4, #1
 8007136:	9304      	str	r3, [sp, #16]
 8007138:	f814 1b01 	ldrb.w	r1, [r4], #1
 800713c:	4824      	ldr	r0, [pc, #144]	@ (80071d0 <_svfiprintf_r+0x1e8>)
 800713e:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8007142:	2206      	movs	r2, #6
 8007144:	f7f9 f86c 	bl	8000220 <memchr>
 8007148:	2800      	cmp	r0, #0
 800714a:	d036      	beq.n	80071ba <_svfiprintf_r+0x1d2>
 800714c:	4b21      	ldr	r3, [pc, #132]	@ (80071d4 <_svfiprintf_r+0x1ec>)
 800714e:	bb1b      	cbnz	r3, 8007198 <_svfiprintf_r+0x1b0>
 8007150:	9b03      	ldr	r3, [sp, #12]
 8007152:	3307      	adds	r3, #7
 8007154:	f023 0307 	bic.w	r3, r3, #7
 8007158:	3308      	adds	r3, #8
 800715a:	9303      	str	r3, [sp, #12]
 800715c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800715e:	4433      	add	r3, r6
 8007160:	9309      	str	r3, [sp, #36]	@ 0x24
 8007162:	e76a      	b.n	800703a <_svfiprintf_r+0x52>
 8007164:	fb0c 3202 	mla	r2, ip, r2, r3
 8007168:	460c      	mov	r4, r1
 800716a:	2001      	movs	r0, #1
 800716c:	e7a8      	b.n	80070c0 <_svfiprintf_r+0xd8>
 800716e:	2300      	movs	r3, #0
 8007170:	3401      	adds	r4, #1
 8007172:	9305      	str	r3, [sp, #20]
 8007174:	4619      	mov	r1, r3
 8007176:	f04f 0c0a 	mov.w	ip, #10
 800717a:	4620      	mov	r0, r4
 800717c:	f810 2b01 	ldrb.w	r2, [r0], #1
 8007180:	3a30      	subs	r2, #48	@ 0x30
 8007182:	2a09      	cmp	r2, #9
 8007184:	d903      	bls.n	800718e <_svfiprintf_r+0x1a6>
 8007186:	2b00      	cmp	r3, #0
 8007188:	d0c6      	beq.n	8007118 <_svfiprintf_r+0x130>
 800718a:	9105      	str	r1, [sp, #20]
 800718c:	e7c4      	b.n	8007118 <_svfiprintf_r+0x130>
 800718e:	fb0c 2101 	mla	r1, ip, r1, r2
 8007192:	4604      	mov	r4, r0
 8007194:	2301      	movs	r3, #1
 8007196:	e7f0      	b.n	800717a <_svfiprintf_r+0x192>
 8007198:	ab03      	add	r3, sp, #12
 800719a:	9300      	str	r3, [sp, #0]
 800719c:	462a      	mov	r2, r5
 800719e:	4b0e      	ldr	r3, [pc, #56]	@ (80071d8 <_svfiprintf_r+0x1f0>)
 80071a0:	a904      	add	r1, sp, #16
 80071a2:	4638      	mov	r0, r7
 80071a4:	f3af 8000 	nop.w
 80071a8:	1c42      	adds	r2, r0, #1
 80071aa:	4606      	mov	r6, r0
 80071ac:	d1d6      	bne.n	800715c <_svfiprintf_r+0x174>
 80071ae:	89ab      	ldrh	r3, [r5, #12]
 80071b0:	065b      	lsls	r3, r3, #25
 80071b2:	f53f af2d 	bmi.w	8007010 <_svfiprintf_r+0x28>
 80071b6:	9809      	ldr	r0, [sp, #36]	@ 0x24
 80071b8:	e72c      	b.n	8007014 <_svfiprintf_r+0x2c>
 80071ba:	ab03      	add	r3, sp, #12
 80071bc:	9300      	str	r3, [sp, #0]
 80071be:	462a      	mov	r2, r5
 80071c0:	4b05      	ldr	r3, [pc, #20]	@ (80071d8 <_svfiprintf_r+0x1f0>)
 80071c2:	a904      	add	r1, sp, #16
 80071c4:	4638      	mov	r0, r7
 80071c6:	f000 f9bb 	bl	8007540 <_printf_i>
 80071ca:	e7ed      	b.n	80071a8 <_svfiprintf_r+0x1c0>
 80071cc:	08007bf2 	.word	0x08007bf2
 80071d0:	08007bfc 	.word	0x08007bfc
 80071d4:	00000000 	.word	0x00000000
 80071d8:	08006f31 	.word	0x08006f31
 80071dc:	08007bf8 	.word	0x08007bf8

080071e0 <__sfputc_r>:
 80071e0:	6893      	ldr	r3, [r2, #8]
 80071e2:	3b01      	subs	r3, #1
 80071e4:	2b00      	cmp	r3, #0
 80071e6:	b410      	push	{r4}
 80071e8:	6093      	str	r3, [r2, #8]
 80071ea:	da08      	bge.n	80071fe <__sfputc_r+0x1e>
 80071ec:	6994      	ldr	r4, [r2, #24]
 80071ee:	42a3      	cmp	r3, r4
 80071f0:	db01      	blt.n	80071f6 <__sfputc_r+0x16>
 80071f2:	290a      	cmp	r1, #10
 80071f4:	d103      	bne.n	80071fe <__sfputc_r+0x1e>
 80071f6:	f85d 4b04 	ldr.w	r4, [sp], #4
 80071fa:	f000 babf 	b.w	800777c <__swbuf_r>
 80071fe:	6813      	ldr	r3, [r2, #0]
 8007200:	1c58      	adds	r0, r3, #1
 8007202:	6010      	str	r0, [r2, #0]
 8007204:	7019      	strb	r1, [r3, #0]
 8007206:	4608      	mov	r0, r1
 8007208:	f85d 4b04 	ldr.w	r4, [sp], #4
 800720c:	4770      	bx	lr

0800720e <__sfputs_r>:
 800720e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007210:	4606      	mov	r6, r0
 8007212:	460f      	mov	r7, r1
 8007214:	4614      	mov	r4, r2
 8007216:	18d5      	adds	r5, r2, r3
 8007218:	42ac      	cmp	r4, r5
 800721a:	d101      	bne.n	8007220 <__sfputs_r+0x12>
 800721c:	2000      	movs	r0, #0
 800721e:	e007      	b.n	8007230 <__sfputs_r+0x22>
 8007220:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007224:	463a      	mov	r2, r7
 8007226:	4630      	mov	r0, r6
 8007228:	f7ff ffda 	bl	80071e0 <__sfputc_r>
 800722c:	1c43      	adds	r3, r0, #1
 800722e:	d1f3      	bne.n	8007218 <__sfputs_r+0xa>
 8007230:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08007234 <_vfiprintf_r>:
 8007234:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007238:	460d      	mov	r5, r1
 800723a:	b09d      	sub	sp, #116	@ 0x74
 800723c:	4614      	mov	r4, r2
 800723e:	4698      	mov	r8, r3
 8007240:	4606      	mov	r6, r0
 8007242:	b118      	cbz	r0, 800724c <_vfiprintf_r+0x18>
 8007244:	6a03      	ldr	r3, [r0, #32]
 8007246:	b90b      	cbnz	r3, 800724c <_vfiprintf_r+0x18>
 8007248:	f7ff fbd0 	bl	80069ec <__sinit>
 800724c:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800724e:	07d9      	lsls	r1, r3, #31
 8007250:	d405      	bmi.n	800725e <_vfiprintf_r+0x2a>
 8007252:	89ab      	ldrh	r3, [r5, #12]
 8007254:	059a      	lsls	r2, r3, #22
 8007256:	d402      	bmi.n	800725e <_vfiprintf_r+0x2a>
 8007258:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800725a:	f7ff fd60 	bl	8006d1e <__retarget_lock_acquire_recursive>
 800725e:	89ab      	ldrh	r3, [r5, #12]
 8007260:	071b      	lsls	r3, r3, #28
 8007262:	d501      	bpl.n	8007268 <_vfiprintf_r+0x34>
 8007264:	692b      	ldr	r3, [r5, #16]
 8007266:	b99b      	cbnz	r3, 8007290 <_vfiprintf_r+0x5c>
 8007268:	4629      	mov	r1, r5
 800726a:	4630      	mov	r0, r6
 800726c:	f000 fac4 	bl	80077f8 <__swsetup_r>
 8007270:	b170      	cbz	r0, 8007290 <_vfiprintf_r+0x5c>
 8007272:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8007274:	07dc      	lsls	r4, r3, #31
 8007276:	d504      	bpl.n	8007282 <_vfiprintf_r+0x4e>
 8007278:	f04f 30ff 	mov.w	r0, #4294967295
 800727c:	b01d      	add	sp, #116	@ 0x74
 800727e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007282:	89ab      	ldrh	r3, [r5, #12]
 8007284:	0598      	lsls	r0, r3, #22
 8007286:	d4f7      	bmi.n	8007278 <_vfiprintf_r+0x44>
 8007288:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800728a:	f7ff fd49 	bl	8006d20 <__retarget_lock_release_recursive>
 800728e:	e7f3      	b.n	8007278 <_vfiprintf_r+0x44>
 8007290:	2300      	movs	r3, #0
 8007292:	9309      	str	r3, [sp, #36]	@ 0x24
 8007294:	2320      	movs	r3, #32
 8007296:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800729a:	f8cd 800c 	str.w	r8, [sp, #12]
 800729e:	2330      	movs	r3, #48	@ 0x30
 80072a0:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 8007450 <_vfiprintf_r+0x21c>
 80072a4:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 80072a8:	f04f 0901 	mov.w	r9, #1
 80072ac:	4623      	mov	r3, r4
 80072ae:	469a      	mov	sl, r3
 80072b0:	f813 2b01 	ldrb.w	r2, [r3], #1
 80072b4:	b10a      	cbz	r2, 80072ba <_vfiprintf_r+0x86>
 80072b6:	2a25      	cmp	r2, #37	@ 0x25
 80072b8:	d1f9      	bne.n	80072ae <_vfiprintf_r+0x7a>
 80072ba:	ebba 0b04 	subs.w	fp, sl, r4
 80072be:	d00b      	beq.n	80072d8 <_vfiprintf_r+0xa4>
 80072c0:	465b      	mov	r3, fp
 80072c2:	4622      	mov	r2, r4
 80072c4:	4629      	mov	r1, r5
 80072c6:	4630      	mov	r0, r6
 80072c8:	f7ff ffa1 	bl	800720e <__sfputs_r>
 80072cc:	3001      	adds	r0, #1
 80072ce:	f000 80a7 	beq.w	8007420 <_vfiprintf_r+0x1ec>
 80072d2:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80072d4:	445a      	add	r2, fp
 80072d6:	9209      	str	r2, [sp, #36]	@ 0x24
 80072d8:	f89a 3000 	ldrb.w	r3, [sl]
 80072dc:	2b00      	cmp	r3, #0
 80072de:	f000 809f 	beq.w	8007420 <_vfiprintf_r+0x1ec>
 80072e2:	2300      	movs	r3, #0
 80072e4:	f04f 32ff 	mov.w	r2, #4294967295
 80072e8:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80072ec:	f10a 0a01 	add.w	sl, sl, #1
 80072f0:	9304      	str	r3, [sp, #16]
 80072f2:	9307      	str	r3, [sp, #28]
 80072f4:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 80072f8:	931a      	str	r3, [sp, #104]	@ 0x68
 80072fa:	4654      	mov	r4, sl
 80072fc:	2205      	movs	r2, #5
 80072fe:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007302:	4853      	ldr	r0, [pc, #332]	@ (8007450 <_vfiprintf_r+0x21c>)
 8007304:	f7f8 ff8c 	bl	8000220 <memchr>
 8007308:	9a04      	ldr	r2, [sp, #16]
 800730a:	b9d8      	cbnz	r0, 8007344 <_vfiprintf_r+0x110>
 800730c:	06d1      	lsls	r1, r2, #27
 800730e:	bf44      	itt	mi
 8007310:	2320      	movmi	r3, #32
 8007312:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8007316:	0713      	lsls	r3, r2, #28
 8007318:	bf44      	itt	mi
 800731a:	232b      	movmi	r3, #43	@ 0x2b
 800731c:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8007320:	f89a 3000 	ldrb.w	r3, [sl]
 8007324:	2b2a      	cmp	r3, #42	@ 0x2a
 8007326:	d015      	beq.n	8007354 <_vfiprintf_r+0x120>
 8007328:	9a07      	ldr	r2, [sp, #28]
 800732a:	4654      	mov	r4, sl
 800732c:	2000      	movs	r0, #0
 800732e:	f04f 0c0a 	mov.w	ip, #10
 8007332:	4621      	mov	r1, r4
 8007334:	f811 3b01 	ldrb.w	r3, [r1], #1
 8007338:	3b30      	subs	r3, #48	@ 0x30
 800733a:	2b09      	cmp	r3, #9
 800733c:	d94b      	bls.n	80073d6 <_vfiprintf_r+0x1a2>
 800733e:	b1b0      	cbz	r0, 800736e <_vfiprintf_r+0x13a>
 8007340:	9207      	str	r2, [sp, #28]
 8007342:	e014      	b.n	800736e <_vfiprintf_r+0x13a>
 8007344:	eba0 0308 	sub.w	r3, r0, r8
 8007348:	fa09 f303 	lsl.w	r3, r9, r3
 800734c:	4313      	orrs	r3, r2
 800734e:	9304      	str	r3, [sp, #16]
 8007350:	46a2      	mov	sl, r4
 8007352:	e7d2      	b.n	80072fa <_vfiprintf_r+0xc6>
 8007354:	9b03      	ldr	r3, [sp, #12]
 8007356:	1d19      	adds	r1, r3, #4
 8007358:	681b      	ldr	r3, [r3, #0]
 800735a:	9103      	str	r1, [sp, #12]
 800735c:	2b00      	cmp	r3, #0
 800735e:	bfbb      	ittet	lt
 8007360:	425b      	neglt	r3, r3
 8007362:	f042 0202 	orrlt.w	r2, r2, #2
 8007366:	9307      	strge	r3, [sp, #28]
 8007368:	9307      	strlt	r3, [sp, #28]
 800736a:	bfb8      	it	lt
 800736c:	9204      	strlt	r2, [sp, #16]
 800736e:	7823      	ldrb	r3, [r4, #0]
 8007370:	2b2e      	cmp	r3, #46	@ 0x2e
 8007372:	d10a      	bne.n	800738a <_vfiprintf_r+0x156>
 8007374:	7863      	ldrb	r3, [r4, #1]
 8007376:	2b2a      	cmp	r3, #42	@ 0x2a
 8007378:	d132      	bne.n	80073e0 <_vfiprintf_r+0x1ac>
 800737a:	9b03      	ldr	r3, [sp, #12]
 800737c:	1d1a      	adds	r2, r3, #4
 800737e:	681b      	ldr	r3, [r3, #0]
 8007380:	9203      	str	r2, [sp, #12]
 8007382:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8007386:	3402      	adds	r4, #2
 8007388:	9305      	str	r3, [sp, #20]
 800738a:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 8007460 <_vfiprintf_r+0x22c>
 800738e:	7821      	ldrb	r1, [r4, #0]
 8007390:	2203      	movs	r2, #3
 8007392:	4650      	mov	r0, sl
 8007394:	f7f8 ff44 	bl	8000220 <memchr>
 8007398:	b138      	cbz	r0, 80073aa <_vfiprintf_r+0x176>
 800739a:	9b04      	ldr	r3, [sp, #16]
 800739c:	eba0 000a 	sub.w	r0, r0, sl
 80073a0:	2240      	movs	r2, #64	@ 0x40
 80073a2:	4082      	lsls	r2, r0
 80073a4:	4313      	orrs	r3, r2
 80073a6:	3401      	adds	r4, #1
 80073a8:	9304      	str	r3, [sp, #16]
 80073aa:	f814 1b01 	ldrb.w	r1, [r4], #1
 80073ae:	4829      	ldr	r0, [pc, #164]	@ (8007454 <_vfiprintf_r+0x220>)
 80073b0:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 80073b4:	2206      	movs	r2, #6
 80073b6:	f7f8 ff33 	bl	8000220 <memchr>
 80073ba:	2800      	cmp	r0, #0
 80073bc:	d03f      	beq.n	800743e <_vfiprintf_r+0x20a>
 80073be:	4b26      	ldr	r3, [pc, #152]	@ (8007458 <_vfiprintf_r+0x224>)
 80073c0:	bb1b      	cbnz	r3, 800740a <_vfiprintf_r+0x1d6>
 80073c2:	9b03      	ldr	r3, [sp, #12]
 80073c4:	3307      	adds	r3, #7
 80073c6:	f023 0307 	bic.w	r3, r3, #7
 80073ca:	3308      	adds	r3, #8
 80073cc:	9303      	str	r3, [sp, #12]
 80073ce:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80073d0:	443b      	add	r3, r7
 80073d2:	9309      	str	r3, [sp, #36]	@ 0x24
 80073d4:	e76a      	b.n	80072ac <_vfiprintf_r+0x78>
 80073d6:	fb0c 3202 	mla	r2, ip, r2, r3
 80073da:	460c      	mov	r4, r1
 80073dc:	2001      	movs	r0, #1
 80073de:	e7a8      	b.n	8007332 <_vfiprintf_r+0xfe>
 80073e0:	2300      	movs	r3, #0
 80073e2:	3401      	adds	r4, #1
 80073e4:	9305      	str	r3, [sp, #20]
 80073e6:	4619      	mov	r1, r3
 80073e8:	f04f 0c0a 	mov.w	ip, #10
 80073ec:	4620      	mov	r0, r4
 80073ee:	f810 2b01 	ldrb.w	r2, [r0], #1
 80073f2:	3a30      	subs	r2, #48	@ 0x30
 80073f4:	2a09      	cmp	r2, #9
 80073f6:	d903      	bls.n	8007400 <_vfiprintf_r+0x1cc>
 80073f8:	2b00      	cmp	r3, #0
 80073fa:	d0c6      	beq.n	800738a <_vfiprintf_r+0x156>
 80073fc:	9105      	str	r1, [sp, #20]
 80073fe:	e7c4      	b.n	800738a <_vfiprintf_r+0x156>
 8007400:	fb0c 2101 	mla	r1, ip, r1, r2
 8007404:	4604      	mov	r4, r0
 8007406:	2301      	movs	r3, #1
 8007408:	e7f0      	b.n	80073ec <_vfiprintf_r+0x1b8>
 800740a:	ab03      	add	r3, sp, #12
 800740c:	9300      	str	r3, [sp, #0]
 800740e:	462a      	mov	r2, r5
 8007410:	4b12      	ldr	r3, [pc, #72]	@ (800745c <_vfiprintf_r+0x228>)
 8007412:	a904      	add	r1, sp, #16
 8007414:	4630      	mov	r0, r6
 8007416:	f3af 8000 	nop.w
 800741a:	4607      	mov	r7, r0
 800741c:	1c78      	adds	r0, r7, #1
 800741e:	d1d6      	bne.n	80073ce <_vfiprintf_r+0x19a>
 8007420:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8007422:	07d9      	lsls	r1, r3, #31
 8007424:	d405      	bmi.n	8007432 <_vfiprintf_r+0x1fe>
 8007426:	89ab      	ldrh	r3, [r5, #12]
 8007428:	059a      	lsls	r2, r3, #22
 800742a:	d402      	bmi.n	8007432 <_vfiprintf_r+0x1fe>
 800742c:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800742e:	f7ff fc77 	bl	8006d20 <__retarget_lock_release_recursive>
 8007432:	89ab      	ldrh	r3, [r5, #12]
 8007434:	065b      	lsls	r3, r3, #25
 8007436:	f53f af1f 	bmi.w	8007278 <_vfiprintf_r+0x44>
 800743a:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800743c:	e71e      	b.n	800727c <_vfiprintf_r+0x48>
 800743e:	ab03      	add	r3, sp, #12
 8007440:	9300      	str	r3, [sp, #0]
 8007442:	462a      	mov	r2, r5
 8007444:	4b05      	ldr	r3, [pc, #20]	@ (800745c <_vfiprintf_r+0x228>)
 8007446:	a904      	add	r1, sp, #16
 8007448:	4630      	mov	r0, r6
 800744a:	f000 f879 	bl	8007540 <_printf_i>
 800744e:	e7e4      	b.n	800741a <_vfiprintf_r+0x1e6>
 8007450:	08007bf2 	.word	0x08007bf2
 8007454:	08007bfc 	.word	0x08007bfc
 8007458:	00000000 	.word	0x00000000
 800745c:	0800720f 	.word	0x0800720f
 8007460:	08007bf8 	.word	0x08007bf8

08007464 <_printf_common>:
 8007464:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007468:	4616      	mov	r6, r2
 800746a:	4698      	mov	r8, r3
 800746c:	688a      	ldr	r2, [r1, #8]
 800746e:	690b      	ldr	r3, [r1, #16]
 8007470:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8007474:	4293      	cmp	r3, r2
 8007476:	bfb8      	it	lt
 8007478:	4613      	movlt	r3, r2
 800747a:	6033      	str	r3, [r6, #0]
 800747c:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8007480:	4607      	mov	r7, r0
 8007482:	460c      	mov	r4, r1
 8007484:	b10a      	cbz	r2, 800748a <_printf_common+0x26>
 8007486:	3301      	adds	r3, #1
 8007488:	6033      	str	r3, [r6, #0]
 800748a:	6823      	ldr	r3, [r4, #0]
 800748c:	0699      	lsls	r1, r3, #26
 800748e:	bf42      	ittt	mi
 8007490:	6833      	ldrmi	r3, [r6, #0]
 8007492:	3302      	addmi	r3, #2
 8007494:	6033      	strmi	r3, [r6, #0]
 8007496:	6825      	ldr	r5, [r4, #0]
 8007498:	f015 0506 	ands.w	r5, r5, #6
 800749c:	d106      	bne.n	80074ac <_printf_common+0x48>
 800749e:	f104 0a19 	add.w	sl, r4, #25
 80074a2:	68e3      	ldr	r3, [r4, #12]
 80074a4:	6832      	ldr	r2, [r6, #0]
 80074a6:	1a9b      	subs	r3, r3, r2
 80074a8:	42ab      	cmp	r3, r5
 80074aa:	dc26      	bgt.n	80074fa <_printf_common+0x96>
 80074ac:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 80074b0:	6822      	ldr	r2, [r4, #0]
 80074b2:	3b00      	subs	r3, #0
 80074b4:	bf18      	it	ne
 80074b6:	2301      	movne	r3, #1
 80074b8:	0692      	lsls	r2, r2, #26
 80074ba:	d42b      	bmi.n	8007514 <_printf_common+0xb0>
 80074bc:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 80074c0:	4641      	mov	r1, r8
 80074c2:	4638      	mov	r0, r7
 80074c4:	47c8      	blx	r9
 80074c6:	3001      	adds	r0, #1
 80074c8:	d01e      	beq.n	8007508 <_printf_common+0xa4>
 80074ca:	6823      	ldr	r3, [r4, #0]
 80074cc:	6922      	ldr	r2, [r4, #16]
 80074ce:	f003 0306 	and.w	r3, r3, #6
 80074d2:	2b04      	cmp	r3, #4
 80074d4:	bf02      	ittt	eq
 80074d6:	68e5      	ldreq	r5, [r4, #12]
 80074d8:	6833      	ldreq	r3, [r6, #0]
 80074da:	1aed      	subeq	r5, r5, r3
 80074dc:	68a3      	ldr	r3, [r4, #8]
 80074de:	bf0c      	ite	eq
 80074e0:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80074e4:	2500      	movne	r5, #0
 80074e6:	4293      	cmp	r3, r2
 80074e8:	bfc4      	itt	gt
 80074ea:	1a9b      	subgt	r3, r3, r2
 80074ec:	18ed      	addgt	r5, r5, r3
 80074ee:	2600      	movs	r6, #0
 80074f0:	341a      	adds	r4, #26
 80074f2:	42b5      	cmp	r5, r6
 80074f4:	d11a      	bne.n	800752c <_printf_common+0xc8>
 80074f6:	2000      	movs	r0, #0
 80074f8:	e008      	b.n	800750c <_printf_common+0xa8>
 80074fa:	2301      	movs	r3, #1
 80074fc:	4652      	mov	r2, sl
 80074fe:	4641      	mov	r1, r8
 8007500:	4638      	mov	r0, r7
 8007502:	47c8      	blx	r9
 8007504:	3001      	adds	r0, #1
 8007506:	d103      	bne.n	8007510 <_printf_common+0xac>
 8007508:	f04f 30ff 	mov.w	r0, #4294967295
 800750c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007510:	3501      	adds	r5, #1
 8007512:	e7c6      	b.n	80074a2 <_printf_common+0x3e>
 8007514:	18e1      	adds	r1, r4, r3
 8007516:	1c5a      	adds	r2, r3, #1
 8007518:	2030      	movs	r0, #48	@ 0x30
 800751a:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 800751e:	4422      	add	r2, r4
 8007520:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8007524:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8007528:	3302      	adds	r3, #2
 800752a:	e7c7      	b.n	80074bc <_printf_common+0x58>
 800752c:	2301      	movs	r3, #1
 800752e:	4622      	mov	r2, r4
 8007530:	4641      	mov	r1, r8
 8007532:	4638      	mov	r0, r7
 8007534:	47c8      	blx	r9
 8007536:	3001      	adds	r0, #1
 8007538:	d0e6      	beq.n	8007508 <_printf_common+0xa4>
 800753a:	3601      	adds	r6, #1
 800753c:	e7d9      	b.n	80074f2 <_printf_common+0x8e>
	...

08007540 <_printf_i>:
 8007540:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8007544:	7e0f      	ldrb	r7, [r1, #24]
 8007546:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8007548:	2f78      	cmp	r7, #120	@ 0x78
 800754a:	4691      	mov	r9, r2
 800754c:	4680      	mov	r8, r0
 800754e:	460c      	mov	r4, r1
 8007550:	469a      	mov	sl, r3
 8007552:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8007556:	d807      	bhi.n	8007568 <_printf_i+0x28>
 8007558:	2f62      	cmp	r7, #98	@ 0x62
 800755a:	d80a      	bhi.n	8007572 <_printf_i+0x32>
 800755c:	2f00      	cmp	r7, #0
 800755e:	f000 80d1 	beq.w	8007704 <_printf_i+0x1c4>
 8007562:	2f58      	cmp	r7, #88	@ 0x58
 8007564:	f000 80b8 	beq.w	80076d8 <_printf_i+0x198>
 8007568:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800756c:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8007570:	e03a      	b.n	80075e8 <_printf_i+0xa8>
 8007572:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8007576:	2b15      	cmp	r3, #21
 8007578:	d8f6      	bhi.n	8007568 <_printf_i+0x28>
 800757a:	a101      	add	r1, pc, #4	@ (adr r1, 8007580 <_printf_i+0x40>)
 800757c:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8007580:	080075d9 	.word	0x080075d9
 8007584:	080075ed 	.word	0x080075ed
 8007588:	08007569 	.word	0x08007569
 800758c:	08007569 	.word	0x08007569
 8007590:	08007569 	.word	0x08007569
 8007594:	08007569 	.word	0x08007569
 8007598:	080075ed 	.word	0x080075ed
 800759c:	08007569 	.word	0x08007569
 80075a0:	08007569 	.word	0x08007569
 80075a4:	08007569 	.word	0x08007569
 80075a8:	08007569 	.word	0x08007569
 80075ac:	080076eb 	.word	0x080076eb
 80075b0:	08007617 	.word	0x08007617
 80075b4:	080076a5 	.word	0x080076a5
 80075b8:	08007569 	.word	0x08007569
 80075bc:	08007569 	.word	0x08007569
 80075c0:	0800770d 	.word	0x0800770d
 80075c4:	08007569 	.word	0x08007569
 80075c8:	08007617 	.word	0x08007617
 80075cc:	08007569 	.word	0x08007569
 80075d0:	08007569 	.word	0x08007569
 80075d4:	080076ad 	.word	0x080076ad
 80075d8:	6833      	ldr	r3, [r6, #0]
 80075da:	1d1a      	adds	r2, r3, #4
 80075dc:	681b      	ldr	r3, [r3, #0]
 80075de:	6032      	str	r2, [r6, #0]
 80075e0:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 80075e4:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 80075e8:	2301      	movs	r3, #1
 80075ea:	e09c      	b.n	8007726 <_printf_i+0x1e6>
 80075ec:	6833      	ldr	r3, [r6, #0]
 80075ee:	6820      	ldr	r0, [r4, #0]
 80075f0:	1d19      	adds	r1, r3, #4
 80075f2:	6031      	str	r1, [r6, #0]
 80075f4:	0606      	lsls	r6, r0, #24
 80075f6:	d501      	bpl.n	80075fc <_printf_i+0xbc>
 80075f8:	681d      	ldr	r5, [r3, #0]
 80075fa:	e003      	b.n	8007604 <_printf_i+0xc4>
 80075fc:	0645      	lsls	r5, r0, #25
 80075fe:	d5fb      	bpl.n	80075f8 <_printf_i+0xb8>
 8007600:	f9b3 5000 	ldrsh.w	r5, [r3]
 8007604:	2d00      	cmp	r5, #0
 8007606:	da03      	bge.n	8007610 <_printf_i+0xd0>
 8007608:	232d      	movs	r3, #45	@ 0x2d
 800760a:	426d      	negs	r5, r5
 800760c:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8007610:	4858      	ldr	r0, [pc, #352]	@ (8007774 <_printf_i+0x234>)
 8007612:	230a      	movs	r3, #10
 8007614:	e011      	b.n	800763a <_printf_i+0xfa>
 8007616:	6821      	ldr	r1, [r4, #0]
 8007618:	6833      	ldr	r3, [r6, #0]
 800761a:	0608      	lsls	r0, r1, #24
 800761c:	f853 5b04 	ldr.w	r5, [r3], #4
 8007620:	d402      	bmi.n	8007628 <_printf_i+0xe8>
 8007622:	0649      	lsls	r1, r1, #25
 8007624:	bf48      	it	mi
 8007626:	b2ad      	uxthmi	r5, r5
 8007628:	2f6f      	cmp	r7, #111	@ 0x6f
 800762a:	4852      	ldr	r0, [pc, #328]	@ (8007774 <_printf_i+0x234>)
 800762c:	6033      	str	r3, [r6, #0]
 800762e:	bf14      	ite	ne
 8007630:	230a      	movne	r3, #10
 8007632:	2308      	moveq	r3, #8
 8007634:	2100      	movs	r1, #0
 8007636:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 800763a:	6866      	ldr	r6, [r4, #4]
 800763c:	60a6      	str	r6, [r4, #8]
 800763e:	2e00      	cmp	r6, #0
 8007640:	db05      	blt.n	800764e <_printf_i+0x10e>
 8007642:	6821      	ldr	r1, [r4, #0]
 8007644:	432e      	orrs	r6, r5
 8007646:	f021 0104 	bic.w	r1, r1, #4
 800764a:	6021      	str	r1, [r4, #0]
 800764c:	d04b      	beq.n	80076e6 <_printf_i+0x1a6>
 800764e:	4616      	mov	r6, r2
 8007650:	fbb5 f1f3 	udiv	r1, r5, r3
 8007654:	fb03 5711 	mls	r7, r3, r1, r5
 8007658:	5dc7      	ldrb	r7, [r0, r7]
 800765a:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800765e:	462f      	mov	r7, r5
 8007660:	42bb      	cmp	r3, r7
 8007662:	460d      	mov	r5, r1
 8007664:	d9f4      	bls.n	8007650 <_printf_i+0x110>
 8007666:	2b08      	cmp	r3, #8
 8007668:	d10b      	bne.n	8007682 <_printf_i+0x142>
 800766a:	6823      	ldr	r3, [r4, #0]
 800766c:	07df      	lsls	r7, r3, #31
 800766e:	d508      	bpl.n	8007682 <_printf_i+0x142>
 8007670:	6923      	ldr	r3, [r4, #16]
 8007672:	6861      	ldr	r1, [r4, #4]
 8007674:	4299      	cmp	r1, r3
 8007676:	bfde      	ittt	le
 8007678:	2330      	movle	r3, #48	@ 0x30
 800767a:	f806 3c01 	strble.w	r3, [r6, #-1]
 800767e:	f106 36ff 	addle.w	r6, r6, #4294967295
 8007682:	1b92      	subs	r2, r2, r6
 8007684:	6122      	str	r2, [r4, #16]
 8007686:	f8cd a000 	str.w	sl, [sp]
 800768a:	464b      	mov	r3, r9
 800768c:	aa03      	add	r2, sp, #12
 800768e:	4621      	mov	r1, r4
 8007690:	4640      	mov	r0, r8
 8007692:	f7ff fee7 	bl	8007464 <_printf_common>
 8007696:	3001      	adds	r0, #1
 8007698:	d14a      	bne.n	8007730 <_printf_i+0x1f0>
 800769a:	f04f 30ff 	mov.w	r0, #4294967295
 800769e:	b004      	add	sp, #16
 80076a0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80076a4:	6823      	ldr	r3, [r4, #0]
 80076a6:	f043 0320 	orr.w	r3, r3, #32
 80076aa:	6023      	str	r3, [r4, #0]
 80076ac:	4832      	ldr	r0, [pc, #200]	@ (8007778 <_printf_i+0x238>)
 80076ae:	2778      	movs	r7, #120	@ 0x78
 80076b0:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 80076b4:	6823      	ldr	r3, [r4, #0]
 80076b6:	6831      	ldr	r1, [r6, #0]
 80076b8:	061f      	lsls	r7, r3, #24
 80076ba:	f851 5b04 	ldr.w	r5, [r1], #4
 80076be:	d402      	bmi.n	80076c6 <_printf_i+0x186>
 80076c0:	065f      	lsls	r7, r3, #25
 80076c2:	bf48      	it	mi
 80076c4:	b2ad      	uxthmi	r5, r5
 80076c6:	6031      	str	r1, [r6, #0]
 80076c8:	07d9      	lsls	r1, r3, #31
 80076ca:	bf44      	itt	mi
 80076cc:	f043 0320 	orrmi.w	r3, r3, #32
 80076d0:	6023      	strmi	r3, [r4, #0]
 80076d2:	b11d      	cbz	r5, 80076dc <_printf_i+0x19c>
 80076d4:	2310      	movs	r3, #16
 80076d6:	e7ad      	b.n	8007634 <_printf_i+0xf4>
 80076d8:	4826      	ldr	r0, [pc, #152]	@ (8007774 <_printf_i+0x234>)
 80076da:	e7e9      	b.n	80076b0 <_printf_i+0x170>
 80076dc:	6823      	ldr	r3, [r4, #0]
 80076de:	f023 0320 	bic.w	r3, r3, #32
 80076e2:	6023      	str	r3, [r4, #0]
 80076e4:	e7f6      	b.n	80076d4 <_printf_i+0x194>
 80076e6:	4616      	mov	r6, r2
 80076e8:	e7bd      	b.n	8007666 <_printf_i+0x126>
 80076ea:	6833      	ldr	r3, [r6, #0]
 80076ec:	6825      	ldr	r5, [r4, #0]
 80076ee:	6961      	ldr	r1, [r4, #20]
 80076f0:	1d18      	adds	r0, r3, #4
 80076f2:	6030      	str	r0, [r6, #0]
 80076f4:	062e      	lsls	r6, r5, #24
 80076f6:	681b      	ldr	r3, [r3, #0]
 80076f8:	d501      	bpl.n	80076fe <_printf_i+0x1be>
 80076fa:	6019      	str	r1, [r3, #0]
 80076fc:	e002      	b.n	8007704 <_printf_i+0x1c4>
 80076fe:	0668      	lsls	r0, r5, #25
 8007700:	d5fb      	bpl.n	80076fa <_printf_i+0x1ba>
 8007702:	8019      	strh	r1, [r3, #0]
 8007704:	2300      	movs	r3, #0
 8007706:	6123      	str	r3, [r4, #16]
 8007708:	4616      	mov	r6, r2
 800770a:	e7bc      	b.n	8007686 <_printf_i+0x146>
 800770c:	6833      	ldr	r3, [r6, #0]
 800770e:	1d1a      	adds	r2, r3, #4
 8007710:	6032      	str	r2, [r6, #0]
 8007712:	681e      	ldr	r6, [r3, #0]
 8007714:	6862      	ldr	r2, [r4, #4]
 8007716:	2100      	movs	r1, #0
 8007718:	4630      	mov	r0, r6
 800771a:	f7f8 fd81 	bl	8000220 <memchr>
 800771e:	b108      	cbz	r0, 8007724 <_printf_i+0x1e4>
 8007720:	1b80      	subs	r0, r0, r6
 8007722:	6060      	str	r0, [r4, #4]
 8007724:	6863      	ldr	r3, [r4, #4]
 8007726:	6123      	str	r3, [r4, #16]
 8007728:	2300      	movs	r3, #0
 800772a:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800772e:	e7aa      	b.n	8007686 <_printf_i+0x146>
 8007730:	6923      	ldr	r3, [r4, #16]
 8007732:	4632      	mov	r2, r6
 8007734:	4649      	mov	r1, r9
 8007736:	4640      	mov	r0, r8
 8007738:	47d0      	blx	sl
 800773a:	3001      	adds	r0, #1
 800773c:	d0ad      	beq.n	800769a <_printf_i+0x15a>
 800773e:	6823      	ldr	r3, [r4, #0]
 8007740:	079b      	lsls	r3, r3, #30
 8007742:	d413      	bmi.n	800776c <_printf_i+0x22c>
 8007744:	68e0      	ldr	r0, [r4, #12]
 8007746:	9b03      	ldr	r3, [sp, #12]
 8007748:	4298      	cmp	r0, r3
 800774a:	bfb8      	it	lt
 800774c:	4618      	movlt	r0, r3
 800774e:	e7a6      	b.n	800769e <_printf_i+0x15e>
 8007750:	2301      	movs	r3, #1
 8007752:	4632      	mov	r2, r6
 8007754:	4649      	mov	r1, r9
 8007756:	4640      	mov	r0, r8
 8007758:	47d0      	blx	sl
 800775a:	3001      	adds	r0, #1
 800775c:	d09d      	beq.n	800769a <_printf_i+0x15a>
 800775e:	3501      	adds	r5, #1
 8007760:	68e3      	ldr	r3, [r4, #12]
 8007762:	9903      	ldr	r1, [sp, #12]
 8007764:	1a5b      	subs	r3, r3, r1
 8007766:	42ab      	cmp	r3, r5
 8007768:	dcf2      	bgt.n	8007750 <_printf_i+0x210>
 800776a:	e7eb      	b.n	8007744 <_printf_i+0x204>
 800776c:	2500      	movs	r5, #0
 800776e:	f104 0619 	add.w	r6, r4, #25
 8007772:	e7f5      	b.n	8007760 <_printf_i+0x220>
 8007774:	08007c03 	.word	0x08007c03
 8007778:	08007c14 	.word	0x08007c14

0800777c <__swbuf_r>:
 800777c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800777e:	460e      	mov	r6, r1
 8007780:	4614      	mov	r4, r2
 8007782:	4605      	mov	r5, r0
 8007784:	b118      	cbz	r0, 800778e <__swbuf_r+0x12>
 8007786:	6a03      	ldr	r3, [r0, #32]
 8007788:	b90b      	cbnz	r3, 800778e <__swbuf_r+0x12>
 800778a:	f7ff f92f 	bl	80069ec <__sinit>
 800778e:	69a3      	ldr	r3, [r4, #24]
 8007790:	60a3      	str	r3, [r4, #8]
 8007792:	89a3      	ldrh	r3, [r4, #12]
 8007794:	071a      	lsls	r2, r3, #28
 8007796:	d501      	bpl.n	800779c <__swbuf_r+0x20>
 8007798:	6923      	ldr	r3, [r4, #16]
 800779a:	b943      	cbnz	r3, 80077ae <__swbuf_r+0x32>
 800779c:	4621      	mov	r1, r4
 800779e:	4628      	mov	r0, r5
 80077a0:	f000 f82a 	bl	80077f8 <__swsetup_r>
 80077a4:	b118      	cbz	r0, 80077ae <__swbuf_r+0x32>
 80077a6:	f04f 37ff 	mov.w	r7, #4294967295
 80077aa:	4638      	mov	r0, r7
 80077ac:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80077ae:	6823      	ldr	r3, [r4, #0]
 80077b0:	6922      	ldr	r2, [r4, #16]
 80077b2:	1a98      	subs	r0, r3, r2
 80077b4:	6963      	ldr	r3, [r4, #20]
 80077b6:	b2f6      	uxtb	r6, r6
 80077b8:	4283      	cmp	r3, r0
 80077ba:	4637      	mov	r7, r6
 80077bc:	dc05      	bgt.n	80077ca <__swbuf_r+0x4e>
 80077be:	4621      	mov	r1, r4
 80077c0:	4628      	mov	r0, r5
 80077c2:	f7ff f84b 	bl	800685c <_fflush_r>
 80077c6:	2800      	cmp	r0, #0
 80077c8:	d1ed      	bne.n	80077a6 <__swbuf_r+0x2a>
 80077ca:	68a3      	ldr	r3, [r4, #8]
 80077cc:	3b01      	subs	r3, #1
 80077ce:	60a3      	str	r3, [r4, #8]
 80077d0:	6823      	ldr	r3, [r4, #0]
 80077d2:	1c5a      	adds	r2, r3, #1
 80077d4:	6022      	str	r2, [r4, #0]
 80077d6:	701e      	strb	r6, [r3, #0]
 80077d8:	6962      	ldr	r2, [r4, #20]
 80077da:	1c43      	adds	r3, r0, #1
 80077dc:	429a      	cmp	r2, r3
 80077de:	d004      	beq.n	80077ea <__swbuf_r+0x6e>
 80077e0:	89a3      	ldrh	r3, [r4, #12]
 80077e2:	07db      	lsls	r3, r3, #31
 80077e4:	d5e1      	bpl.n	80077aa <__swbuf_r+0x2e>
 80077e6:	2e0a      	cmp	r6, #10
 80077e8:	d1df      	bne.n	80077aa <__swbuf_r+0x2e>
 80077ea:	4621      	mov	r1, r4
 80077ec:	4628      	mov	r0, r5
 80077ee:	f7ff f835 	bl	800685c <_fflush_r>
 80077f2:	2800      	cmp	r0, #0
 80077f4:	d0d9      	beq.n	80077aa <__swbuf_r+0x2e>
 80077f6:	e7d6      	b.n	80077a6 <__swbuf_r+0x2a>

080077f8 <__swsetup_r>:
 80077f8:	b538      	push	{r3, r4, r5, lr}
 80077fa:	4b29      	ldr	r3, [pc, #164]	@ (80078a0 <__swsetup_r+0xa8>)
 80077fc:	4605      	mov	r5, r0
 80077fe:	6818      	ldr	r0, [r3, #0]
 8007800:	460c      	mov	r4, r1
 8007802:	b118      	cbz	r0, 800780c <__swsetup_r+0x14>
 8007804:	6a03      	ldr	r3, [r0, #32]
 8007806:	b90b      	cbnz	r3, 800780c <__swsetup_r+0x14>
 8007808:	f7ff f8f0 	bl	80069ec <__sinit>
 800780c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8007810:	0719      	lsls	r1, r3, #28
 8007812:	d422      	bmi.n	800785a <__swsetup_r+0x62>
 8007814:	06da      	lsls	r2, r3, #27
 8007816:	d407      	bmi.n	8007828 <__swsetup_r+0x30>
 8007818:	2209      	movs	r2, #9
 800781a:	602a      	str	r2, [r5, #0]
 800781c:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8007820:	81a3      	strh	r3, [r4, #12]
 8007822:	f04f 30ff 	mov.w	r0, #4294967295
 8007826:	e033      	b.n	8007890 <__swsetup_r+0x98>
 8007828:	0758      	lsls	r0, r3, #29
 800782a:	d512      	bpl.n	8007852 <__swsetup_r+0x5a>
 800782c:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800782e:	b141      	cbz	r1, 8007842 <__swsetup_r+0x4a>
 8007830:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8007834:	4299      	cmp	r1, r3
 8007836:	d002      	beq.n	800783e <__swsetup_r+0x46>
 8007838:	4628      	mov	r0, r5
 800783a:	f7ff fa81 	bl	8006d40 <_free_r>
 800783e:	2300      	movs	r3, #0
 8007840:	6363      	str	r3, [r4, #52]	@ 0x34
 8007842:	89a3      	ldrh	r3, [r4, #12]
 8007844:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 8007848:	81a3      	strh	r3, [r4, #12]
 800784a:	2300      	movs	r3, #0
 800784c:	6063      	str	r3, [r4, #4]
 800784e:	6923      	ldr	r3, [r4, #16]
 8007850:	6023      	str	r3, [r4, #0]
 8007852:	89a3      	ldrh	r3, [r4, #12]
 8007854:	f043 0308 	orr.w	r3, r3, #8
 8007858:	81a3      	strh	r3, [r4, #12]
 800785a:	6923      	ldr	r3, [r4, #16]
 800785c:	b94b      	cbnz	r3, 8007872 <__swsetup_r+0x7a>
 800785e:	89a3      	ldrh	r3, [r4, #12]
 8007860:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 8007864:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8007868:	d003      	beq.n	8007872 <__swsetup_r+0x7a>
 800786a:	4621      	mov	r1, r4
 800786c:	4628      	mov	r0, r5
 800786e:	f000 f897 	bl	80079a0 <__smakebuf_r>
 8007872:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8007876:	f013 0201 	ands.w	r2, r3, #1
 800787a:	d00a      	beq.n	8007892 <__swsetup_r+0x9a>
 800787c:	2200      	movs	r2, #0
 800787e:	60a2      	str	r2, [r4, #8]
 8007880:	6962      	ldr	r2, [r4, #20]
 8007882:	4252      	negs	r2, r2
 8007884:	61a2      	str	r2, [r4, #24]
 8007886:	6922      	ldr	r2, [r4, #16]
 8007888:	b942      	cbnz	r2, 800789c <__swsetup_r+0xa4>
 800788a:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 800788e:	d1c5      	bne.n	800781c <__swsetup_r+0x24>
 8007890:	bd38      	pop	{r3, r4, r5, pc}
 8007892:	0799      	lsls	r1, r3, #30
 8007894:	bf58      	it	pl
 8007896:	6962      	ldrpl	r2, [r4, #20]
 8007898:	60a2      	str	r2, [r4, #8]
 800789a:	e7f4      	b.n	8007886 <__swsetup_r+0x8e>
 800789c:	2000      	movs	r0, #0
 800789e:	e7f7      	b.n	8007890 <__swsetup_r+0x98>
 80078a0:	20000030 	.word	0x20000030

080078a4 <memmove>:
 80078a4:	4288      	cmp	r0, r1
 80078a6:	b510      	push	{r4, lr}
 80078a8:	eb01 0402 	add.w	r4, r1, r2
 80078ac:	d902      	bls.n	80078b4 <memmove+0x10>
 80078ae:	4284      	cmp	r4, r0
 80078b0:	4623      	mov	r3, r4
 80078b2:	d807      	bhi.n	80078c4 <memmove+0x20>
 80078b4:	1e43      	subs	r3, r0, #1
 80078b6:	42a1      	cmp	r1, r4
 80078b8:	d008      	beq.n	80078cc <memmove+0x28>
 80078ba:	f811 2b01 	ldrb.w	r2, [r1], #1
 80078be:	f803 2f01 	strb.w	r2, [r3, #1]!
 80078c2:	e7f8      	b.n	80078b6 <memmove+0x12>
 80078c4:	4402      	add	r2, r0
 80078c6:	4601      	mov	r1, r0
 80078c8:	428a      	cmp	r2, r1
 80078ca:	d100      	bne.n	80078ce <memmove+0x2a>
 80078cc:	bd10      	pop	{r4, pc}
 80078ce:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 80078d2:	f802 4d01 	strb.w	r4, [r2, #-1]!
 80078d6:	e7f7      	b.n	80078c8 <memmove+0x24>

080078d8 <_sbrk_r>:
 80078d8:	b538      	push	{r3, r4, r5, lr}
 80078da:	4d06      	ldr	r5, [pc, #24]	@ (80078f4 <_sbrk_r+0x1c>)
 80078dc:	2300      	movs	r3, #0
 80078de:	4604      	mov	r4, r0
 80078e0:	4608      	mov	r0, r1
 80078e2:	602b      	str	r3, [r5, #0]
 80078e4:	f7f9 f994 	bl	8000c10 <_sbrk>
 80078e8:	1c43      	adds	r3, r0, #1
 80078ea:	d102      	bne.n	80078f2 <_sbrk_r+0x1a>
 80078ec:	682b      	ldr	r3, [r5, #0]
 80078ee:	b103      	cbz	r3, 80078f2 <_sbrk_r+0x1a>
 80078f0:	6023      	str	r3, [r4, #0]
 80078f2:	bd38      	pop	{r3, r4, r5, pc}
 80078f4:	2000499c 	.word	0x2000499c

080078f8 <_realloc_r>:
 80078f8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80078fc:	4607      	mov	r7, r0
 80078fe:	4614      	mov	r4, r2
 8007900:	460d      	mov	r5, r1
 8007902:	b921      	cbnz	r1, 800790e <_realloc_r+0x16>
 8007904:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8007908:	4611      	mov	r1, r2
 800790a:	f7ff ba85 	b.w	8006e18 <_malloc_r>
 800790e:	b92a      	cbnz	r2, 800791c <_realloc_r+0x24>
 8007910:	f7ff fa16 	bl	8006d40 <_free_r>
 8007914:	4625      	mov	r5, r4
 8007916:	4628      	mov	r0, r5
 8007918:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800791c:	f000 f89e 	bl	8007a5c <_malloc_usable_size_r>
 8007920:	4284      	cmp	r4, r0
 8007922:	4606      	mov	r6, r0
 8007924:	d802      	bhi.n	800792c <_realloc_r+0x34>
 8007926:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800792a:	d8f4      	bhi.n	8007916 <_realloc_r+0x1e>
 800792c:	4621      	mov	r1, r4
 800792e:	4638      	mov	r0, r7
 8007930:	f7ff fa72 	bl	8006e18 <_malloc_r>
 8007934:	4680      	mov	r8, r0
 8007936:	b908      	cbnz	r0, 800793c <_realloc_r+0x44>
 8007938:	4645      	mov	r5, r8
 800793a:	e7ec      	b.n	8007916 <_realloc_r+0x1e>
 800793c:	42b4      	cmp	r4, r6
 800793e:	4622      	mov	r2, r4
 8007940:	4629      	mov	r1, r5
 8007942:	bf28      	it	cs
 8007944:	4632      	movcs	r2, r6
 8007946:	f7ff f9ec 	bl	8006d22 <memcpy>
 800794a:	4629      	mov	r1, r5
 800794c:	4638      	mov	r0, r7
 800794e:	f7ff f9f7 	bl	8006d40 <_free_r>
 8007952:	e7f1      	b.n	8007938 <_realloc_r+0x40>

08007954 <__swhatbuf_r>:
 8007954:	b570      	push	{r4, r5, r6, lr}
 8007956:	460c      	mov	r4, r1
 8007958:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800795c:	2900      	cmp	r1, #0
 800795e:	b096      	sub	sp, #88	@ 0x58
 8007960:	4615      	mov	r5, r2
 8007962:	461e      	mov	r6, r3
 8007964:	da0d      	bge.n	8007982 <__swhatbuf_r+0x2e>
 8007966:	89a3      	ldrh	r3, [r4, #12]
 8007968:	f013 0f80 	tst.w	r3, #128	@ 0x80
 800796c:	f04f 0100 	mov.w	r1, #0
 8007970:	bf14      	ite	ne
 8007972:	2340      	movne	r3, #64	@ 0x40
 8007974:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 8007978:	2000      	movs	r0, #0
 800797a:	6031      	str	r1, [r6, #0]
 800797c:	602b      	str	r3, [r5, #0]
 800797e:	b016      	add	sp, #88	@ 0x58
 8007980:	bd70      	pop	{r4, r5, r6, pc}
 8007982:	466a      	mov	r2, sp
 8007984:	f000 f848 	bl	8007a18 <_fstat_r>
 8007988:	2800      	cmp	r0, #0
 800798a:	dbec      	blt.n	8007966 <__swhatbuf_r+0x12>
 800798c:	9901      	ldr	r1, [sp, #4]
 800798e:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 8007992:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 8007996:	4259      	negs	r1, r3
 8007998:	4159      	adcs	r1, r3
 800799a:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800799e:	e7eb      	b.n	8007978 <__swhatbuf_r+0x24>

080079a0 <__smakebuf_r>:
 80079a0:	898b      	ldrh	r3, [r1, #12]
 80079a2:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80079a4:	079d      	lsls	r5, r3, #30
 80079a6:	4606      	mov	r6, r0
 80079a8:	460c      	mov	r4, r1
 80079aa:	d507      	bpl.n	80079bc <__smakebuf_r+0x1c>
 80079ac:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 80079b0:	6023      	str	r3, [r4, #0]
 80079b2:	6123      	str	r3, [r4, #16]
 80079b4:	2301      	movs	r3, #1
 80079b6:	6163      	str	r3, [r4, #20]
 80079b8:	b003      	add	sp, #12
 80079ba:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80079bc:	ab01      	add	r3, sp, #4
 80079be:	466a      	mov	r2, sp
 80079c0:	f7ff ffc8 	bl	8007954 <__swhatbuf_r>
 80079c4:	9f00      	ldr	r7, [sp, #0]
 80079c6:	4605      	mov	r5, r0
 80079c8:	4639      	mov	r1, r7
 80079ca:	4630      	mov	r0, r6
 80079cc:	f7ff fa24 	bl	8006e18 <_malloc_r>
 80079d0:	b948      	cbnz	r0, 80079e6 <__smakebuf_r+0x46>
 80079d2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80079d6:	059a      	lsls	r2, r3, #22
 80079d8:	d4ee      	bmi.n	80079b8 <__smakebuf_r+0x18>
 80079da:	f023 0303 	bic.w	r3, r3, #3
 80079de:	f043 0302 	orr.w	r3, r3, #2
 80079e2:	81a3      	strh	r3, [r4, #12]
 80079e4:	e7e2      	b.n	80079ac <__smakebuf_r+0xc>
 80079e6:	89a3      	ldrh	r3, [r4, #12]
 80079e8:	6020      	str	r0, [r4, #0]
 80079ea:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80079ee:	81a3      	strh	r3, [r4, #12]
 80079f0:	9b01      	ldr	r3, [sp, #4]
 80079f2:	e9c4 0704 	strd	r0, r7, [r4, #16]
 80079f6:	b15b      	cbz	r3, 8007a10 <__smakebuf_r+0x70>
 80079f8:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80079fc:	4630      	mov	r0, r6
 80079fe:	f000 f81d 	bl	8007a3c <_isatty_r>
 8007a02:	b128      	cbz	r0, 8007a10 <__smakebuf_r+0x70>
 8007a04:	89a3      	ldrh	r3, [r4, #12]
 8007a06:	f023 0303 	bic.w	r3, r3, #3
 8007a0a:	f043 0301 	orr.w	r3, r3, #1
 8007a0e:	81a3      	strh	r3, [r4, #12]
 8007a10:	89a3      	ldrh	r3, [r4, #12]
 8007a12:	431d      	orrs	r5, r3
 8007a14:	81a5      	strh	r5, [r4, #12]
 8007a16:	e7cf      	b.n	80079b8 <__smakebuf_r+0x18>

08007a18 <_fstat_r>:
 8007a18:	b538      	push	{r3, r4, r5, lr}
 8007a1a:	4d07      	ldr	r5, [pc, #28]	@ (8007a38 <_fstat_r+0x20>)
 8007a1c:	2300      	movs	r3, #0
 8007a1e:	4604      	mov	r4, r0
 8007a20:	4608      	mov	r0, r1
 8007a22:	4611      	mov	r1, r2
 8007a24:	602b      	str	r3, [r5, #0]
 8007a26:	f7fe fd12 	bl	800644e <_fstat>
 8007a2a:	1c43      	adds	r3, r0, #1
 8007a2c:	d102      	bne.n	8007a34 <_fstat_r+0x1c>
 8007a2e:	682b      	ldr	r3, [r5, #0]
 8007a30:	b103      	cbz	r3, 8007a34 <_fstat_r+0x1c>
 8007a32:	6023      	str	r3, [r4, #0]
 8007a34:	bd38      	pop	{r3, r4, r5, pc}
 8007a36:	bf00      	nop
 8007a38:	2000499c 	.word	0x2000499c

08007a3c <_isatty_r>:
 8007a3c:	b538      	push	{r3, r4, r5, lr}
 8007a3e:	4d06      	ldr	r5, [pc, #24]	@ (8007a58 <_isatty_r+0x1c>)
 8007a40:	2300      	movs	r3, #0
 8007a42:	4604      	mov	r4, r0
 8007a44:	4608      	mov	r0, r1
 8007a46:	602b      	str	r3, [r5, #0]
 8007a48:	f7fe fe66 	bl	8006718 <_isatty>
 8007a4c:	1c43      	adds	r3, r0, #1
 8007a4e:	d102      	bne.n	8007a56 <_isatty_r+0x1a>
 8007a50:	682b      	ldr	r3, [r5, #0]
 8007a52:	b103      	cbz	r3, 8007a56 <_isatty_r+0x1a>
 8007a54:	6023      	str	r3, [r4, #0]
 8007a56:	bd38      	pop	{r3, r4, r5, pc}
 8007a58:	2000499c 	.word	0x2000499c

08007a5c <_malloc_usable_size_r>:
 8007a5c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8007a60:	1f18      	subs	r0, r3, #4
 8007a62:	2b00      	cmp	r3, #0
 8007a64:	bfbc      	itt	lt
 8007a66:	580b      	ldrlt	r3, [r1, r0]
 8007a68:	18c0      	addlt	r0, r0, r3
 8007a6a:	4770      	bx	lr

08007a6c <_init>:
 8007a6c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007a6e:	bf00      	nop
 8007a70:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007a72:	bc08      	pop	{r3}
 8007a74:	469e      	mov	lr, r3
 8007a76:	4770      	bx	lr

08007a78 <_fini>:
 8007a78:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007a7a:	bf00      	nop
 8007a7c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007a7e:	bc08      	pop	{r3}
 8007a80:	469e      	mov	lr, r3
 8007a82:	4770      	bx	lr
